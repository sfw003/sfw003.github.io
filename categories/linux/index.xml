<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on 石某人</title><link>https://sfw003.github.io/categories/linux/</link><description>Recent content in Linux on 石某人</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>石某人</copyright><lastBuildDate>Thu, 03 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sfw003.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 系统系列文章</title><link>https://sfw003.github.io/p/linux-series/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-series/</guid><description>&lt;h2 id="文章列表">文章列表
&lt;/h2>&lt;h3 id="linux-常用命令">Linux 常用命令
&lt;/h3>&lt;h3 id="linux进程管理">Linux进程管理
&lt;/h3>&lt;p>绘制文件：&lt;a class="link" href="linux%e8%bf%9b%e7%a8%8b%e7%ae%a1%e7%90%86.drawio" >linux进程管理.drawio&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/linux-process/" >Linux 进程&lt;/a> - Linux 进程管理&lt;/li>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/linux-process-communication/" >Linux 进程间通信&lt;/a> - Linux 进程间通信&lt;/li>
&lt;/ul>
&lt;h3 id="linux-文件系统">Linux 文件系统
&lt;/h3></description></item><item><title>Linux 进程</title><link>https://sfw003.github.io/p/linux-process/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-process/</guid><description>&lt;p>绘图文件，在&lt;a class="link" href="https://sfw003.github.io/p/linux-series/#linux进程管理" >linux系列文章:进程管理&lt;/a>&lt;/p>
&lt;h2 id="进程和pcb">进程和PCB
&lt;/h2>&lt;p>什么是进程？
课本上的定义有很多，如：进程是程序的一次执行，是加载到内存的程序，是&lt;strong>系统进行资源分配和调度的一个独立单位&lt;/strong>。&lt;/p>
&lt;p>我们不必去纠结定义，只需知道2点：如何描述进程？如何管理进程？&lt;/p>
&lt;p>描述=提取进程属性，管理=对进程的属性进行管理
由此首先要引出一个概念：进程的PCB&lt;/p>
&lt;p>PCB(process control block) 是什么？一句话：&lt;strong>进程属性的集合&lt;/strong>，是一个结构体。此时进程就被拆分为2个部分：属性和数据，如下图：&lt;/p>
&lt;p>linux下的进程信息存储在&lt;code>/proc&lt;/code>目录下&lt;/p>
&lt;h3 id="linux下的pcb">linux下的PCB
&lt;/h3>&lt;p>在linux操作系统下的PCB：&lt;strong>task_struct（结构体）&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>task_struct的内容分类：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>标识符&lt;/strong>: 描述本进程的唯一标示符，用来区别其他进程。&lt;/li>
&lt;li>&lt;strong>状态&lt;/strong>: 任务状态，退出代码，退出信号等。&lt;/li>
&lt;li>&lt;strong>优先级&lt;/strong>: 相对于其他进程的优先级。&lt;/li>
&lt;li>程序计数器: 程序中即将被执行的下一条指令的地址。&lt;/li>
&lt;li>内存指针: 包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针&lt;/li>
&lt;li>上下文数据: 进程执行时处理器的寄存器中的数据[休学例子，要加图CPU，寄存器]。&lt;/li>
&lt;li>I／O状态信息: 包括显示的I/O请求,分配给进程的I／O设备和被进程使用的文件列表。&lt;/li>
&lt;li>记账信息: 可能包括处理器时间总和，使用的时钟数总和，时间限制，记账号等。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h3 id="进程状态">进程状态
&lt;/h3>&lt;p>在操作系统学科中，描述了一&lt;strong>个进程活动期间至少具备3种状态&lt;/strong>，即进程的三态模型。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/image-20250410115534591.png"
width="483"
height="315"
srcset="https://sfw003.github.io/p/linux-process/image/image-20250410115534591_hu_bec84f15f212fa14.png 480w, https://sfw003.github.io/p/linux-process/image/image-20250410115534591_hu_309684bf5fa1ab87.png 1024w"
loading="lazy"
alt="image-20250410115534591"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>但是这几种状态不够应对实际的情况。如果有大量处于阻塞状态的进程，将长时间占据物理内存空间，造成浪费。因此我们新增一种状态——&lt;strong>挂起状态&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>挂起状态：进程没有占用物理内存空间的状态（关键词：物理内存）&lt;/p>
&lt;p>理解：此时进程的数据会被移到磁盘空间中&lt;/p>&lt;/blockquote>
&lt;p>其中挂起状态又分为2种：阻塞挂起和就绪挂起&lt;/p>
&lt;ul>
&lt;li>阻塞挂起状态：进程在外存，等待事件&lt;/li>
&lt;li>就绪挂起状态：进程在外存，事件就绪&lt;/li>
&lt;/ul>
&lt;p>因此现在有 运行、就绪、阻塞、阻塞挂起、就绪挂起共5种状态，如果再具体一点，还可以加入进程&lt;strong>创建状态&lt;/strong>和进程&lt;strong>结束状态&lt;/strong>，共7种。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/image-20250410141859878.png"
width="721"
height="318"
srcset="https://sfw003.github.io/p/linux-process/image/image-20250410141859878_hu_9faf517a3ac888f3.png 480w, https://sfw003.github.io/p/linux-process/image/image-20250410141859878_hu_de4865f7672b1bc1.png 1024w"
loading="lazy"
alt="image-20250410141859878"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="544px"
>&lt;/p>
&lt;p>在linux系统中，关于进程状态的定义如下，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">task_state_array&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* states in TASK_REPORT: */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;R (running)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x00 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;S (sleeping)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x01 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;D (disk sleep)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x02 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;T (stopped)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x04 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;t (tracing stop)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x08 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;X (dead)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x10 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Z (zombie)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x20 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;P (parked)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x40 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* states beyond TASK_REPORT: */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;I (idle)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x80 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="磁盘睡眠--d">磁盘睡眠 &amp;ndash; D
&lt;/h4>&lt;p>D状态，磁盘睡眠，进程的磁盘睡眠状态（Disk Sleep State）通常是指进程处于等待磁盘I/O操作完成的状态。这种状态通常出现在进程请求进行磁盘读取或写入操作时，但磁盘尚未完成相应的I/O操作，因此进程被阻塞，等待磁盘响应。在这种状态下，进程不会消耗CPU时间，而是被挂起，直到磁盘I/O操作完成。&lt;/p>
&lt;p>也就是挂起状态。&lt;/p>
&lt;h4 id="暂停和跟踪暂停--t和t">暂停和跟踪暂停 &amp;ndash; T和t
&lt;/h4>&lt;p>Linux操作系统的有个信号&lt;code>kill -19&lt;/code>， 可以使进程暂停。T状态即进程处于暂停状态。注意不要于S状态混淆，S状态一定是进程在等待某种资源，但T状态不一定在等待某种资源。&lt;/p>
&lt;p>那T和t有什么区别呢？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Stopped（停止）状态：
进程处于停止状态通常是由于接收到了一个信号，例如SIGSTOP（Ctrl-Z产生的SIGTSTP信号）或者SIGTSTP（通常由shell的暂停命令引发）。这种状态下的进程被挂起，暂时停止执行，但可以通过发送SIGCONT信号来恢复执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tracing Stop（跟踪停止）状态：
进程处于跟踪停止状态通常是由于调试器（如GDB）或者ptrace系统调用的作用。在这种状态下，进程被调试器所追踪，通常是因为调试器在进行单步执行、观察或者修改进程的内存等操作。这种状态下的进程暂时停止执行，直到调试器允许其继续执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="僵尸进程--z">僵尸进程 &amp;ndash; Z
&lt;/h4>&lt;p>当一个进程（子进程）完成执行后，它的退出状态需要被父进程获取。如果父进程没有主动获取子进程的退出状态，那么子进程就会变成僵尸进程，相当于一个人处于生死之间。&lt;/p>
&lt;h5 id="父子进程-">父子进程 *
&lt;/h5>&lt;p>这里提到了父子进程，那什么是父进程、子进程？如何创建子进程？&lt;/p>
&lt;p>下方代码实现：父进程一直运行，子进程执行3次后结束&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是进程：pid = %d，ppid = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getppid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是子进程，pid =%d，ppid =%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getppid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是父进程，pid = %d，ppid = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getppid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果如下：子进程的状态由S+ &amp;ndash;&amp;gt; Z+， Z即处于僵尸状态&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/a67747920f70f6aabf6712cac48bde5b.png"
width="2201"
height="913"
srcset="https://sfw003.github.io/p/linux-process/image/a67747920f70f6aabf6712cac48bde5b_hu_b9ad2643e4cc1121.png 480w, https://sfw003.github.io/p/linux-process/image/a67747920f70f6aabf6712cac48bde5b_hu_c493505028f33825.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="578px"
>&lt;/p>
&lt;p>僵尸进程虽然不会直接对系统造成严重影响，但长时间存在的僵尸进程会对系统的正常运行产生一些间接的危害，包括：可能导致资源耗尽，影响进程管理，降低系统稳定性，因此需要父进程处理僵尸进程。
父进程通常需要调用类似于wait()或waitpid()的系统调用来等待子进程的退出，并获取其退出状态。&lt;/p>
&lt;p>&lt;strong>当然如果父进程也结束，系统会自动把子进程释放。&lt;/strong>&lt;/p>
&lt;h4 id="孤儿进程">孤儿进程
&lt;/h4>&lt;p>僵尸进程是子进程结束，但父进程未结束。如何父进程先结束，子进程后结束呢？那么子进程便会变为孤儿进程，并被&lt;strong>托孤&lt;/strong>给1号进程，即操作系统。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/13689dfc900f45c81ca9d116a4d55c2b.png"
width="2426"
height="779"
srcset="https://sfw003.github.io/p/linux-process/image/13689dfc900f45c81ca9d116a4d55c2b_hu_dd4aaa17e13875a5.png 480w, https://sfw003.github.io/p/linux-process/image/13689dfc900f45c81ca9d116a4d55c2b_hu_62ec059c2a70d62e.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="311"
data-flex-basis="747px"
>&lt;/p>
&lt;h3 id="进程优先级">进程优先级
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/de81281fa20b148bfabb0f27df8892cb.png"
width="1050"
height="311"
srcset="https://sfw003.github.io/p/linux-process/image/de81281fa20b148bfabb0f27df8892cb_hu_67425e7cac0b994f.png 480w, https://sfw003.github.io/p/linux-process/image/de81281fa20b148bfabb0f27df8892cb_hu_8686293bd529bf14.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="337"
data-flex-basis="810px"
>
PRI（Priority）：PRI 表示进程的静态优先级或调度优先级。俗点说就是程序被CPU执行的先后顺序，&lt;strong>此值越小,进程的优先级别越高。&lt;/strong>
NI（Nice Value）：NI 表示进程的 Nice 值，是一个表示进程调度优先级的数值。它的作用是改变PRI的值。&lt;/p>
&lt;p>通过PRI和NI可以调整进程的优先级，计算公式如下：&lt;/p>
&lt;p>&lt;code>PRI(new)=PRI(old)+nice&lt;/code> '&lt;/p>
&lt;p>这样，当nice值为负值的时候，那么该程序将会优先级值将变小，即其优先级会变高，则其越快被执行所以，调整进程优先级，在Linux下，就是调整进程nice值&lt;/p>
&lt;p>注意：nice 的范围在 【-20， 19】
PRI(old) 最小是80，如果原来的PRI &amp;lt; 80， 则会直接从80开始算：
因此：PRI 范围【60， 99】，但在计算新的PRI时，最小从80开始
举例：原来 ： PRI = 60 NI = 0;
更改：令PRI = 100
结果：PRI = 99 NI = 19&lt;/p>
&lt;p>那如何更改nice值呢？&lt;/p>
&lt;p>在Linux系统中，&lt;code>nice&lt;/code>命令用于启动一个新的进程，并设置其优先级。而&lt;code>renice&lt;/code>命令用于修改已经运行的进程的优先级。&lt;/p>
&lt;p>&lt;code>nice&lt;/code>命令的使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nice &lt;span class="o">[&lt;/span>OPTION&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>COMMAND &lt;span class="o">[&lt;/span>ARG&lt;span class="o">]&lt;/span>...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>nice&lt;/code>命令通过改变进程的优先级来影响其调度。数值越大，优先级越低。默认情况下，优先级是0。&lt;/p>
&lt;p>例如，运行一个命令并设置其优先级：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nice -n &amp;lt;优先级&amp;gt; &amp;lt;命令&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例如，将&lt;code>ls&lt;/code>命令的优先级降低为10：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nice -n &lt;span class="m">10&lt;/span> ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>renice&lt;/code>命令的使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">renice &lt;span class="o">[&lt;/span>优先级&lt;span class="o">]&lt;/span> -p &amp;lt;进程ID&amp;gt; &lt;span class="o">[&lt;/span>&amp;lt;进程ID&amp;gt;...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>renice&lt;/code>命令用于修改已经运行的进程的优先级。可以指定一个或多个进程ID来修改它们的优先级。&lt;/p>
&lt;p>例如，将进程ID为1234的进程的优先级设置为10：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">renice &lt;span class="m">10&lt;/span> -p &lt;span class="m">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="进程地址空间">进程地址空间
&lt;/h2>&lt;p>进程地址空间是操作系统为每个进程分配的&lt;strong>虚拟内存&lt;/strong>区域，它让每个进程有独立的地址范围，隔离了物理内存，提高了安全性和管理效率。&lt;/p>
&lt;h3 id="进程地址空间分布">进程地址空间分布
&lt;/h3>&lt;p>linux下进程地址空间如下：内核空间和用户空间按1 : 3&lt;/p>
&lt;blockquote>
&lt;p>Linux系统与Windows系统在进程地址空间设计上存在显著差异，而不同编程语言的进程地址空间本质上是统一的（受操作系统管理）&lt;/p>
&lt;p>&lt;strong>Windows&lt;/strong>：默认采用 &lt;strong>2:2模式&lt;/strong>（用户空间和内核空间各占2GB）但可通过设置 &lt;code>Large-Address-Aware&lt;/code> 标志调整为 &lt;strong>3:1模式&lt;/strong>&lt;/p>
&lt;p>但是它们的用户空间都包含&lt;strong>代码段、数据段、堆、栈&lt;/strong>等&lt;/p>&lt;/blockquote>
&lt;img src="image/ff03787b23fd4675af25b9cfd03ac888-1744267679242-12.png" alt="在这里插入图片描述" style="zoom:67%;" />
&lt;p>验证一下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s_A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_C&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;字符常量：a : %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;静态变量：s_A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s_A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;全局变量：未初始化g_A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;全局变量：已初始化g_B : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_B&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;栈区：A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;栈区：B : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">B&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;栈区：C : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">C&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;堆区：m_A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">m_A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;堆区：m_B : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">m_B&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;堆区：m_C : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">m_C&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ubuntu g++:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">字符常量：a : 0x5649d4534009
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">静态变量：s_A : 0x5649d4536014
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：未初始化g_A : 0x5649d4536154 未初始化地址 &amp;gt; 已初始化地址 符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：已初始化g_B : 0x5649d4536010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：A : 0x7ffc892fb3cc A到B栈区的地址是增长的, 不符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：B : 0x7ffc892fb3d0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：C : 0x7ffc892fb3d4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_A : 0x5649d5eadeb0 堆区的地址是增长的，符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_B : 0x5649d5eaded0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_C : 0x5649d5eadef0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里栈区的地址是增长的，不是应该是减少吗？我再测试一下windows下vs2019&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">windows vs2019
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">字符常量：a : 00639B30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">静态变量：s_A : 0063C004
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：未初始化g_A : 0063C3E0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：已初始化g_B : 0063C000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：A : 004FFBA8 A到B栈区的地址是下降的, 符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：B : 004FFB9C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：C : 004FFB90
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_A : 0069FD68 堆区的地址是增长的，符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_B : 0069FD98
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_C : 006A0118
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是什么情况？linux栈区是向高地址分配？windows的栈区是向低地址分配？这个问题我之前查阅的时候，得到答案是&lt;strong>局部变量按编译器自己方式进行分配&lt;/strong>。&lt;/p>
&lt;p>？？？&lt;/p>
&lt;p>我对此很懵逼，后来我才理解。这里需要引入一个概念：&lt;strong>函数栈帧&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>函数栈帧（stack frame）就是函数调用过程中在程序的调用栈（call stack）所开辟的空间，这些空间是用来存放：&lt;/p>
&lt;ul>
&lt;li>函数参数和函数返回值&lt;/li>
&lt;li>临时变量（包括函数的非静态的局部变量以及编译器自动生产的其他临时变量）&lt;/li>
&lt;li>保存上下文信息（包括在函数调用前后需要保持不变的寄存器）。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/image-20250410151621357.png"
width="629"
height="310"
srcset="https://sfw003.github.io/p/linux-process/image/image-20250410151621357_hu_e3f23c9aa3c8da97.png 480w, https://sfw003.github.io/p/linux-process/image/image-20250410151621357_hu_86eea16cdff95133.png 1024w"
loading="lazy"
alt="image-20250410151621357"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;h3 id="虚拟地址和页表">虚拟地址和页表
&lt;/h3>&lt;p>前面提到，进程地址空间是操作系统为每个进程分配的&lt;strong>虚拟内存&lt;/strong>区域，这么说，在进程中使用的地址都是虚拟地址，如何证明？来看下面一段代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;子进程：g_val = %d, &amp;amp;g_val = %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_val&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;父进程：g_val = %d, &amp;amp;g_val = %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_val&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">父进程：&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x55631bc26010&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">子进程：&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x55631bc26010&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>子进程更改数据后，会发生写时拷贝，因此子进程和父进程的g_val值不一样，符合预期，但是为什么发生了写时拷贝，父子进程的g_val地址还是相同？
&lt;strong>显然这里的地址一定不是真实的地址。&lt;/strong>&lt;/p>
&lt;p>那虚拟地址如何于物理地址联系呢？通过&lt;strong>页表&lt;/strong>与物理地址映射。
&lt;img src="https://sfw003.github.io/p/linux-process/image/eda7e0b75e26465fab9eff9a5dd59436.png"
width="2143"
height="853"
srcset="https://sfw003.github.io/p/linux-process/image/eda7e0b75e26465fab9eff9a5dd59436_hu_9e17fac47ca098f4.png 480w, https://sfw003.github.io/p/linux-process/image/eda7e0b75e26465fab9eff9a5dd59436_hu_90a3d99dc2c50dd5.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="602px"
>
回到fork里的问题：为什么父子进程不同的值有着相同的地址？因为这里的地址是虚拟地址。子进程只需更改子进程页表。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/555567ce5c0a4980a01cf811f77b86ef.png"
width="1109"
height="402"
srcset="https://sfw003.github.io/p/linux-process/image/555567ce5c0a4980a01cf811f77b86ef_hu_3e81e21566451f09.png 480w, https://sfw003.github.io/p/linux-process/image/555567ce5c0a4980a01cf811f77b86ef_hu_2b19323ebfafc9e8.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="275"
data-flex-basis="662px"
>&lt;/p>
&lt;h2 id="进程控制">进程控制
&lt;/h2>&lt;p>前文提到linux下进程有7种状态，如果从进程控制的角度，我们关心&lt;/p>
&lt;ol>
&lt;li>进程如何创建&lt;/li>
&lt;li>进程运行结束，结果是否正确？&lt;/li>
&lt;li>进程异常，如何终止？&lt;/li>
&lt;/ol>
&lt;h3 id="创建进程">创建进程
&lt;/h3>&lt;p>系统创建进程的流程如下：&lt;/p>
&lt;ol>
&lt;li>申请一个空白的PCB，初始化PCB；&lt;/li>
&lt;li>为进程分配运行时所必需的资源；&lt;/li>
&lt;li>将PCB 插入到就绪队列，等待进程调度；&lt;/li>
&lt;/ol>
&lt;p>用户如何创建进程？&lt;/p>
&lt;ul>
&lt;li>运行一个可执行程序&lt;/li>
&lt;li>fork创建子进程&lt;/li>
&lt;/ul>
&lt;h3 id="进程等待">进程等待
&lt;/h3>&lt;p>当一个进程（子进程）完成执行后，它的退出状态需要被父进程获取。如果父进程没有主动获取子进程的退出状态，那么子进程就会变成僵尸进程。&lt;strong>僵尸进程无法被信号 kill -9 杀死，如果放着不管，就会造成内存泄漏&lt;/strong>。
如何解决呢？此时需要父进程通过进程等待的方式，回收子进程资源，获取子进程退出信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;sys/types.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;sys/wait.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pid_t&lt;/span> &lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">返回值：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">成功返回被等待进程&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="err">，失败返回&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">输出型参数，获取子进程退出状态&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">不关心则可以设置成为&lt;/span>&lt;span class="nb">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pid_&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="n">waitpid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">返回值：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">当正常返回的时候&lt;/span>&lt;span class="n">waitpid返回收集到的子进程的进程ID&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">如果设置了选项&lt;/span>&lt;span class="n">WNOHANG&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">而调用中&lt;/span>&lt;span class="n">waitpid发现没有已退出的子进程可收集&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">则返回&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">如果调用中出错&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">则返回&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">这时&lt;/span>&lt;span class="n">errno会被设置成相应的值以指示错误所在&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid&lt;/span>&lt;span class="err">：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pid&lt;/span>&lt;span class="o">=-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">等待任一个子进程。与&lt;/span>&lt;span class="n">wait等效&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pid&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mf">0.&lt;/span>&lt;span class="err">等待其进程&lt;/span>&lt;span class="n">ID与pid相等的子进程&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">status&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WIFEXITED&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若为正常终止子进程返回的状态，则为真。（查看进程是否是正常退出）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WEXITSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若&lt;/span>&lt;span class="n">WIFEXITED非零&lt;/span>&lt;span class="err">，提取子进程退出码。（查看进程的退出码）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">WNOHANG&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">若&lt;/span>&lt;span class="n">pid指定的子进程没有结束&lt;/span>&lt;span class="err">，则&lt;/span>&lt;span class="n">waitpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">函数返回&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">，不予以等待。若正常结束，则返回该子进&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">程的&lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/wait.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;create a child process, pid = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">getpid&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//经过3秒后，wait子进程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;wait a process pid = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; status = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230665&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230667&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230668&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230669&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">512&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>while :; do ps ajx | head -1 &amp;amp;&amp;amp; ps ajx | grep t1; sleep 1; done&lt;/code>来监控
发现5个僵尸进程，被wait回收了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="n">ps&lt;/span> &lt;span class="n">ajx&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">head&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ps&lt;/span> &lt;span class="n">ajx&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">sleep&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230652&lt;/span> &lt;span class="mi">230651&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230651&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230657&lt;/span> &lt;span class="mi">230656&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230656&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230662&lt;/span> &lt;span class="mi">230661&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230661&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229863&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230673&lt;/span> &lt;span class="mi">230672&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230672&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229863&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230678&lt;/span> &lt;span class="mi">230677&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230677&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229863&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230683&lt;/span> &lt;span class="mi">230682&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230682&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230688&lt;/span> &lt;span class="mi">230687&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230687&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230693&lt;/span> &lt;span class="mi">230692&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230692&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="进程退出信息">进程退出信息
&lt;/h4>&lt;p>wait和waitpid，都有一个status参数，该参数是一个输出型参数，由操作系统填充。&lt;/p>
&lt;ul>
&lt;li>如果传递NULL，表示不关心子进程的退出状态信息。&lt;/li>
&lt;li>否则，操作系统会根据该参数，将子进程的退出信息反馈给父进程。&lt;/li>
&lt;/ul>
&lt;p>status不能简单的当作整形来看待，可以当作位图来看待，具体细节如下图（只研究status低16比特位）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/f7fdad997b8c4ea2b447c1da47509574.png"
width="572"
height="173"
srcset="https://sfw003.github.io/p/linux-process/image/f7fdad997b8c4ea2b447c1da47509574_hu_45e7345645b5e0bd.png 480w, https://sfw003.github.io/p/linux-process/image/f7fdad997b8c4ea2b447c1da47509574_hu_6409d2ee8488c9c6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="793px"
>&lt;/p>
&lt;p>正常退出看退出码，异常退出看信号。status作为子进程的退出信息，通过位图的方式将退出码和信号的信息存储在比特位中。&lt;/p>
&lt;p>你可以通过status的值来分析它的退出信息，如果你嫌麻烦，可以使用2个宏&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WIFEXITED&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若为正常终止子进程返回的状态，则为真。（查看进程是否是正常退出）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WEXITSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若&lt;/span>&lt;span class="n">WIFEXITED非零&lt;/span>&lt;span class="err">，提取子进程退出码。（查看进程的退出码）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="进程替换">进程替换
&lt;/h3>&lt;p>当进程调用一种exec函数时,该进程的用户空间代码和数据完全被新程序替换,从新程序的启动进程程开始执行。调用exec并不创建新进程,所以调用exec前后该进程的id并未改变。
&lt;img src="https://sfw003.github.io/p/linux-process/image/beceee3e513e439a92bbe947a21a4ef5.png"
width="1075"
height="414"
srcset="https://sfw003.github.io/p/linux-process/image/beceee3e513e439a92bbe947a21a4ef5_hu_30eae4c798b0a663.png 480w, https://sfw003.github.io/p/linux-process/image/beceee3e513e439a92bbe947a21a4ef5_hu_2d881f97b7ea6c06.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="623px"
>&lt;/p>
&lt;p>函数关系：
事实上,只有execve是真正的系统调用,其它五个函数最终都调用 execve,所以execve在man手册 第2节,其它函数在man手册第3节。这些函数之间的关系如下图所示
&lt;img src="https://sfw003.github.io/p/linux-process/image/43aaece3d5db4ea288b061cb78c2edad.png"
width="972"
height="468"
srcset="https://sfw003.github.io/p/linux-process/image/43aaece3d5db4ea288b061cb78c2edad_hu_25bfe1cf88231b84.png 480w, https://sfw003.github.io/p/linux-process/image/43aaece3d5db4ea288b061cb78c2edad_hu_1b06b07f30c2b3b1.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p></description></item><item><title>Linux 进程间通信</title><link>https://sfw003.github.io/p/linux-process-communication/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-process-communication/</guid><description>&lt;p>绘图文件，在&lt;a class="link" href="https://sfw003.github.io/p/linux-series/#linux进程管理" >linux系列文章:进程管理&lt;/a>&lt;/p>
&lt;h2 id="进程间通信">进程间通信
&lt;/h2>&lt;blockquote>
&lt;p>进程间通信（Inter-Process Communication，IPC）是指在操作系统中，不同的进程之间进行数据交换、信息传递和同步操作的机制。在多任务操作系统中，不同的进程可能同时运行，它们之间可能需要进行数据共享、协作完成某项任务等操作，这就需要进程间通信。
进程间通信目的：&lt;/p>
&lt;ol>
&lt;li>数据传输：一个进程需要将它的数据发送给另一个进程&lt;/li>
&lt;li>资源共享：多个进程之间共享同样的资源。&lt;/li>
&lt;li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。&lt;/li>
&lt;li>进程控制：有些进程希望完全控制另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>如何理解进程间通信：&lt;strong>本质是让不同的进程看到同一份资源&lt;/strong>。&lt;/p>
&lt;ol>
&lt;li>那如何让不同进程看到同一份资源呢？&lt;/li>
&lt;li>资源又是什么呢？&lt;/li>
&lt;/ol>
&lt;p>怀着这2个问题，我们来看看进程通信模块：
一般操作系统会有一个独立的通信模块，隶属于文件系统, 即IPC通信模块。
在linux内核刚被设计时，不支持通信，后来发现通信很重要，于是很多开发人员开始设计通信模块。当时的设计一个通信模块并不难，很多人提出了不同设计思路，谁也不服谁，为了统一，制定了标准。
最后落地了2套标准：system V &amp;amp;&amp;amp; posix&lt;/p>
&lt;p>进程间通信的分类：&lt;/p>
&lt;blockquote>
&lt;p>管道&lt;/p>
&lt;ol>
&lt;li>匿名管道pipe&lt;/li>
&lt;li>命名管道&lt;/li>
&lt;/ol>
&lt;p>System V IPC&lt;/p>
&lt;ol>
&lt;li>System V 消息队列&lt;/li>
&lt;li>System V 共享内存&lt;/li>
&lt;li>3 .System V 信号量&lt;/li>
&lt;/ol>
&lt;p>POSIX IPC&lt;/p>
&lt;ol>
&lt;li>消息队列&lt;/li>
&lt;li>共享内存&lt;/li>
&lt;li>信号量&lt;/li>
&lt;li>互斥量&lt;/li>
&lt;li>条件变量&lt;/li>
&lt;li>读写锁&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h2 id="管道">管道
&lt;/h2>&lt;p>在使用linux命令时，常常需要使用管道&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ps aux &lt;span class="p">|&lt;/span> grep name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的&lt;code>丨&lt;/code>竖线就是一个管道，它的功能是将前一个命令的输出，作为后一个命令的输入，采用FIFO（先进先出）的传输方式。&lt;/p>
&lt;p>这种管道没有名字，称为&lt;strong>匿名管道&lt;/strong>&lt;/p>
&lt;p>有了匿名管道，那肯定还有&lt;strong>命名管道&lt;/strong>。命名管道通过&lt;code>mkfifo&lt;/code>来创建&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mkfifo name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="匿名管道">匿名管道
&lt;/h3>&lt;p>匿名管道是如何创建的呢？这涉及到一个系统调用：pipe&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="err">功能&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">创建管道&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">原型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pipefd&lt;/span>&lt;span class="err">：文件描述符数组&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">输出型参数，其中&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">存放读端的文件描述符&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">存放读端的文件描述符&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">返回值&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">成功返回&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">，失败返回错误代码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>管道通常是&lt;strong>单向通信&lt;/strong>，主要是为了简化设计。如果要进行双向通信，那就创造两个管道。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91.png"
width="531"
height="638"
srcset="https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91_hu_966c08cf36ab7829.png 480w, https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91_hu_84a82c9a7f6451b2.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="199px"
>&lt;/p>
&lt;p>案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cassert&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建管道，让父进程写，子进程读
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//子进程 -- 读取管道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="c1">//关闭写端,留下读端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//……子进程接受数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//父进程 -- 写入管道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="c1">//关闭读端，留下写端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//……父进程写入数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="命名管道">命名管道
&lt;/h3>&lt;h3 id="理解管道">理解管道
&lt;/h3>&lt;p>linux下一切皆文件，管道能读能写，肯定是一种文件。一般情况下，进程管理文件如下图。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723.png"
width="719"
height="256"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723_hu_6ecd350cf21aef45.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723_hu_5bc3a31a3e4d0dfc.png 1024w"
loading="lazy"
alt="image-20250410161331723"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="674px"
>&lt;/p>
&lt;blockquote>
&lt;p>这里内核缓存区到外存，要通过页表，到物理内存，在通过DMA写入外存。&lt;/p>&lt;/blockquote>
&lt;p>管道不同于上面的形式，&lt;strong>它是一种内存级别的文件，本质就是内核里面的一串缓存&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338.png"
width="676"
height="481"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338_hu_f3a6e333b57a7ac2.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338_hu_3ae4f80a2b888aab.png 1024w"
loading="lazy"
alt="image-20250410161310338"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;h2 id="共享内存">共享内存
&lt;/h2>&lt;p>听名字就懂了，具体原理：拿出一块虚拟地址空间来，映射到相同的物理内存中。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482.png"
width="551"
height="551"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482_hu_4ab6cbca5c590b6c.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482_hu_1186a27661ddb0d5.png 1024w"
loading="lazy"
alt="image-20250410163312482"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h2 id="套接字socket">套接字（socket）
&lt;/h2></description></item><item><title>Linux 网络命令</title><link>https://sfw003.github.io/p/linux-network-command/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-network-command/</guid><description>&lt;p>相关文章链接&lt;/p>
&lt;p>&lt;a class="link" href="https://sfw003.github.io/p/linux-file-command/" >Linux 文件操作命令&lt;/a>
Linux 网络命令 &amp;lt;== 本文&lt;/p>
&lt;p>网络操作命令：ifconfig、ip、ping、netstat、telnet、ftp、route、rlogin、rcp、finger、mail、 nslookup；&lt;/p>
&lt;h2 id="ifconfig">ifconfig
&lt;/h2>&lt;p>ifconfig用于查看和更改网络接口的地址和参数，包括IP地址、网络掩码、广播地址，使用权限是超级用户。&lt;/p>
&lt;p>命令参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ifconfig -interface [options] address
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">主要参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-interface：指定的网络接口名，如eth0和eth1。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">up：激活指定的网络接口卡。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">down：关闭指定的网络接口。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">broadcast address：设置接口的广播地址。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pointopoint：启用点对点方式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">address：设置指定接口设备的IP地址。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">netmask address：设置接口的子网掩码。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ifconfig是用来设置和配置网卡的命令行工具。&lt;/p>
&lt;p>为了手工配置网络，这是一个必须掌握的命令。&lt;/p>
&lt;p>使用该命令的好处是无须重新启动机器。&lt;/p>
&lt;p>要赋给eth0接口IP地址207.164.186.2，并且马上激活它，使用下面命令：
&lt;code>#fconfig eth0 210.34.6.89 netmask 255.255.255.128 broadcast 210.34.6.127&lt;/code>&lt;/p>
&lt;p>该命令的作用是设置网卡eth0的IP地址、网络掩码和网络的本地广播地址。&lt;/p>
&lt;p>若运行不带任何参数的ifconfig命令，这个命令将显示机器所有激活接口的信息。&lt;/p>
&lt;p>带有“-a”参数的命令则显示所有接口的信息，包括没有激活的接口。&lt;/p>
&lt;p>注意，用ifconfig命令配置的网络设备参数，机器重新启动以后将会丢失。&lt;/p>
&lt;p>如果要暂停某个网络接口的工作，可以使用down参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># ifconfig eth0 down
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ip">ip
&lt;/h2>&lt;p>ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具，例如ifconfig、route等，使用权限为超级用户。&lt;/p>
&lt;p>几乎所有的Linux发行版本都支持该命令。&lt;/p>
&lt;p>ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]]
主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">OPTIONS是修改ip行为或改变其输出的选项。所有的选项都是以-字符开头，分为长、短两种形式。目前，ip支持如表1所示选项。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OBJECT是要管理者获取信息的对象。目前ip认识的对象见表2所示。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">表1 ip支持的选项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-V,-Version 打印ip的版本并退出。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s,-stats,-statistics 输出更为详尽的信息。如果这个选项出现两次或多次，则输出的信息将更为详尽。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f,-family 这个选项后面接协议种类，包括inet、inet6或link，强调使用的协议种类。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">如果没有足够的信息告诉ip使用的协议种类，ip就会使用默认值inet或any。link比较特殊，它表示不涉及任何网络协议。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-4是-family inet的简写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-6 是-family inet6的简写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-0 是-family link的简写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-o,-oneline 对每行记录都使用单行输出，回行用字符代替。如果需要使用wc、grep等工具处理ip的输出，则会用到这个选项。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r,-resolve 查询域名解析系统，用获得的主机名代替主机IP地址
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应用实例&lt;/p>
&lt;p>添加IP地址192.168.2.2/24到eth0网卡上：
&lt;code>#ip addr add 192.168.1.1/24 dev eth0&lt;/code>
丢弃源地址属于192.168.2.0/24网络的所有数据报：
&lt;code>#ip rule add from 192.168.2.0/24 prio 32777 reject&lt;/code>&lt;/p>
&lt;h2 id="ping">ping
&lt;/h2>&lt;p>ping检测主机网络接口状态，使用权限是所有用户。&lt;/p>
&lt;p>主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ping [选项] 目标IP/域名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-d：使用Socket的SO_DEBUG功能。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c：设置完成要求回应的次数。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f：极限检测。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i：指定收发信息的间隔秒数。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-I：网络界面使用指定的网络界面送出数据包。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l：前置载入，设置在送出要求信息之前，先行发出的数据包。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n：只输出数值。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p：设置填满数据包的范本样式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-q：不显示指令执行过程，开头和结尾的相关信息除外。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r：忽略普通的Routing Table，直接将数据包送到远端主机上。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R：记录路由过程。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s：设置数据包的大小。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t：设置存活数值TTL的大小。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v：详细显示指令的执行过程。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ping命令是使用最多的网络指令，通常我们使用它检测网络是否连通，它使用ICMP协议。&lt;/p>
&lt;p>但是有时会有这样的情况，我们可以浏览器查看一个网页，但是却无法ping通，这是因为一些网站处于安全考虑安装了防火墙。&lt;/p>
&lt;p>另外，也可以在自己计算机上试一试，通过下面的方法使系统对ping没有反应：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># echo 1 &amp;gt; /proc/sys/net/ipv4/icmp_echo_ignore_all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="netstat">netstat
&lt;/h2>&lt;p>检查整个Linux网络状态。&lt;/p>
&lt;p>命令参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-a--all：显示所有连线中的Socket。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-A：列出该网络类型连线中的IP相关地址和网络类型。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c--continuous：持续列出网络状态。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-C--cache：显示路由器配置的快取信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-e--extend：显示网络其它相关信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-F--fib：显示FIB。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g--groups：显示多重广播功能群组组员名单。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-h--help：在线帮助。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i--interfaces：显示网络界面信息表单。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l--listening：显示监控中的服务器的Socket。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-M--masquerade：显示伪装的网络连线。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n--numeric：直接使用IP地址，而不通过域名服务器。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-N--netlink--symbolic：显示网络硬件外围设备的符号连接名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-o--timers：显示计时器。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p--programs：显示正在使用Socket的程序识别码和程序名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--route：显示Routing Table。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s--statistice：显示网络工作信息统计表。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t--tcp：显示TCP传输协议的连线状况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u--udp：显示UDP传输协议的连线状况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v--verbose：显示指令执行过程。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-V--version：显示版本信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-w--raw：显示RAW传输协议的连线状况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x--unix：和指定“-A unix”参数相同。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--ip--inet：和指定“-A inet”参数相同。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应用实例&lt;/p>
&lt;p>netstat
主要用于Linux察看自身的网络状况，如开启的端口、在为哪些用户服务，以及服务的状态等。此外，它还显示系统路由表、网络接口状态等。&lt;/p>
&lt;p>可以说，它是一个综合性的网络状态的察看工具。&lt;/p>
&lt;p>在默认情况下，netstat只显示已建立连接的端口。&lt;/p>
&lt;p>如果要显示处于监听状态的所有端口，使用-a参数即可：
#netstat -a
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address Foreign Address State
tcp 0 0 *:32768 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:32769 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:nfs &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:32770 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:868 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:617 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:mysql &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:netbios-ssn &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:sunrpc &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:10000 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:http &lt;em>:&lt;/em> LISTEN
&amp;hellip;&amp;hellip;
上面显示出，这台主机同时提供HTTP、FTP、NFS、MySQL等服务。&lt;/p>
&lt;h2 id="telnet">telnet
&lt;/h2>&lt;p>telnet表示开启终端机阶段作业，并登入远端主机。telnet是一个Linux命令，同时也是一个协议（远程登陆协议）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">telnet [option] [主机名称IP地址]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-8：允许使用8位字符资料，包括输入与输出。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a：尝试自动登入远端系统。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-b：使用别名指定远端主机名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c：不读取用户专属目录里的.telnetrc文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-d：启动排错模式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-e：设置脱离字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-E：滤除脱离字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f：此参数的效果和指定“-F”参数相同。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-K：不自动登入远端主机。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l：指定要登入远端主机的用户名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-L：允许输出8位字符资料。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n：指定文件记录相关信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r：使用类似rlogin指令的用户界面。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-S：服务类型，设置telnet连线所需的IP TOS信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x：假设主机有支持数据加密的功能，就使用它。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-X：关闭指定的认证形态。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用户使用telnet命令可以进行远程登录，并在远程计算机之间进行通信。&lt;/p>
&lt;p>用户通过网络在远程计算机上登录，就像登录到本地机上执行命令一样。&lt;/p>
&lt;p>为了通过telnet登录到远程计算机上，必须知道远程机上的合法用户名和口令。&lt;/p>
&lt;p>虽然有些系统确实为远程用户提供登录功能，但出于对安全的考虑，要限制来宾的操作权限，因此，这种情况下能使用的功能是很少的。&lt;/p>
&lt;p>telnet只为普通终端提供终端仿真，而不支持X-Window等图形环境。&lt;/p>
&lt;p>当允许远程用户登录时，系统通常把这些用户放在一个受限制的Shell中，以防系统被怀有恶意的或不小心的用户破坏。&lt;/p>
&lt;p>用户还可以使用telnet从远程站点登录到自己的计算机上，检查电子邮件、编辑文件和运行程序，就像在本地登录一样。&lt;/p>
&lt;h2 id="ftp">ftp
&lt;/h2>&lt;p>ftp命令进行远程文件传输。FTP是ARPANet的标准文件传输协议，该网络就是现今Internet的前身，所以ftp既是协议又是一个命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ftp [-dignv] [主机名称IP地址]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-d：详细显示指令执行过程，便于排错分析程序执行的情形。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i：关闭互动模式，不询问任何问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g：关闭本地主机文件名称支持特殊字符的扩充特性。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n：不使用自动登陆。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v：显示指令执行过程。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="应用说明">应用说明
&lt;/h3>&lt;p>ftp命令是标准的文件传输协议的用户接口，是在TCP/IP网络计算机之间传输文件简单有效的方法，它允许用户传输ASCⅡ文件和二进制文件。&lt;/p>
&lt;p>为了使用ftp来传输文件，用户必须知道远程计算机上的合法用户名和口令。&lt;/p>
&lt;p>这个用户名/口令的组合用来确认ftp会话，并用来确定用户对要传输的文件进行什么样的访问。
另外，用户需要知道对其进行ftp会话的计算机名字的IP地址。
用户可以通过使用ftp客户程序，连接到另一台计算机上；&lt;/p>
&lt;p>可以在目录中上下移动、列出目录内容；&lt;/p>
&lt;p>可以把文件从远程计算机机拷贝到本地机上；&lt;/p>
&lt;p>还可以把文件从本地机传输到远程系统中。&lt;/p>
&lt;p>ftp内部命令有72个，下面列出主要几个内部命令：&lt;/p>
&lt;p>ls：列出远程机的当前目录。
cd：在远程机上改变工作目录。
lcd：在本地机上改变工作目录。
close：终止当前的ftp会话。
hash：每次传输完数据缓冲区中的数据后就显示一个#号。
get（mget）：从远程机传送指定文件到本地机。
put（mput）：从本地机传送指定文件到远程机。
quit：断开与远程机的连接，并退出ftp。&lt;/p>
&lt;p>##route&lt;/p>
&lt;h3 id="作用">作用
&lt;/h3>&lt;p>route表示手工产生、修改和查看路由表。&lt;/p>
&lt;h3 id="格式">格式
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#route [-add][-net|-host] targetaddress [-netmask Nm][dev]If]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#route [－delete][-net|-host] targetaddress [gw Gw][-netmask Nm] [dev]If]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要参数
-add：增加路由。
-delete：删除路由。
-net：路由到达的是一个网络，而不是一台主机。
-host：路由到达的是一台主机。
-netmask Nm：指定路由的子网掩码。
gw：指定路由的网关。
[dev]If：强迫路由链指定接口。&lt;/p>
&lt;h3 id="应用实例">应用实例
&lt;/h3>&lt;p>route命令是用来查看和设置Linux系统的路由信息，以实现与其它网络的通信。&lt;/p>
&lt;p>要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。
在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。&lt;/p>
&lt;p>使用下面命令可以增加一个默认路由：
route add 0.0.0.0 192.168.1.1&lt;/p>
&lt;h2 id="rlogin">rlogin
&lt;/h2>&lt;h3 id="作用-1">作用
&lt;/h3>&lt;p>rlogin用来进行远程注册。&lt;/p>
&lt;h3 id="格式-1">格式
&lt;/h3>&lt;p>rlogin [ -8EKLdx ] [ -e char ] [-k realm ] [ - l username ] host
主要参数
-8：此选项始终允许8位输入数据通道。该选项允许发送格式化的ANSI字符和其它的特殊代码。如果不用这个选项，除非远端的不是终止和启动字符，否则就去掉奇偶校验位。
-E：停止把任何字符当作转义字符。当和-8选项一起使用时，它提供一个完全的透明连接。
-K：关闭所有的Kerberos确认。只有与使用Kerberos确认协议的主机连接时才使用这个选项。
-L：允许rlogin会话在litout模式中运行。要了解更多信息，请查阅tty联机帮助。
-d：打开与远程主机进行通信的TCP sockets的socket调试。要了解更多信息，请查阅setsockopt的联机帮助。
-e：为rlogin会话设置转义字符，默认的转义字符是“～”。
-k：请求rlogin获得在指定区域内远程主机的Kerberos许可，而不是获得由krb_realmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。
-x：为所有通过rlogin会话传送的数据打开DES加密。这会影响响应时间和CPU利用率，但是可以提高安全性。&lt;/p>
&lt;h3 id="使用说明">使用说明
&lt;/h3>&lt;p>如果在网络中的不同系统上都有账号，或者可以访问别人在另一个系统上的账号，那么要访问别的系统中的账号，首先就要注册到系统中，接着通过网络远程注册到账号所在的系统中。&lt;/p>
&lt;p>rlogin可以远程注册到别的系统中，它的参数应是一个系统名。&lt;/p>
&lt;h2 id="rcp">rcp
&lt;/h2>&lt;h3 id="作用-2">作用
&lt;/h3>&lt;p>rcp代表远程文件拷贝，用于计算机之间文件拷贝，使用权限是所有用户。&lt;/p>
&lt;h3 id="格式-2">格式
&lt;/h3>&lt;p>rcp [-px] [-k realm] file1 file2 rcp [-px] [-r] [-k realm] file
主要参数
-r：递归地把源目录中的所有内容拷贝到目的目录中。要使用这个选项，目的必须是一个目录。
-p：试图保留源文件的修改时间和模式，忽略umask。
-k：请求rcp获得在指定区域内的远程主机的Kerberos许可，而不是获得由krb_relmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。
-x：为传送的所有数据打开DES加密。&lt;/p>
&lt;h2 id="finger">finger
&lt;/h2>&lt;h3 id="作用-3">作用
&lt;/h3>&lt;p>finger用来查询一台主机上的登录账号的信息，通常会显示用户名、主目录、停滞时间、登录时间、登录Shell等信息，使用权限为所有用户。&lt;/p>
&lt;h3 id="格式-3">格式
&lt;/h3>&lt;p>finger [选项] [使用者] [用户@主机]
主要参数
-s：显示用户注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息。
-l：除了用-s选项显示的信息外，还显示用户主目录、登录Shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。
-p：除了不显示.plan文件和.project文件以外，与-l选项相同。&lt;/p>
&lt;h3 id="应用实例-1">应用实例
&lt;/h3>&lt;p>在计算机上使用finger：
[root@localhost root]# Finger
Login Name Tty Idle Login Time Office Office Phone
root root tty1 2 Dec 15 11
root root pts/0 1 Dec 15 11&lt;/p>
&lt;p>root root *pts/1 Dec 15 11&lt;/p>
&lt;h3 id="应用说明-1">应用说明
&lt;/h3>&lt;p>如果要查询远程机上的用户信息，需要在用户名后面接“@主机名”，采用[用户名@主机名]的格式，不过要查询的网络主机需要运行finger守护进程的支持。&lt;/p>
&lt;h2 id="mail">mail
&lt;/h2>&lt;h3 id="作用-4">作用
&lt;/h3>&lt;p>mail作用是发送电子邮件，使用权限是所有用户。此外，mail还是一个电子邮件程序。&lt;/p>
&lt;h3 id="格式-4">格式
&lt;/h3>&lt;p>mail [-s subject] [-c address] [-b address]
mail -f [mailbox]mail [-u user]
主要参数
-b address：表示输出信息的匿名收信人地址清单。
-c address：表示输出信息的抄送（）收信人地址清单。
-f [mailbox]：从收件箱者指定邮箱读取邮件。
-s subject：指定输出信息的主体行。
[-u user]：端口指定优化的收件箱读取邮件。&lt;/p>
&lt;h2 id="nslookup">nslookup
&lt;/h2>&lt;h3 id="作用-5">作用
&lt;/h3>&lt;p>nslookup命令的功能是查询一台机器的IP地址和其对应的域名。使用权限所有用户。&lt;/p>
&lt;p>它通常需要一台域名服务器来提供域名服务。如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的IP地址对应的域名。&lt;/p>
&lt;h3 id="格式-5">格式
&lt;/h3>&lt;p>nslookup［IP地址/域名］&lt;/p>
&lt;h3 id="应用实例-2">应用实例
&lt;/h3>&lt;p>（1）在本地计算机上使用nslookup命令
$ nslookup
Default Server: &lt;a class="link" href="http://name.cao.com.cn/" target="_blank" rel="noopener"
>name.cao.com.cn&lt;/a>
Address: 192.168.1.9&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;p>在符号“&amp;gt;”后面输入要查询的IP地址域名，并回车即可。如果要退出该命令，输入“exit”，并回车即可。
（2）使用nslookup命令测试named
输入下面命令：
nslookup
然后就进入交换式nslookup环境。&lt;/p>
&lt;p>如果named正常启动，则nslookup会显示当前DNS服务器的地址和域名，否则表示named没能正常启动。
下面简单介绍一些基本的DNS诊断。
◆检查正向DNS解析，在nslookup提示符下输入带域名的主机名，&lt;a class="link" href="http://xn--hp712-gv5i.my.com/" target="_blank" rel="noopener"
>如hp712.my.com&lt;/a>，nslookup应能显示该主机名对应的IP地址。&lt;/p>
&lt;p>如果只输入hp712，nslookup会根据/etc/resolv.conf的定义，自动添加my.com域名，并回答对应的IP地址。&lt;/p>
&lt;p>◆检查反向DNS解析，在nslookup提示符下输入某个IP地址，如192.22.33.20，nslookup应能回答该IP地址所对应的主机名。&lt;/p>
&lt;p>◆检查MX邮件地址记录在nslookup提示符下输入：
set q=mx
然后输入某个域名，&lt;a class="link" href="http://xn--my-cz4c617u.xn--commail-bs4l.my.com/" target="_blank" rel="noopener"
>输入my.com和mail.my.com&lt;/a>，nslookup应能够回答对应的邮件服务器地址，&lt;a class="link" href="http://xn--support-zx2l.my.xn--comsupport2-904s.my.com/" target="_blank" rel="noopener"
>即support.my.com和support2.my.com&lt;/a>。&lt;/p></description></item><item><title>Linux 文件操作命令</title><link>https://sfw003.github.io/p/linux-file-command/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-file-command/</guid><description>&lt;p>相关文章链接&lt;/p>
&lt;p>Linux 文件操作命令&amp;lt;== 本文
&lt;a class="link" href="https://sfw003.github.io/p/linux-network-command/" >Linux 网络命令&lt;/a>&lt;/p>
&lt;h2 id="more">more
&lt;/h2>&lt;p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+n 从笫 n 行开始显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n 定义屏幕大小为n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c 从顶部清屏，然后显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 忽略Ctrl+l（换页）字符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 把连续的多个空行显示为一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 把文件内容中的下画线去掉
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>操作命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Enter 向下 n 行，需要定义。默认为 1 行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ctrl+F 向下滚动一屏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">空格键 向下滚动一屏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ctrl+B 返回上一屏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">= 输出当前行的行号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:f 输出文件名和当前行的行号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">V 调用vi编辑器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!命令 调用Shell，并执行命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">q 退出more
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示文件中从第3行起的内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">more +3 text.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ls -l | more -5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>按空格显示下 5 行。&lt;/p>
&lt;h2 id="less">less
&lt;/h2>&lt;p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-i 忽略搜索时的大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-N 显示每行的行号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-o &amp;lt;文件名&amp;gt; 将less 输出的内容在指定文件中保存起来
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 显示连续空行为一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/字符串：向下搜索“字符串”的功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">?字符串：向上搜索“字符串”的功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n：重复前一个搜索（与 / 或 ? 有关）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">N：反向重复前一个搜索（与 / 或 ? 有关）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x &amp;lt;数字&amp;gt; 将“tab”键显示为规定的数字空格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">b 向后翻一页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">d 向后翻半页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">h 显示帮助界面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Q 退出less 命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">u 向前滚动半页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">y 向前滚动一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">空格键 滚动一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">回车键 滚动一页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[pagedown]： 向下翻动一页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[pageup]： 向上翻动一页
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）ps 查看进程信息并通过 less 分页显示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -aux | less -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查看多个文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">less 1.log 2.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以使用 n 查看下一个，使用 p 查看前一个。&lt;/p>
&lt;h2 id="head-命令">head 命令
&lt;/h2>&lt;p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-n&amp;lt;行数&amp;gt; 显示的行数（行数为复数表示从最后向前数）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示 1.log 文件中前 20 行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">head 1.log -n 20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）显示 1.log 文件前 20 字节&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">head -c 20 log2014.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）显示 t.log最后 10 行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">head -n -10 t.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="tail-命令">tail 命令
&lt;/h2>&lt;p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-f 循环读取（常用于查看递增的日志文件）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n&amp;lt;行数&amp;gt; 显示行数（从后向前）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（1）循环读取逐渐增加的文件内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ping 127.0.0.1 &amp;gt; ping.log &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tail -f ping.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（查看日志）&lt;/p>
&lt;h2 id="which-命令">which 命令
&lt;/h2>&lt;p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which 查看可执行文件的位置。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">whereis 查看文件的位置。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locate 配合数据库查看文件位置。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">find 实际搜寻硬盘查询文件名称。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查看 ls 命令是否存在，执行哪个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查看 which&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which which
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查看 cd&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看当前 PATH 配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">echo $PATH
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或使用 env 查看所有环境变量及对应值&lt;/p>
&lt;h2 id="whereis-命令">whereis 命令
&lt;/h2>&lt;p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-b 定位可执行文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 定位帮助文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 定位源代码文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找 locate 程序相关文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">whereis locate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查找 locate 的源码文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">whereis -s locate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查找 lcoate 的帮助文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">whereis -m locate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="locate-命令">locate 命令
&lt;/h2>&lt;p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。&lt;/p>
&lt;p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-l num（要显示的行数）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f 将特定的档案系统排除在外，如将proc排除在外
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r 使用正则运算式做为寻找条件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">locate pwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）搜索 etc 目录下所有以 sh 开头的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">locate /etc/sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查找 /var 目录下，以 reason 结尾的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">locate&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="s1">&amp;#39;^/var.*reason$&amp;#39;&lt;/span>&lt;span class="err">（其中&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="err">表示一个字符，&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="err">表示任务多个；&lt;/span>&lt;span class="o">.*&lt;/span>&lt;span class="err">表示任意多个字符）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="chmod-命令">chmod 命令
&lt;/h2>&lt;p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。&lt;/p>
&lt;p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。&lt;/p>
&lt;p>以文件 log2012.log 为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。&lt;/p>
&lt;p>常用参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 当发生改变时，报告处理信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R 处理指定目录以及其子目录下所有文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>权限范围：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">u ：目录或者文件的当前的用户
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">g ：目录或者文件的当前的群组
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">o ：除了目录或者文件的当前用户或群组之外的用户或者群组
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a ：所有的用户及群组
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>权限代号：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">r ：读权限，用数字4表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">w ：写权限，用数字2表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x ：执行权限，用数字1表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- ：删除权限，用数字0表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s ：特殊权限
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实例：&lt;/p>
&lt;p>（1）增加文件 t.log 所有用户可执行权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod a+x t.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod u=r t.log -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）将 test 目录及其子目录所有文件添加可读权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod u+r,g+r,o+r -R text/ -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>19、tar 命令&lt;/p>
&lt;p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。&lt;/p>
&lt;p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 建立新的压缩文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f 指定压缩文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r 添加文件到已经压缩文件包中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 添加改了和现有的文件到压缩包中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x 从压缩包中抽取文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t 显示压缩文件中的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-z 支持gzip压缩
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-j 支持bzip2压缩
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-Z 支持compress解压文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v 显示操作过程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有关 gzip 及 bzip2 压缩:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gzip 实例：压缩 gzip fileName .tar.gz 和.tgz 解压：gunzip filename.gz 或 gzip -d filename.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 对应：tar zcvf filename.tar.gz tar zxvf filename.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 对应：tar jcvf filename.tar.gz 解压：tar jxvf filename.tar.bz2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）将文件全部打包成 tar 包&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar -cvf log.tar 1.log,2.log 或tar -cvf log.*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar -zcvf /tmp/etc.tar.gz /etc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar -ztvf /tmp/etc.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="chown-命令">chown 命令
&lt;/h2>&lt;p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 显示更改的部分的信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R 处理指定目录及子目录
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）改变拥有者和群组 并显示改变信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chown -c mail:mail log2012.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）改变文件群组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chown -c :mail t.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）改变文件夹及子文件目录属主及属组为 mail&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chown -cR mail: test/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="df-命令">df 命令
&lt;/h2>&lt;p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-a 全部文件系统列表
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-h 以方便阅读的方式显示信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i 显示inode信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k 区块为1024字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 只显示本地磁盘
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-T 列出文件系统类型
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示磁盘使用情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">df -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）以易读方式列出所有文件系统及其类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">df -haT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="du-命令">du 命令
&lt;/h2>&lt;p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du [选项] [文件]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-a 显示目录中所有文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k 以KB为单位显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 以MB为单位显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g 以GB为单位显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-h 以易读方式显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 仅显示总计
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）以易读方式显示文件夹内及子文件夹大小&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -h scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）以易读方式显示文件夹内所有文件大小&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -ah scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -hc test/ scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）输出当前目录下各个子目录所使用的空间&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -hc --max-depth=1 scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="24date-命令">24、date 命令
&lt;/h3>&lt;p>显示或设定系统的日期与时间。&lt;/p>
&lt;p>命令参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-d&amp;lt;字符串&amp;gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s&amp;lt;字符串&amp;gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 　显示GMT。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%H 小时(00-23)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%I 小时(00-12)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%M 分钟(以00-59来表示)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%S 秒(以本地的惯用法来表示)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%a 星期的缩写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%A 星期的完整名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%d 日期(以01-31来表示)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%D 日期(含年月日)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%m 月份(以01-12来表示)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%y 年份(以00-99来表示)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%Y 年份(以四位数来表示)。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示下一天&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">date +%Y%m%d --date=&amp;#34;+1 day&amp;#34; //显示下一天的日期
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）-d参数使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">date -d &amp;#34;nov 22&amp;#34; 今年的 11 月 22 日是星期三
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d &amp;#39;2 weeks&amp;#39; 2周后的日期
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d &amp;#39;next monday&amp;#39; (下周一的日期)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d last-month +%Y%m(上个月是几月)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d next-month +%Y%m(下个月是几月)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="25cal-命令">25、cal 命令
&lt;/h3>&lt;p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：&lt;/p>
&lt;p>常用参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-3 显示前一月，当前月，后一月三个月的日历
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 显示星期一为第一列
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-j 显示在当前年第几天
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-y [year]显示当前年[year]份的日历
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示指定年月日期&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cal 9 2012
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）显示2013年每个月日历&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cal -y 2013
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）将星期一做为第一列,显示前中后三月&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cal -3m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="grep-命令">grep 命令
&lt;/h2>&lt;p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。&lt;/p>
&lt;p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep [option] pattern file|dir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>常用参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-A n --after-context显示匹配字符后n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-B n --before-context显示匹配字符前n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-C n --context 显示匹配字符前后n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c --count 计算符合样式的列数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i 忽略大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 只列出文件内容符合指定的样式的文件名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f 从文件中读取关键词
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n 显示匹配内容的所在文件中行数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R 递归查找文件夹
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>grep 的规则表达式:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">^ #锚定行的开始 如：&amp;#39;^grep&amp;#39;匹配所有以grep开头的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ #锚定行的结束 如：&amp;#39;grep$&amp;#39;匹配所有以grep结尾的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">. #匹配一个非换行符的字符 如：&amp;#39;gr.p&amp;#39;匹配gr后接一个任意字符，然后是p。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* #匹配零个或多个先前字符 如：&amp;#39;*grep&amp;#39;匹配所有一个或多个空格后紧跟grep的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.* #一起用代表任意字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[] #匹配一个指定范围内的字符，如&amp;#39;[Gg]rep&amp;#39;匹配Grep和grep。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[^] #匹配一个不在指定范围内的字符，如：&amp;#39;[^A-FH-Z]rep&amp;#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\(..\) #标记匹配字符，如&amp;#39;\(love\)&amp;#39;，love被标记为1。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\&amp;lt; #锚定单词的开始，如:&amp;#39;\&amp;lt;grep&amp;#39;匹配包含以grep开头的单词的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\&amp;gt; #锚定单词的结束，如&amp;#39;grep\&amp;gt;&amp;#39;匹配包含以grep结尾的单词的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x\{m\} #重复字符x，m次，如：&amp;#39;0\{5\}&amp;#39;匹配包含5个o的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x\{m,\} #重复字符x,至少m次，如：&amp;#39;o\{5,\}&amp;#39;匹配至少有5个o的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x\{m,n\} #重复字符x，至少m次，不多于n次，如：&amp;#39;o\{5,10\}&amp;#39;匹配5--10个o的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\w #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&amp;#39;G\w*p&amp;#39;匹配以G后跟零个或多个文字或数字字符，然后是p。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\W #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\b #单词锁定符，如: &amp;#39;\bgrep\b&amp;#39;只匹配grep。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找指定进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -ef | grep svn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查找指定进程个数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -ef | grep svn -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）从文件中读取关键词&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cat test1.txt | grep -f key.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）从文件夹中递归查找以grep开头的行，并只列出文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep -lR &amp;#39;^grep&amp;#39; /tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（5）查找非x开关的行内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep &amp;#39;^[^x]&amp;#39; test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（6）显示包含 ed 或者 at 字符的内容行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep -E &amp;#39;ed|at&amp;#39; test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="27wc-命令">27、wc 命令
&lt;/h3>&lt;p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wc [option] file..
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>命令参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 统计字节数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 统计行数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 统计字符数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找文件的 行数 单词数 字节数 文件名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wc text.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">7 8 70 test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）统计输出结果的行数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cat test.txt | wc -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ps-命令">ps 命令
&lt;/h2>&lt;p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top&lt;/p>
&lt;p>linux上进程有5种状态:&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>运行(正在运行或在运行队列中等待)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="5">
&lt;li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>ps 工具标识进程的5种状态码:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">D 不可中断 uninterruptible sleep (usually IO)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">R 运行 runnable (on run queue)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">S 中断 sleeping
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">T 停止 traced or stopped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Z 僵死 a defunct (”zombie”) process
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>命令参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-A 显示所有进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a 显示所有进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a 显示同一终端下所有进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">c 显示进程真实名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">e 显示环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f 显示进程间的关系
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">r 显示当前终端运行的进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-aux 显示所有包含其它使用的进程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示当前所有进程环境变量及进程间关系&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -ef
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）显示当前所有进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）与grep联用查找某进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -aux | grep apache
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps aux | grep &amp;#39;(cron|syslog)&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>29、top 命令&lt;/p>
&lt;p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 显示完整的进程命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 保密模式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p &amp;lt;进程号&amp;gt; 指定进程显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n &amp;lt;次数&amp;gt;循环显示次数
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实例：&lt;/p>
&lt;p>&lt;strong>（1）&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">top&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">06&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">23&lt;/span> &lt;span class="n">up&lt;/span> &lt;span class="mi">70&lt;/span> &lt;span class="n">days&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">44&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">load&lt;/span> &lt;span class="n">average&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.35&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Tasks&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">206&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">running&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">205&lt;/span> &lt;span class="n">sleeping&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">stopped&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">zombie&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Cpu&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="mf">5.9&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.4&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">sy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">ni&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">90.4&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">wa&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">hi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.2&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">si&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">st&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Mem&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">32949016&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14411180&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">used&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18537836&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">free&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">169884&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">buffers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Swap&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">32764556&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">used&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32764556&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">free&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3612636&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">cached&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">PID&lt;/span> &lt;span class="n">USER&lt;/span> &lt;span class="n">PR&lt;/span> &lt;span class="n">NI&lt;/span> &lt;span class="n">VIRT&lt;/span> &lt;span class="n">RES&lt;/span> &lt;span class="n">SHR&lt;/span> &lt;span class="n">S&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">CPU&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">MEM&lt;/span> &lt;span class="n">TIME&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">28894&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="mi">22&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">1501&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="mi">405&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="n">S&lt;/span> &lt;span class="mf">52.2&lt;/span> &lt;span class="mf">1.3&lt;/span> &lt;span class="mi">2534&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="n">java&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前五行是当前系统情况整体的统计信息区。&lt;/p>
&lt;p>&lt;strong>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：&lt;/strong>&lt;/p>
&lt;p>14:06:23 — 当前系统时间&lt;/p>
&lt;p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）&lt;/p>
&lt;p>2 users — 当前有2个用户登录系统&lt;/p>
&lt;p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。&lt;/p>
&lt;p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。&lt;/p>
&lt;p>&lt;strong>第二行，Tasks — 任务（进程），具体信息说明如下：&lt;/strong>&lt;/p>
&lt;p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。&lt;/p>
&lt;p>&lt;strong>第三行，cpu状态信息，具体属性说明如下：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">5.9%us — 用户空间占用CPU的百分比。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.4% sy — 内核空间占用CPU的百分比。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.0% ni — 改变过优先级的进程占用CPU的百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">90.4% id — 空闲CPU百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.0% wa — IO等待占用CPU的百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.2% si — 软中断（Software Interrupts）占用CPU的百分比
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>**备注：**在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！&lt;/p>
&lt;p>第四行，内存状态，具体信息如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">32949016k total — 物理内存总量（32GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14411180k used — 使用中的内存总量（14GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18537836k free — 空闲内存总量（18GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">169884k buffers — 缓存的内存量 （169M）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>第五行，swap交换分区信息，具体信息说明如下：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">32764556k total — 交换区总量（32GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0k used — 使用的交换区总量（0K）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">32764556k free — 空闲交换区总量（32GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3612636k cached — 缓冲的交换区总量（3.6GB）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>第六行，空行。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">PID — 进程id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER — 进程所有者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PR — 进程优先级
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NI — nice值。负值表示高优先级，正值表示低优先级
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SHR — 共享内存大小，单位kb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%CPU — 上次更新到现在的CPU时间占用百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%MEM — 进程使用的物理内存百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TIME+ — 进程使用的CPU时间总计，单位1/100秒
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COMMAND — 进程名称（命令名/命令行）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>top 交互命令&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">h 显示top交互命令帮助信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">c 切换显示命令名称和完整命令行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">m 以内存使用率排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">P 根据CPU使用百分比大小进行排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">T 根据时间/累计时间进行排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">W 将当前设置写入~/.toprc文件中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">o或者O 改变显示项目的顺序
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="30kill-命令">30、kill 命令
&lt;/h3>&lt;p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用&amp;quot;-KILL&amp;quot; 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a 当处理当前进程时，不限制命令名和进程号的对应关系
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 指定kill 命令只打印相关进程的进程号，而不发送任何信号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 指定发送信号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 指定用户
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）先使用ps查找进程pro1，然后用kill杀掉&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kill -9 $(ps -ef | grep pro1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="31free-命令">31、free 命令
&lt;/h3>&lt;p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。&lt;/p>
&lt;p>&lt;strong>命令参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-b 以Byte显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k 以kb为单位显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 以mb为单位显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g 以gb为单位显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s&amp;lt;间隔秒数&amp;gt; 持续显示内存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t 显示内存使用总合
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示内存使用情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">free
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">free -k
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">free -m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）以总和的形式显示内存的使用信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">free -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）周期性查询内存使用情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">free -s 10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="文件处理命令">文件处理命令
&lt;/h1>&lt;p>文件处理命令：file、mkdir、grep、dd、find、mv、ls、diff、cat、ln；&lt;/p>
&lt;h2 id="find-命令">find 命令
&lt;/h2>&lt;p>用于在文件树中查找文件，并作出相应的处理。&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find pathname -options [-print -exec -ok ...]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>命令参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-print： find命令将匹配的文件输出到标准输出。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&amp;#39;command&amp;#39; { } \;，注意{ }和\；之间的空格。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>命令选项：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-name 按照文件名查找文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-perm 按文件权限查找文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-user 按文件属主查找文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-group 按照文件所属的组来查找文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-type 查找某一类型的文件，诸如：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> b - 块设备文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d - 目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c - 字符设备文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l - 符号链接文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> p - 管道文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> f - 普通文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-amin n 查找系统中最后N分钟访问的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-atime n 查找系统中最后n*24小时访问的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-cmin n 查找系统中最后N分钟被改变文件状态的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-ctime n 查找系统中最后n*24小时被改变文件状态的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-mmin n 查找系统中最后N分钟被改变文件数据的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-mtime n 查找系统中最后n*24小时被改变文件数据的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-maxdepth n 最大查找目录深度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找 48 小时内修改过的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -atime -2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）在当前目录查找 以 .log 结尾的文件。 &lt;strong>.&lt;/strong> 代表当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find ./ -name &amp;#39;*.log&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查找 /opt 目录下 权限为 777 的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find /opt -perm 777
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）查找大于 1K 的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -size +1000c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查找等于 1000 字符的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -size 1000c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。&lt;/p>
&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -type f -mtime +10 -exec rm -f {} \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#39;*.log&amp;#39; mtime +5 -ok -exec rm {} \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（7）当前目录下查找文件名以 passwd 开头，内容包含 &amp;ldquo;pkg&amp;rdquo; 字符的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -f -name &amp;#39;passwd*&amp;#39; -exec grep &amp;#34;pkg&amp;#34; {} \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（8）用 exec 选项执行 cp 命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#39;*.log&amp;#39; -exec cp {} test3 \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。&lt;/p>
&lt;p>实例：&lt;/p>
&lt;p>（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -type f -print | xargs file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（10）查找当前目录下所有以 js 结尾的并且其中包含 &amp;rsquo;editor&amp;rsquo; 字符的普通文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -type f -name &amp;#34;*.js&amp;#34; -exec grep -lF &amp;#39;ueditor&amp;#39; {} \;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">find -type f -name &amp;#39;*.js&amp;#39; | xargs grep -lF &amp;#39;editor&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（11）利用 xargs 执行 mv 命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#34;*.log&amp;#34; | xargs -i mv {} test4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name \*(转义） -type f -print | xargs grep -n &amp;#39;hostnames&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#39;[a-z]*[4-9].log&amp;#39; -print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（14）在 test 目录查找不在 test4 子目录查找&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find test -path &amp;#39;test/test4&amp;#39; -prune -o -print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -newer log2012.log ! -newer log2017.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>使用 depth 选项：&lt;/strong>&lt;/p>
&lt;p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。&lt;/p>
&lt;p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find / -name &amp;#34;CON.FILE&amp;#34; -depth -print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ln-命令">ln 命令
&lt;/h2>&lt;p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。&lt;/p>
&lt;p>链接分类：软件链接及硬链接&lt;/p>
&lt;p>软链接：&lt;/p>
&lt;ul>
&lt;li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式&lt;/li>
&lt;li>2.软链接可以 跨文件系统 ，硬链接不可以&lt;/li>
&lt;li>3.软链接可以对一个不存在的文件名进行链接&lt;/li>
&lt;li>4.软链接可以对目录进行链接&lt;/li>
&lt;/ul>
&lt;p>硬链接:&lt;/p>
&lt;ul>
&lt;li>1.硬链接，以文件副本的形式存在。但不占用实际空间。&lt;/li>
&lt;li>2.不允许给目录创建硬链接&lt;/li>
&lt;li>3.硬链接只有在同一个文件系统中才能创建&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>需要注意：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；&lt;/li>
&lt;li>第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。&lt;/li>
&lt;li>第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-b 删除，覆盖以前建立的链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 软链接（符号链接）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v 显示详细处理过程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）给文件创建软链接，并显示操作信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ln -sv source.log link.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）给文件创建硬链接，并显示操作信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ln -v source.log link1.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）给目录创建软链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ln -sv /opt/soft/test/test3 /opt/soft/test/test5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Linux 文件系统</title><link>https://sfw003.github.io/p/linux-file-system/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-file-system/</guid><description>&lt;h2 id="文件">文件
&lt;/h2>&lt;p>在谈文件系统前，首先谈谈什么是文件？&lt;/p>
&lt;h3 id="文件结构体">文件结构体
&lt;/h3>&lt;p>文件 = 属性 + 内容
同进程PCB，linux也有管理文件属性的结构体&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>struct file&lt;/strong>：描述文件的打开状态，每次打开文件都会创建一个 file 结构，主要记录与进程操作文件相关的信息（如文件指针位置、打开模式等）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>struct inode&lt;/strong>：描述文件在磁盘或文件系统中的元数据，无论文件是否被打开，inode 都存在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>struct stat&lt;/strong>：用于在&lt;strong>用户空间&lt;/strong>访问文件的属性信息，系统调用通过从 inode 获取属性并填充到 struct stat 中&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>本文重点在前2个&lt;/p>
&lt;h3 id="文件的权限">文件的权限
&lt;/h3>&lt;p>文件权限
每个文件和目录在 Linux 中都有三类权限，分别是：&lt;/p>
&lt;ul>
&lt;li>所有者（Owner）&lt;/li>
&lt;li>所属组（Group）&lt;/li>
&lt;li>其他用户（Others）&lt;/li>
&lt;/ul>
&lt;p>每类权限又分为三种操作权限：&lt;/p>
&lt;ul>
&lt;li>读（r，read）：允许查看文件内容或列出目录内容。&lt;/li>
&lt;li>写（w，write）：允许修改文件内容或在目录中创建、删除文件。&lt;/li>
&lt;li>执行（x，execute）：允许执行文件（如果是可执行程序）或访问目录中的文件。&lt;/li>
&lt;/ul>
&lt;p>这些权限被表示为一个 9 位的二进制组合，如下：&lt;/p>
&lt;p>&lt;code>rwxrwxrwx&lt;/code>&lt;/p>
&lt;ul>
&lt;li>前三个字符表示文件的所有者权限。&lt;/li>
&lt;li>中间三个字符表示文件的所属组权限。&lt;/li>
&lt;li>最后三个字符表示其他用户的权限。&lt;/li>
&lt;/ul>
&lt;p>有权限则对应的二进制位为1
例如，文件权限 755 表示：&lt;code>rwxr-xr-x&lt;/code>&lt;/p>
&lt;p>&lt;strong>文件掩码&lt;/strong>（umask）用于决定在创建文件或目录时默认权限会被如何设置。它是一个权限的反向屏蔽值，掩码中的位会关闭（去除）文件或目录的默认权限。&lt;/p>
&lt;ul>
&lt;li>对于文件，默认权限为 666（即只有读和写权限，没有执行权限）。&lt;/li>
&lt;li>对于目录，默认权限为 777（即读、写、执行权限全部开放）。
码会从这些默认权限中减去相应的权限。例如：&lt;/li>
&lt;/ul>
&lt;p>一个常见的掩码值为 022。这意味着从默认权限中去掉组和其他用户的写权限：&lt;/p>
&lt;ul>
&lt;li>文件权限：666 - 022 = 644（所有者有读写权限，组和其他用户只有读权限）&lt;/li>
&lt;li>目录权限：777 - 022 = 755（所有者有全部权限，组和其他用户有读和执行权限）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="err">查看当前掩码：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">umask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">临时设置&lt;/span> &lt;span class="n">umask&lt;/span>&lt;span class="err">（只对当前会话有效）：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">umask&lt;/span> &lt;span class="mo">002&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">永久更改&lt;/span> &lt;span class="n">umask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">将&lt;/span> &lt;span class="n">umask&lt;/span> &lt;span class="err">命令添加到你的&lt;/span> &lt;span class="n">shell&lt;/span> &lt;span class="err">启动文件中（例如&lt;/span> &lt;span class="o">~/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">bashrc&lt;/span> &lt;span class="err">或&lt;/span> &lt;span class="o">~/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">profile&lt;/span>&lt;span class="err">）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="文件的状态">文件的状态
&lt;/h3>&lt;p>文件有2种状态：打开和未打开
对于一个打开的文件，我们重点关注谁打开？谁进行维护？进程！因此要研究进程和文件的关系
对于一个未打开的文件，我们重点关注放在哪里？如何分门别类的放置好？因此我们需要研究linux的文件系统。&lt;/p>
&lt;h2 id="打开的文件">打开的文件
&lt;/h2>&lt;p>对于打开的文件，我们要研究进程和文件的关系。下面按照如下顺序来讲解：&lt;/p>
&lt;ol>
&lt;li>进程如何操作文件？研究linux下的文件系统调用&lt;/li>
&lt;li>底层是如何将进程和打开的文件联系在一起？研究struct task_struct和struct file&lt;/li>
&lt;/ol>
&lt;h3 id="linux下文件的系统调用">Linux下文件的系统调用
&lt;/h3>&lt;blockquote>
&lt;p>linux系统提供的常见文件接口：
&lt;strong>open&lt;/strong>
&lt;strong>write&lt;/strong>
&lt;strong>read&lt;/strong>
&lt;strong>close&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h4 id="open--close">open &amp;amp;&amp;amp; close
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pathname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pathname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode_t&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数介绍&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pathname&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">文件路径&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flags&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">文件打开方式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mode&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">文件掩码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>flags参数是标志位，告诉open函数是要以读还是以写的方式打开文件。传参内容如下：
O_WRONLY：以写的方式打开文件
O_RDONLY：以读的方式打开文件
O_RDWR：以读写的方式打开文件
O_CREAT：当文件不存在时，创建文件
O_APPEND：在文件末尾追加&lt;/p>
&lt;blockquote>
&lt;p>疑问：如何传递多个标志位？
原理如下图，通过位图的方式,每个标志（如 O_RDWR、O_CREAT、O_TRUNC 等）都是一个特定的整数值，其中每个标志都使用一个或多个二进制位来表示。因为这些标志的二进制表示互不重叠（即它们的值在二进制上不冲突），可以通过按位或运算符（|）将它们组合在一起。
如：&lt;code>int fd = open(&amp;quot;example.txt&amp;quot;, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);&lt;/code>
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/ed8c61c3979d621f3cc5fa6629a9c8e6.png"
width="999"
height="641"
srcset="https://sfw003.github.io/p/linux-file-system/image/ed8c61c3979d621f3cc5fa6629a9c8e6_hu_e033e4ffa148c0d6.png 480w, https://sfw003.github.io/p/linux-file-system/image/ed8c61c3979d621f3cc5fa6629a9c8e6_hu_d64d5414bd05aff3.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="374px"
>&lt;/p>&lt;/blockquote>
&lt;p>mode参数： 新建文件的权限
使用: int fd = open(&amp;ldquo;sfw.txt&amp;rdquo;, O_WRONLY|O_CREAT, 0666);
最后文件的权限是664，这是由于&lt;strong>权限掩码&lt;/strong>的影响&lt;/p>
&lt;p>返回值：&lt;strong>文件描述符&lt;/strong>
后文会详细介绍，这里就简单认为是为open的文件分配一个id，将这个id作为read和write的参数可以对open的文件进行读写。&lt;/p>
&lt;h4 id="read--write">read &amp;amp;&amp;amp; write
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">ssize_t&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssize_t&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;6666&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">ls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="n">t1&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="文件描述符fd和struct-file">文件描述符fd和struct file
&lt;/h3>&lt;p>在Linux系统中用来描述一个打开的文件的结构体是struct file&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">file&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">list_head&lt;/span> &lt;span class="n">f_list&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件对象的链表，用于内核维护打开文件的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">vfsmount&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">f_path&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件路径及挂载点信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">dentry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">f_dentry&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件的目录项
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">file_operations&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">f_op&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件操作函数指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">atomic_long_t&lt;/span> &lt;span class="n">f_count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 引用计数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">f_flags&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件状态标志（读写、非阻塞等）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">loff_t&lt;/span> &lt;span class="n">f_pos&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件当前的读写位置（文件指针）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">private_data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件私有数据（特定文件系统或设备的私有数据）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进程打开文件的本质即是 task_struct和 file 建立联系。如何联系？如下图
task_struct 有一个成员 struct file_struct* files, 它指向结构体 struct files_struct。在struct files_struct 有个指针数组struct file* fd_array[]，该数组存储struct file* 指针。由次 task_struct 与 file 建立了联系。所谓的文件描述符就是struct file* fd_array[]数组的下标。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/e9a50b77b067473587474524351dad8c.png"
width="1920"
height="1023"
srcset="https://sfw003.github.io/p/linux-file-system/image/e9a50b77b067473587474524351dad8c_hu_9e217d6392a2fbfa.png 480w, https://sfw003.github.io/p/linux-file-system/image/e9a50b77b067473587474524351dad8c_hu_7284975f49612cd6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>
内核源代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">files_struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">atomic_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">spinlock_t&lt;/span> &lt;span class="n">file_lock&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Protects all the below members. Nests inside tsk-&amp;gt;alloc_lock */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">max_fds&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">max_fdset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">next_fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">file&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* current fd array */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">close_on_exec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">open_fds&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="n">close_on_exec_init&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="n">open_fds_init&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">file&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NR_OPEN_DEFAULT&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那现在打印文件描述符看看：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd1 = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd2 = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd3 = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fd1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fd3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么是从3开始？&lt;/p>
&lt;p>我们在学习C语言的文件操作时，应该会了解：C语言默认打开3个文件流：stdin, stdout, stderr
stdin &amp;ndash; 标准输入 &amp;ndash; 对应键盘
stdout &amp;ndash; 标准输出 &amp;ndash; 对应显示器
stderr &amp;ndash; 标准错误输出 &amp;ndash; 对应显示器
其他语言类似。&lt;/p>
&lt;p>实际，这并不是语言的特性，而是操作系统的特性。&lt;strong>操作系统默认会打开3个文件描述符&lt;/strong>
0 &amp;ndash; 标准输入 &amp;ndash; 对应键盘
1 &amp;ndash; 标准输出 &amp;ndash; 对应显示器
2 &amp;ndash; 标准错误输出 &amp;ndash; 对应显示器&lt;/p>
&lt;p>验证：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;sfsfsf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sfsfsf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sfsfsf&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>文件描述符的分配规则：在files_struct数组当中，找到当前没有被使用的最小的一个下标，作为新的文件描述符。&lt;/strong>
所以，除去系统默认打开文件，打开的文件的文件描述符默认从3开始。&lt;/p>
&lt;p>小知识：&lt;/p>
&lt;ol>
&lt;li>文件描述符1，2都指向显示器，那关闭1，2会受影响吗？不会，&lt;strong>类比智能指针shared_ptr的引用计数&lt;/strong>&lt;/li>
&lt;li>可以推测，不同语言的文件结构体或者文件类中，一定包含一个成员，文件描述符&lt;/li>
&lt;/ol>
&lt;h3 id="重定向">重定向
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;myfile&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">00644&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fflush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时，我们发现，本来应该输出到显示器上的内容，输出到了文件 myfile 当中，其中，fd＝1。这种现象叫做输出重定向。原理如下。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/f139464d829d4c88b0883224e2f15feb.png"
width="1274"
height="551"
srcset="https://sfw003.github.io/p/linux-file-system/image/f139464d829d4c88b0883224e2f15feb_hu_9a8d4a534a73ade3.png 480w, https://sfw003.github.io/p/linux-file-system/image/f139464d829d4c88b0883224e2f15feb_hu_3f9658cb9b8e1f49.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="554px"
>&lt;/p>
&lt;h4 id="重定向方法">重定向方法
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>重定向符号&lt;/strong>&lt;/th>
&lt;th>&lt;strong>说明&lt;/strong>&lt;/th>
&lt;th>&lt;strong>示例&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;td>将文件内容作为命令的标准输入&lt;/td>
&lt;td>&lt;code>command &amp;lt; input_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;td>将命令的标准输出重定向到文件（覆盖原文件）&lt;/td>
&lt;td>&lt;code>command &amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将命令的标准输出追加到文件末尾&lt;/td>
&lt;td>&lt;code>command &amp;gt;&amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>2&amp;gt;&lt;/code>&lt;/td>
&lt;td>将命令的标准错误输出重定向到文件&lt;/td>
&lt;td>&lt;code>command 2&amp;gt; error_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>2&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将标准错误追加到文件末尾&lt;/td>
&lt;td>&lt;code>command 2&amp;gt;&amp;gt; error_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将标准输出和标准错误同时重定向到文件&lt;/td>
&lt;td>&lt;code>command &amp;amp;&amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将标准输出和标准错误追加重定向到文件末尾&lt;/td>
&lt;td>&lt;code>command &amp;amp;&amp;gt;&amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>2&amp;gt;&amp;amp;1&lt;/code>&lt;/td>
&lt;td>将标准错误重定向到标准输出&lt;/td>
&lt;td>&lt;code>command &amp;gt; output_file 2&amp;gt;&amp;amp;1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`&lt;/td>
&lt;td>tee`&lt;/td>
&lt;td>将标准输出显示在终端并写入文件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">ls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myfile&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;5555&amp;#34;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span> &lt;span class="err">将打印到显示器的信息重定向到&lt;/span>&lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5555&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;6666&amp;#34;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span> &lt;span class="err">重定向会清空文件原有的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;7777&amp;#34;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span> &lt;span class="err">追加重定向不会清空原有内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">7777&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些操作本质都是通过系统调用dup来实现的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NAME&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dup&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dup2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dup3&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">duplicate&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="n">descriptor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SYNOPSIS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">oldfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">dup2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">oldfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#define _GNU_SOURCE &lt;/span>&lt;span class="cm">/* See feature_test_macros(7) */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp"> &lt;/span>&lt;span class="cm">/* Obtain O_* constant definitions */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">dup3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">oldfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>dup系统调用接口中，最常用的是dup2。
注意它的含义：让newfd对应文件替换为oldfd指向的文件。
简单理解：&lt;strong>最后oldfd和newfd都指向oldfd对应的文件&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;./log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_CREAT&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_RDWR&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">perror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;open&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dup2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ssize_t&lt;/span> &lt;span class="n">read_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">read_size&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">perror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fflush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="用户缓冲区">用户缓冲区
&lt;/h3>&lt;p>看下面一段代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">msg0&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello printf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">msg1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello fwrite&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">msg2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello write&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fwrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">printf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">fwrite&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">write&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">write&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">printf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">fwrite&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">printf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">fwrite&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么打印屏幕上和重定向到文件的结果不一样？&lt;/p>
&lt;p>我们发现 printf 和 fwrite （库函数）都输出了2次，而 write 只输出了一次（系统调用）。为什么呢？肯定和
fork有关！&lt;strong>一般C库函数写入文件时是全缓冲的，而写入显示器是行缓冲&lt;/strong>。printf fwrite 库函数会自带缓冲区，当发生重定向到普通文件时，数据的缓冲方式由行缓冲变成了全缓冲。
而我们放在缓冲区中的数据，就不会被立即刷新，当进程退出之后，会统一刷新，写入文件当中。
但是fork的时候，父子数据会发生写时拷贝，所以当你父进程准备刷新的时候，子进程也就有了同样的
一份数据，随即产生两份数据。write 没有变化，说明没有所谓的缓冲区。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/19c312ceaf19437f85bd475101a91464.png"
width="1040"
height="439"
srcset="https://sfw003.github.io/p/linux-file-system/image/19c312ceaf19437f85bd475101a91464_hu_50489855c0f66fec.png 480w, https://sfw003.github.io/p/linux-file-system/image/19c312ceaf19437f85bd475101a91464_hu_591cbd7ae84d3371.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/p>
&lt;h2 id="未打开的文件">未打开的文件
&lt;/h2>&lt;h3 id="linux的文件系统">linux的文件系统
&lt;/h3>&lt;p>假设现在linux的文件系统要管理一个1000GB的磁盘。
它的第一步便是要对1000GB进行划分，因为太大了，这一过程便是&lt;strong>分区&lt;/strong>。如何分？随便分。对于操作系统，定义一个结构体，里面定义start，end,便可以很容易的记录各个区的起始于结尾，因此分区对于操作系统来说非常简单。此时系统便将管理1000GB的任务 &amp;ndash;&amp;gt; 管理200GB的任务。只要系统将200GB的空间管理好，后面的150GB，120GB同理即可。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/588070d9796db19a6827c2550f11a3f3.png"
width="765"
height="103"
srcset="https://sfw003.github.io/p/linux-file-system/image/588070d9796db19a6827c2550f11a3f3_hu_c5337237c34a1b60.png 480w, https://sfw003.github.io/p/linux-file-system/image/588070d9796db19a6827c2550f11a3f3_hu_f4ddb6bb3151b858.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="742"
data-flex-basis="1782px"
>
200GB对于操作系统还是太大，于是系统可以继续分。直到最后分成一个基本块（block）。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/53697afc57cce28aa2182894eb2c0b62.png"
width="557"
height="173"
srcset="https://sfw003.github.io/p/linux-file-system/image/53697afc57cce28aa2182894eb2c0b62_hu_473f02df198ceffb.png 480w, https://sfw003.github.io/p/linux-file-system/image/53697afc57cce28aa2182894eb2c0b62_hu_7bf991beb87543e6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="321"
data-flex-basis="772px"
>
Linux ext2文件系统，上图为磁盘文件系统图（内核内存映像肯定有所不同），磁盘是典型的块设备，硬盘分区被划分为一个个的block。一个block的大小是由格式化的时候确定的，并且不可以更改。例如mke2fs的-b选项可以设定block大小为1024、2048或4096字节。而上图中启动块（Boot Block)的大小是确定的，&lt;/p>
&lt;ul>
&lt;li>Block Group：ext2文件系统会根据分区的大小划分为数个Block Group。而每个Block Group都有着相
同的结构组成。政府管理各区的例子&lt;/li>
&lt;li>Super Block：存放文件系统本身的结构信息。记录的信息主要有：bolck 和 inode的总量，未使用的block和inode的数量，一个block和inode的大小，最近一次挂载的时间，最近一次写入数据的时间，最近一次检验磁盘的时间等其他文件系统的相关信息。Super Block的信息被破坏，可以说整个文件系统结构就被破坏了&lt;/li>
&lt;li>Group Descriptor Table：块组描述符，描述块组属性信息。&lt;/li>
&lt;li>Block Bitmap：Block Bitmap中记录着Data Block中哪个数据块已经被占用，哪个数据块没有被占用&lt;/li>
&lt;li>inode Bitmap：每个bit表示一个inode是否空闲可用。&lt;/li>
&lt;li>inode Table：&lt;strong>存放struct inode，存储文件属性&lt;/strong>。每个inode带有编号&lt;/li>
&lt;li>Data blocks：存放Data block，每一个Data block带有编号&lt;/li>
&lt;/ul>
&lt;p>介绍一下它们之间的关系：
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/69bf8d767dae4570a28e72a0c5617df5.png"
width="2187"
height="858"
srcset="https://sfw003.github.io/p/linux-file-system/image/69bf8d767dae4570a28e72a0c5617df5_hu_449c80849e9713f3.png 480w, https://sfw003.github.io/p/linux-file-system/image/69bf8d767dae4570a28e72a0c5617df5_hu_72db999c25ad591f.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>
当我们创建一个新文件时：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">localhost&lt;/span> &lt;span class="n">linux&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">touch&lt;/span> &lt;span class="n">abc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">localhost&lt;/span> &lt;span class="n">linux&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">ls&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="n">abc&lt;/span> &lt;span class="c1">//-i 查看该文件的inode编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">263466&lt;/span> &lt;span class="n">abc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-file-system/image/39c9a93e7b22444892e9355e926ac86e.png"
width="807"
height="331"
srcset="https://sfw003.github.io/p/linux-file-system/image/39c9a93e7b22444892e9355e926ac86e_hu_4e509c093d705e41.png 480w, https://sfw003.github.io/p/linux-file-system/image/39c9a93e7b22444892e9355e926ac86e_hu_375e8cf376e09fde.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="585px"
>&lt;/p>
&lt;hr>
&lt;p>疑问：&lt;/p>
&lt;p>3种情况：&lt;/p>
&lt;ol>
&lt;li>新建一个文件，系统所做如上&lt;/li>
&lt;li>删除一个文件，系统只需要把 block bitmap和inode bitmap中对应位图置0&lt;/li>
&lt;li>查找和修改
用户并不知道inode编号，只知道文件名，那系统如何通过文件名找到inode呢？
目录也是一个文件，它存储的内容是文件名和inode的对应关系。
那目录本身呢？谁存储目的的文件名和inode的对应关系？上一级目录。最后所有目录都会指向一个目录：根目录。因此查找一文件，对系统来说是从根目录递归向下查找。这是不是太慢了？当然，因此要不断访问磁盘。为此，Linux 系统会缓存多种数据以提高性能，包括文件系统的元数据、文件内容以及目录结构。当你访问文件时，系统会将这些数据存储在内存中，以便快速访问，减少磁盘读写操作。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="软硬链接">软硬链接
&lt;/h3>&lt;p>linux下通过&lt;code>ln&lt;/code>命令可以为文件创建软硬链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">文件 test.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">创建硬链接 ln 目标文件（不能是目录） 硬链接名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln test.txt hard_link
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">创建软链接 ln -s 目标文件 软链接名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln -s test.txt soft_link
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-file-system/image/d5376ec1581cef29add0ea8ff264dffe.png"
width="923"
height="148"
srcset="https://sfw003.github.io/p/linux-file-system/image/d5376ec1581cef29add0ea8ff264dffe_hu_94b1d684275edb14.png 480w, https://sfw003.github.io/p/linux-file-system/image/d5376ec1581cef29add0ea8ff264dffe_hu_6b3d3e96b34e1ce8.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="623"
data-flex-basis="1496px"
>
问题1：软硬链接是干什么的？
答：&lt;strong>用于建立文件之间的联系&lt;/strong>
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/9597bda6507aeaf11359306ef827a7c8.png"
width="917"
height="318"
srcset="https://sfw003.github.io/p/linux-file-system/image/9597bda6507aeaf11359306ef827a7c8_hu_1cb23b3da1c0c3c5.png 480w, https://sfw003.github.io/p/linux-file-system/image/9597bda6507aeaf11359306ef827a7c8_hu_509b11e3e189831d.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="288"
data-flex-basis="692px"
>&lt;/p>
&lt;p>问题2：软硬链接有什么区别？
&lt;strong>软链接是一个独立的文件，因为它有独立的inode,
硬链接不是一个独立的文件，因为它没有独立的inode.&lt;/strong>&lt;/p>
&lt;p>通过上面的例子可以看出：test.txt的inode(1050440)与hard_link的inode(1050440)相同，而我们知道，每个文件的inode是唯一的，因此可以推断hard_link不是一个独立的文件，反之，soft_link是一个独立的文件，因为它有独立的inode.&lt;/p>
&lt;p>我们应该如何去理解软硬链接呢？&lt;/p>
&lt;p>对于软链接：它完全等同于windows下创建软件的&lt;strong>快捷方式&lt;/strong>。&lt;strong>它存储指向文件的存储路径（地址）&lt;/strong>&lt;/p>
&lt;p>对于硬链接：硬链接本质是&lt;strong>在特定的目录数据块中新增 文件名 和 指向文件的inode编号 的映射关系&lt;/strong>，就像c++里的&lt;strong>引用&lt;/strong>一样。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/b52f69d6c5b8b246cd7626586da90adb.png"
width="432"
height="132"
srcset="https://sfw003.github.io/p/linux-file-system/image/b52f69d6c5b8b246cd7626586da90adb_hu_a5d9fb693df9c545.png 480w, https://sfw003.github.io/p/linux-file-system/image/b52f69d6c5b8b246cd7626586da90adb_hu_37335449d47df0a5.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="785px"
>
通过ls -l命令可以看到文件的硬链接数，如下图红框处。如果你了解&lt;strong>引用计数&lt;/strong>的概念，这个理解起来就很轻松。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/f562fe68e3adf8520902cf9544dfb8ee.png"
width="922"
height="155"
srcset="https://sfw003.github.io/p/linux-file-system/image/f562fe68e3adf8520902cf9544dfb8ee_hu_8637e6184cac7d8e.png 480w, https://sfw003.github.io/p/linux-file-system/image/f562fe68e3adf8520902cf9544dfb8ee_hu_e177ec8ed783e837.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="594"
data-flex-basis="1427px"
>
假如我们删去test.txt，与文件inode:105040的文件名减少一个，因此引用计数减1，由2变为1，因此下方hard_link前面的数字变为1。而soft_link存储的是test.txt的路径（地址），test.txt文件没了，显然soft_link就失效了，
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/879259ff0d1151d1465b90d9cc50fb5b.png"
width="938"
height="159"
srcset="https://sfw003.github.io/p/linux-file-system/image/879259ff0d1151d1465b90d9cc50fb5b_hu_736ad38774f53f80.png 480w, https://sfw003.github.io/p/linux-file-system/image/879259ff0d1151d1465b90d9cc50fb5b_hu_985dcca96e6e0f03.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="589"
data-flex-basis="1415px"
>&lt;/p>
&lt;p>问题3：软硬链接有哪些应用场景？
答：软链接就不用说了。硬链接的经典的应用场景便是&lt;strong>目录&lt;/strong>。linux创建一个目录，你会发现它的引用计数是2，说明有一个硬链接指向它，那这个硬链接在哪里呢？
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/08382e414c2414d764f1639f576d286c.png"
width="728"
height="121"
srcset="https://sfw003.github.io/p/linux-file-system/image/08382e414c2414d764f1639f576d286c_hu_7866b1c5408dede4.png 480w, https://sfw003.github.io/p/linux-file-system/image/08382e414c2414d764f1639f576d286c_hu_275d0fc36595b354.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="601"
data-flex-basis="1443px"
>
每个目录创建时，会自动创建两个隐藏文件&lt;code>.&lt;/code>和&lt;code>..&lt;/code>，它们都是硬链接。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/534b79a02b74b1427dcbe3914a956ad4.png"
width="704"
height="125"
srcset="https://sfw003.github.io/p/linux-file-system/image/534b79a02b74b1427dcbe3914a956ad4_hu_f6f92c726eb222a2.png 480w, https://sfw003.github.io/p/linux-file-system/image/534b79a02b74b1427dcbe3914a956ad4_hu_4b9a32a99d2419b0.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="563"
data-flex-basis="1351px"
>&lt;/p>
&lt;p>问题4：为什么用户不能给目录设置硬链接？
循环引用问题：如果允许用户给目录创建硬链接，那么用户可以创建一个目录结构的循环，比如目录A指向目录B，目录B又指向目录A，最终导致无限循环。这种情况会破坏文件系统的层次结构，并使得一些文件系统操作（如遍历文件树）变得复杂和无法实现。&lt;/p></description></item><item><title>Linux 线程</title><link>https://sfw003.github.io/p/linux-thread/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-thread/</guid><description>&lt;p>绘图文件，在&lt;a class="link" href="https://sfw003.github.io/p/linux-series/#linux进程管理" >linux系列文章:进程管理&lt;/a>&lt;/p>
&lt;h2 id="线程与tcb">线程与TCB
&lt;/h2>&lt;blockquote>
&lt;p>线程（Thread）是进程内的一个执行分支，线程的执行粒度，要比进程更细。&lt;/p>&lt;/blockquote>
&lt;p>如何理解？&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410164313828.png"
width="461"
height="551"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410164313828_hu_66d962c4dc9bb428.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410164313828_hu_fd636f545b34d674.png 1024w"
loading="lazy"
alt="image-20250410164313828"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="200px"
>&lt;/p>
&lt;h3 id="linux下的线程与pthread库">linux下的线程与pthread库
&lt;/h3>&lt;p>&lt;strong>linux没有真正意义的线程&lt;/strong>，这在很多教材都提过的观点。究其原因，就如上图所示，让n个PCB来管理一个进程地址空间不就有了线程了。区别windows系统专门设置了TCB结构体，linux选择用PCB来模拟TCB，因此linux可以说没有真正意义的线程，而是叫做&lt;strong>轻量级进程&lt;/strong>。&lt;/p>
&lt;p>你linux搞特殊是吧？我想使用线程，你告诉我说让我使用轻量级进程。这让用户满意吗？于是linux封装了一个库 &lt;strong>pthread&lt;/strong>，让用户可以使用到&lt;strong>用户级线程&lt;/strong>，并不能叫做&lt;strong>内核级线程&lt;/strong>，因为在linux内核中只有轻量级进程。可以通过下图来理解：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/f99a74ee3b55fc2c2ab61eae415b29a7.png"
width="1106"
height="768"
srcset="https://sfw003.github.io/p/linux-thread/image/f99a74ee3b55fc2c2ab61eae415b29a7_hu_4c75f0ddc73b0b86.png 480w, https://sfw003.github.io/p/linux-thread/image/f99a74ee3b55fc2c2ab61eae415b29a7_hu_a872263aa6e0f674.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="345px"
>&lt;/p>
&lt;p>注：&lt;/p>
&lt;ul>
&lt;li>轻量级进程:用户级线程 = 1:1&lt;/li>
&lt;li>用户使用到的TCB结构体并不在内核空间中。&lt;/li>
&lt;/ul>
&lt;p>上图中出现了2个名词：线程栈和线程局部存储&lt;/p>
&lt;h4 id="线程栈">线程栈
&lt;/h4>&lt;p>每一个线程都有自己的调用链，注定了每个线程都要有调用链对应的栈帧结构，用来存储线程函数中的局部变量、函数参数以及函数调用的返回地址等信息。这一点类似进程的main函数的函数栈帧。这里的线程栈由pthread来维护，有了线程栈，才能在内核里创建执行流，有了新的执行流，才是一个真正的线程。&lt;/p>
&lt;blockquote>
&lt;p>pthread是如何创建线程栈？&lt;/p>
&lt;p>inux下只有轻量级进程的概念，自然linux会提供轻量级进程的接口，pthread库正是对轻量级进程的接口进行了封装，才在用户层创建了线程的概念。&lt;/p>
&lt;p>linux下创建轻量级进程的系统接口是clone&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/4172bee3ea61ac55cc7cf5ad25794b62.png"
width="1046"
height="348"
srcset="https://sfw003.github.io/p/linux-thread/image/4172bee3ea61ac55cc7cf5ad25794b62_hu_2ae41c3c3347bb0.png 480w, https://sfw003.github.io/p/linux-thread/image/4172bee3ea61ac55cc7cf5ad25794b62_hu_2220ad0128af24e7.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="721px"
>&lt;/p>&lt;/blockquote>
&lt;p>如何验证？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">thread_routine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;thread-&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, j=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, &amp;amp;j=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, g_val=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">g_val&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, &amp;amp;g_val=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_val&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">std&lt;/span>&lt;span class="p">:;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pthread_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tids&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_routine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tids&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/b752d85cc384361884d16c1771508fba.png"
width="837"
height="608"
srcset="https://sfw003.github.io/p/linux-thread/image/b752d85cc384361884d16c1771508fba_hu_80c65b96be950cfd.png 480w, https://sfw003.github.io/p/linux-thread/image/b752d85cc384361884d16c1771508fba_hu_83dde00b95c6e81.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>不同的线程，都执行的同一个函数thread_routine，但函数内部的临时变量j，不是共享的，如果是共享的，那么不同的线程的j的地址应该一样。但结果表明，j的地址都不同。这也表明线程有自己独立的栈结构。&lt;/p>
&lt;p>对于全局变量g_val，不同线程是共享的。&lt;/p>
&lt;p>插入一个问题：线程栈由多大？&lt;/p>
&lt;p>在linux系统中使用 &lt;code>ulimit -a&lt;/code>可以查看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">hcss&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ecs&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">f8b5&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">blog&lt;/span>&lt;span class="c1"># ulimit -a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">real&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">time&lt;/span> &lt;span class="n">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">blocking&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">microseconds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">core&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">blocks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="n">seg&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">scheduling&lt;/span> &lt;span class="n">priority&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">file&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">blocks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pending&lt;/span> &lt;span class="n">signals&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">6628&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">max&lt;/span> &lt;span class="n">locked&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">226728&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">max&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">open&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">65535&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pipe&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">512&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">POSIX&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="n">queues&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">819200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">real&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">time&lt;/span> &lt;span class="n">priority&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">8192&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cpu&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">max&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="n">processes&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">6628&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">virtual&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">file&lt;/span> &lt;span class="n">locks&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>stack size (kbytes, -s) 8192 约为8M&lt;/p>
&lt;h4 id="线程的局部存储">线程的局部存储
&lt;/h4>&lt;p>如果我想线程拥有私有的全局变量呢？这就要使用线程的局部存储。
&lt;code>int g_val = 0 改为 __thread in g_val = 0&lt;/code>
此时不同的线程的变量g_val，都是不同的
&lt;img src="https://sfw003.github.io/p/linux-thread/image/82808e1010e8844a562705b983fe0c6c.png"
width="1068"
height="645"
srcset="https://sfw003.github.io/p/linux-thread/image/82808e1010e8844a562705b983fe0c6c_hu_93ca0ec558de0ec7.png 480w, https://sfw003.github.io/p/linux-thread/image/82808e1010e8844a562705b983fe0c6c_hu_6c8faee95482b335.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>
在变量前加上 &lt;code>__thread&lt;/code>， 就可以将该变量改为局部存储。除了这个关键字之外，pthread库中也有一些函数可以实现局部存储。&lt;/p>
&lt;p>__thread 是 GCC 中用于实现线程局部存储（Thread Local Storage，TLS）的关键字。它可以用来声明线程局部变量，这些变量对于每个线程是唯一的，不同线程之间的变量不会相互影响。&lt;strong>但是它只能声明内置类型，无法声明自定义类型。&lt;/strong>
需要注意的是，__thread 关键字是 GCC 的扩展语法，虽然在大多数情况下可以正常工作，但并不是 C 标准的一部分，因此在一些不支持 GCC 扩展语法的编译器中可能无法使用。在 C11 标准中引入了 _Thread_local 关键字，用于实现线程局部存储，具有类似的功能，而且是标准化的语法。&lt;/p>
&lt;h2 id="线程的竞争与协作">线程的竞争与协作
&lt;/h2>&lt;p>进程地址空间存在的意义是什么？扩大地址空间，内存保护、进程隔离。这中间最重要一点的就是进程隔离，它可以放在数据被随意修改。现在多个线程共享一个进程地址空间，不可避免的就会出现数据竞争的问题。&lt;/p>
&lt;p>看下面这段代码：4个线程同时访问全局变量tickets&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">tickets&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">getTickets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//票大于0才抢
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tickets&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">usleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;thread-%d, get a ticket: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tickets&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tickets&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pthread_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tids&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">getTickets&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tids&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/220d95bc9366db5f9a606c2a70d4e3e2.png"
width="636"
height="184"
srcset="https://sfw003.github.io/p/linux-thread/image/220d95bc9366db5f9a606c2a70d4e3e2_hu_a207777bef057b84.png 480w, https://sfw003.github.io/p/linux-thread/image/220d95bc9366db5f9a606c2a70d4e3e2_hu_f8b019caa092df75.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="345"
data-flex-basis="829px"
>&lt;/p>
&lt;p>按照抢票的逻辑，票&amp;gt;0才抢，&amp;lt;=0就退出，怎么会出现负数呢？一张票应该属于一个线程，怎么出现了相同数字？问题就出在多线程并发访问。&lt;/p>
&lt;img src="image/1263aed2829689f36df7f566e583c72e.png" alt="在这里插入图片描述" style="zoom:67%;" />
&lt;p>多线程执行操作共享变量会导致竞争状态，在执行过程中发生了上下文切换，得到了错误的结果。每次运行都可能得到不同的结果，存在不确定性，为了解决这类问题，我们需要引入同步和互斥&lt;/p>
&lt;h3 id="同步和互斥相关概念">同步和互斥相关概念
&lt;/h3>&lt;p>首先了解以下几个概念&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>并发&lt;/strong>：指的是多个事情，在同一时间段内同时发生了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并行&lt;/strong>：指的是多个事情，在同一时间点上同时发生了。只有在多CPU的情况中，才会出现&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>共享资源&lt;/strong>：多个线程之间可以&lt;strong>并发&lt;/strong>访问的资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>临界资源&lt;/strong>：多个线程&lt;strong>互斥&lt;/strong>访问的共享资源。（共享资源 且 同一时间只能由一个线程访问 即为临界资源）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>临界区&lt;/strong>：每个线程内部，访问临界资源的代码，就叫做临界区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>互斥&lt;/strong>：任何时刻，互斥保证有且只有一个执行流进入临界区，访问临界资源，通常对临界资源起保护作用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同步&lt;/strong>：就是并发进程/线程在一些关键点上可能需要互相等待与互通消息，这种相互制约的等待与互通信息称为进程/线程同步。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子性&lt;/strong>：不会被任何调度机制打断的操作，该操作只有两态，要么完成，要么未完成&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>了解完概念，下面的问题是如何实现线程的同步和互斥？&lt;/p>
&lt;h3 id="同步和互斥的实现">同步和互斥的实现
&lt;/h3>&lt;p>操作系统提供实现线程协作的措施和方法，主要的方法有两种：&lt;/p>
&lt;ul>
&lt;li>锁&lt;/li>
&lt;li>POSIX信号量&lt;/li>
&lt;/ul>
&lt;h4 id="互斥锁和条件变量">互斥锁和条件变量
&lt;/h4>&lt;p>一个线程进入临界区之前，需要&lt;strong>申请锁&lt;/strong>，只有拿了锁，才能执行临界区的代码。锁只有一把，故当一个线程拿了锁后，其他线程在申请锁时就会被阻塞，只有当持有锁的线程执行完临界区代码、进行&lt;strong>解锁&lt;/strong>后，其他线程才可以申请锁。此时便实现了多个线程互斥的访问共享资源。&lt;/p>
&lt;blockquote>
&lt;p>锁有2中基本类型：互斥锁（互斥量）和自旋锁，下面以互斥锁为例。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410225111994.png"
width="229"
height="304"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410225111994_hu_822ecc6cef004450.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410225111994_hu_17180de5793b002b.png 1024w"
loading="lazy"
alt="image-20250410225111994"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/p>
&lt;p>单纯加锁已经解决了数据资源竞争问题，但是又引出了锁资源竞争的问题。不同线程对锁的竞争能力是不同，这可能导致大部分时间，锁都在某一个线程上，这将导致线程的&lt;strong>饥饿问题&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410225938165.png"
width="347"
height="246"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410225938165_hu_860a5ba7b2cb2c20.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410225938165_hu_cb1119741f277377.png 1024w"
loading="lazy"
alt="image-20250410225938165"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>为此，我们需要引入一个同步机制，比如条件变量&lt;/p>
&lt;blockquote>
&lt;p>条件变量（Condition Variable）是一种线程同步机制，需要与互斥锁（Mutex）结合使用，用于在线程间传递某个条件的状态并实现线程的等待和唤醒。条件变量允许一个或多个线程在满足特定条件之前进入等待状态，并在条件被满足时被唤醒。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410230214278.png"
width="453"
height="231"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410230214278_hu_3fc4e65f01aa9427.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410230214278_hu_76e5a27f3b1117a5.png 1024w"
loading="lazy"
alt="image-20250410230214278"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;h5 id="互斥锁和条件变量的使用以下采用linux原生api">互斥锁和条件变量的使用（以下采用linux原生API)
&lt;/h5>&lt;h5 id="互斥锁的原理">互斥锁的原理
&lt;/h5>&lt;p>锁可以保护临界区被线程互斥访问。但锁同时也是所有线程共享，属于共享资源，那锁自身的互斥问题呢？那必须将申请锁设计成&lt;strong>原子的&lt;/strong>。（不会被任何调度机制打断的操作，该操作只有两态，要么完成，要么未完成）
首先我们要有一个共识：&lt;strong>一条汇编语句是原子的&lt;/strong>。
但加锁的过程不可能仅仅只是一条汇编语句。那是如何实现加锁过程是原子的呢？&lt;/p>
&lt;p>为了实现互斥锁操作,大多数体系结构都提供了swap或exchange指令,该指令的作用是把寄存器和内存单元的数据相交换,由于只有一条指令,保证了原子性,即使是多处理器平台,访问内存的 总线周期也有先后,一个处理器上的交换指令执行时另一个处理器的交换指令只能等待总线周期。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">lock:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movb $0, %al
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xchgb %al, mutex
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(al寄存器的内容〉0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 挂起等待;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto lock;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">unlock:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movb $l,mutex
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 唤醒等待Mutex的线程；
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;img src="image/efdc12726f6487bd1c677f9e9ae7e1c1.gif" alt="请添加图片描述" style="zoom:150%;" />
&lt;h4 id="posix信号量">POSIX信号量
&lt;/h4>&lt;p>POSIX信号量和SystemV信号量（进程间通信）作用相同，都是用于同步操作，达到无冲突的访问共享资源目的。 但POSIX可以用于线程间同步。&lt;/p>
&lt;p>信号量是什么？信号量本质是个&lt;strong>计数器&lt;/strong>。类似但是&lt;strong>绝不等于&lt;/strong> &lt;code>int cnt;&lt;/code>(这里的绝不等于体现在信号量的++和&amp;ndash;是原子的，但整形变量的++和&amp;ndash;不是原子的）&lt;/p>
&lt;p>那这个计数器记忆什么数据呢？&lt;strong>临界资源的数量&lt;/strong>&lt;/p>
&lt;p>当申请时，信号量会预定临界资源给你。就像电影院买票，只要你买了票，不管你是否去看，电影院一定有你的位置。信号量同理，&lt;strong>只要你向信号量申请了临界资源，就一定有可以使用的临界资源&lt;/strong>（不用担心临界资源是否就绪、是否存在等问题）&lt;/p>
&lt;p>正是这一特性，我们使用信号量就不用像互斥锁一样，加了锁还要用条件变量。&lt;/p>
&lt;p>信号量有2个操作P和V，P表示申请，V表示释放。
使用时的顺序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">P(信号量)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">使用临界资源
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">V(信号量）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="经典同步问题">经典同步问题
&lt;/h2>&lt;h3 id="生产者消费者模型">生产者消费者模型
&lt;/h3>&lt;p>生成者消费者模型是一种用于解决多线程或多进程间数据交换与同步的经典问题。
在该模型中，生产者负责生产数据并将其放入共享的缓冲区，而消费者则负责从缓冲区中获取数据并进行处理。这种模型通常用于解决生产者与消费者之间速度不匹配的情况，以及避免因为生产者和消费者之间的竞争条件而导致的数据丢失或不一致的问题。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411092358400.png"
width="694"
height="217"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411092358400_hu_66426eaa42c8851e.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411092358400_hu_b5c587edb6588e66.png 1024w"
loading="lazy"
alt="image-20250411092358400"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;blockquote>
&lt;p>这里共享资源准确说是临界资源&lt;/p>&lt;/blockquote>
&lt;p>生产者消费者模型的组成：&lt;/p>
&lt;ul>
&lt;li>3种关系：生产者和生产者，消费者和消费者，生产者和消费者&lt;/li>
&lt;li>2种角色：生产者、消费者&lt;/li>
&lt;li>1个场所：特定结构的内存空间&lt;/li>
&lt;/ul>
&lt;p>从记忆的角度，我们可以简记为“321”原则。&lt;/p>
&lt;p>3种关系：&lt;/p>
&lt;ol>
&lt;li>生产者与生产者：当一个生产者进行生产时，其他生产者不能生产 &amp;ndash; &lt;strong>互斥&lt;/strong>（避免争夺同一空间）&lt;/li>
&lt;li>消费者与消费者：当一个消费者进行消费时，其他消费者不能消费 &amp;ndash; &lt;strong>互斥&lt;/strong> （避免争夺同一资源）&lt;/li>
&lt;li>消费者与生产者：当一个生产者进行生产时，消费者不能进行消费 &amp;ndash; &lt;strong>互斥&lt;/strong>（原因：假如生产者正在生产，消费者这时要进行消费，刚好消费这个生产者生产的资源，哪你怎么知道生产者此时生产好了吗？消费者拿到完整的资源了吗？因此要互斥）。避免生产者向已满的缓冲区中放入数据，或消费者从空的缓冲区中获取数据的情况发生。&amp;ndash; &lt;strong>同步&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>这个模型的优势在哪？&lt;/strong>
一般的结论：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>解耦生产者和消费者&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持并发&lt;/strong>：由于生产者与消费者是两个独立的并发体，他们之间是用缓冲区作为桥梁连接，生产者只需要往缓冲区里丢数据，就可以继续生产下一个数据，而消费者只需要从缓冲区了拿数据即可，这样就不会因为彼此的处理速度而发生阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持忙闲不均&lt;/strong>：当数据制造快的时候，消费者来不及处理，未处理的数据可以暂时存在缓冲区中。 等生产者的制造速度慢下来，消费者再慢慢处理掉。这平衡了生产和消费速率&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>高效&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里重点说说&lt;strong>高效&lt;/strong>，生产者消费者模型高效在哪？注意：前面提到3种关系都包含&lt;strong>互斥&lt;/strong>，互斥决定了在共享资源中是串行访问，串行访问一点也不高效。&lt;/p>
&lt;p>这里高效体现在非临界区上：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于生产者：我们仅仅提到了它生产数据，它能凭空产生吗？一定需要它去获取“原材料”。因此在&lt;strong>生产数据&lt;/strong>前，还有&lt;strong>获取数据&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于消费者：前文我们指的消费，仅仅表示它把数据拿走了，但它拿走之后呢？一定要进行数据的加工和处理。因此在&lt;strong>消费数据&lt;/strong>后，还有&lt;strong>数据的加工和处理&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411093644199.png"
width="377"
height="190"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411093644199_hu_b40d74e9c5dcc53.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411093644199_hu_184c94b08b8377f7.png 1024w"
loading="lazy"
alt="image-20250411093644199"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>临界区的代码是串行的，谈不上高效，但是生产者和消费者的非临界区是可以&lt;strong>并发&lt;/strong>访问。而&lt;strong>非临界区的并发访问&lt;/strong>才是生产者消费者模型高效的部分。&lt;/p>
&lt;h4 id="基于阻塞队列的生产消费模型">基于阻塞队列的生产消费模型
&lt;/h4>&lt;p>在多线程编程中阻塞队列(Blocking Queue)是一种常用于实现生产者和消费者模型的数据结构。其与普通的队列区别：当队列为空时，从队列获取元素的操作将会被阻塞，直到队列中被放入了元素；当队列满时，往队列里存放元素的操作也会被阻塞，直到有元素被从队列中取出(以上的操作都是基于不同的线程来说的，线程在对阻塞队列进程操作时会被阻塞)&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411101039386.png"
width="701"
height="191"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411101039386_hu_68405d3793983161.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411101039386_hu_b5f4315d6f9b25ad.png 1024w"
loading="lazy"
alt="image-20250411101039386"
class="gallery-image"
data-flex-grow="367"
data-flex-basis="880px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;queue&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">blockqueue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">defaultnum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 加锁 - 等待 - 唤醒 - 解锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">blockqueue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">maxcap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">defaultnum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">maxcap_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maxcap&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">blockqueue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="nf">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">//为什么不用if来判断？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 消费后，唤醒生产者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">maxcap_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 生产后，唤醒消费者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxcap_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_t&lt;/span> &lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_t&lt;/span> &lt;span class="n">c_cond_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_t&lt;/span> &lt;span class="n">p_cond_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>细节：为什么在判断条件时，用while循环？
&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411095123482.png"
width="372"
height="98"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411095123482_hu_1d73dabe59f159dc.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411095123482_hu_f079c942e3cc0a6e.png 1024w"
loading="lazy"
alt="image-20250411095123482"
class="gallery-image"
data-flex-grow="379"
data-flex-basis="911px"
>&lt;/p>
&lt;p>操作系统层面的条件变量（如 &lt;code>pthread_cond_wait&lt;/code>）在实现上可能因某些原因（如信号中断或内核调度）导致线程被&lt;strong>意外唤醒&lt;/strong>，即使没有其他线程显式调用 &lt;code> pthread_cond_signal&lt;/code>。即 &lt;strong>伪唤醒&lt;/strong>&lt;/p>
&lt;p>在上面代码就会导致一个问题，同时唤醒的生产者/消费者线程可能不止一个。&lt;/p>
&lt;p>如下图：假设a是被正常唤醒，b，c是伪唤醒&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411100504333.png"
width="1231"
height="649"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411100504333_hu_b9967a1cf72da41e.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411100504333_hu_1c2e3a2abe153c49.png 1024w"
loading="lazy"
alt="image-20250411100504333"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>使用while循环后，伪唤醒的b还会先判断以下&lt;code> q_.size() == maxcap_&lt;/code>&lt;/p>
&lt;h2 id="锁-">锁 *
&lt;/h2>&lt;h3 id="锁的种类">锁的种类
&lt;/h3>&lt;h4 id="互斥锁和自旋锁">互斥锁和自旋锁
&lt;/h4>&lt;p>&lt;strong>互斥锁和自旋锁是并发编程中最基础的两种锁&lt;/strong>，其核心区别在于&lt;strong>等待锁时的行为&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>互斥锁&lt;/strong>：通过&lt;strong>休眠&lt;/strong>让出CPU，减少资源占用，但引入上下文切换开销&lt;/li>
&lt;li>&lt;strong>自旋锁&lt;/strong>：通过&lt;strong>忙等待&lt;/strong>避免切换，适合短临界区，但可能浪费CPU周期&lt;/li>
&lt;/ul>
&lt;p>互斥锁加锁失败时，会从用户态陷入到内核态，让内核帮我们切换线程，虽然简化了使用锁的难
度，但是存在一定的性能开销成本。
那这个开销成本是什么呢？会有两次线程上下文切换的成本：
·当线程加锁失败时，内核会把线程的状态从「运行」状态设置为「睡眠」状态，然后把CPU切换给其
他线程运行；
·接着，当锁被释放时，之前「睡眠」状态的线程会变为「就绪」状态，然后内核会在合适的时间，把
CPU 切换给该线程运行。&lt;/p>
&lt;h4 id="读写锁">读写锁
&lt;/h4>&lt;p>读写锁由两把锁组成，读锁和写锁。它的应用场景：&lt;strong>能明确区分读操作和写操作，且读操作 多于 写操作&lt;/strong>。&lt;/p>
&lt;h3 id="死锁-">死锁 *
&lt;/h3>&lt;p>什么是死锁？比如当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成两个线程都在等待对方释放锁，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了死锁。&lt;/p>
&lt;p>&lt;strong>死锁有四个必要条件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>互斥条件&lt;/strong>：多个线程不能同时使用同一个资源。&lt;/li>
&lt;li>&lt;strong>请求与保持条件&lt;/strong>：线程因请求资源而阻塞时，对已获得的资源保持不放&lt;/li>
&lt;li>&lt;strong>不剥夺条件&lt;/strong>：线程已获得的资源，在末使用完之前，不能强行剥夺&lt;/li>
&lt;li>&lt;strong>循环等待条件&lt;/strong>：多个线程之间形成一种头尾相接的循环等待资源的关系&lt;/li>
&lt;/ul>
&lt;p>如何破坏死锁？打破4个条件的其中一个就行，最常见的就是打破&lt;strong>循环等待条件&lt;/strong>，核心就是理清&lt;strong>资源的获取和释放顺序&lt;/strong>。&lt;/p></description></item></channel></rss>