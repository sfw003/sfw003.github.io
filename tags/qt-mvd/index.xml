<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Qt MVD on 石某人</title><link>https://sfw003.github.io/tags/qt-mvd/</link><description>Recent content in Qt MVD on 石某人</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>石某人</copyright><lastBuildDate>Fri, 04 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sfw003.github.io/tags/qt-mvd/index.xml" rel="self" type="application/rss+xml"/><item><title>【Qt MVC】model-view-delegate</title><link>https://sfw003.github.io/p/qt-mvc/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-mvc/</guid><description>&lt;h2 id="mvc">MVC
&lt;/h2>&lt;p>模型-视图-控制(MVC) 是源自 Smalltalk 的一种设计模式,在构建用户界面时经常使用。用于将应用程序的数据、逻辑和界面分离，以提高代码可读性、可维护性和可扩展性&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MVC 框架由三个对象组成:&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>Model (模型) : 负责存储和处理数据，通常与数据库进行交互。模型表示应用程序的核心逻辑,例如数据结构、数据处理和存储等&lt;/li>
&lt;li>View (视图) ：负责显示数据，将模型中的数据可视化。视图是用户与系统交互的接口,通常包括图形用户界面 GUI 或者网页&lt;/li>
&lt;li>Controller (控制器 ） : 负责接收用户输入，处理用户请求，并更新模型和视图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/ZBUICBIAEM.png"
width="593"
height="336"
srcset="https://sfw003.github.io/p/qt-mvc/image/ZBUICBIAEM_hu_5daf3b18062ef567.png 480w, https://sfw003.github.io/p/qt-mvc/image/ZBUICBIAEM_hu_95be9bc04bb0448f.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;h2 id="qt-model-view">QT Model-View
&lt;/h2>&lt;p>在Qt中，Model-View是一种设计模式，用于将数据（Model）与其可视化表示（View）分离，使得程序更加模块化、可扩展和易于维护。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Model/View 框架主要包括以下三个组件&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>Model：模型是数据的抽象表示，它负责存储和管理数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>模型通常从底层数据源（如数据库、文件或数据结构）获取数据，并将其呈现给视图。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>View : 视图是数据的可视化表示，它负责呈现模型中的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>视图可以有多种形式，如表格、列表、树状结构等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>Delegate : 委托负责处理数据的显示和编辑。委托可以自定义单元格的渲染方式，以及将用户输入的数据写回模型&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>如果用户没有设置委托，则使用默认委托&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/CNWIIBIATQ.png"
width="389"
height="370"
srcset="https://sfw003.github.io/p/qt-mvc/image/CNWIIBIATQ_hu_135e5cf80bee8bc7.png 480w, https://sfw003.github.io/p/qt-mvc/image/CNWIIBIATQ_hu_f3d26aa16890443c.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;h3 id="view">View
&lt;/h3>&lt;p>在 Qt 内部实现了多个可以支持 Model/View 的视图,具体如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>视图名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>QListView&lt;/td>
&lt;td>用于显示单列的列表数据，适用于一维数据的操作&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/CF3YIBIAFM.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QTreeView&lt;/td>
&lt;td>用于显示树状结构数据，适用于树状结构数据的操作&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/AB4IIBIBJM.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QTableView&lt;/td>
&lt;td>用于显示表格状数据，适用于二维表格型数据的操作&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/EN4IIBIADI.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QColumnView&lt;/td>
&lt;td>用于多个QListView显示树状层次结构，树状结构的一层用一个QListView显示。&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/KF4IIBIAQQ.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>它们的继承关系如下图。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/4Z6IIBIATQ.png"
width="1124"
height="458"
srcset="https://sfw003.github.io/p/qt-mvc/image/4Z6IIBIATQ_hu_6f611430ed07ae8d.png 480w, https://sfw003.github.io/p/qt-mvc/image/4Z6IIBIATQ_hu_e50e4df0b12c1825.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="588px"
>&lt;/p>
&lt;h3 id="自定义view">自定义View
&lt;/h3>&lt;h3 id="model">Model
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>QStandardItemModel&lt;/td>
&lt;td>1.通用的数据模型类，可以存储各种类型的数据（如列表、树形结构、表格等）2.是 QAbstractItemModel 的子类，提供了一组用于管理数据项（如添加、删除、修改等）的便捷方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QStringListModel&lt;/td>
&lt;td>1.用于存储字符串列表的数据模型类，2.是 QAbstractListModel 的子类，可以方便地管理字符串列表（如添加、删除、修改等3.适用于需要展示和操作字符串列表的场景，如列表框、下拉框&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QFileSystemModel&lt;/td>
&lt;td>用于访问文件系统的数据模型类是 QAbstractItemModel 的子类,可以表示文件系统的目录结构和文件信息适用于需要浏览和操作文件系统的场景，如文件选择器、文件管理器等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QSqlTableModel&lt;/td>
&lt;td>一个用于访问 SQL 数据库的数据模型类是 QAbstractTableModel 的子类,可以表示 SQL 数据库中的表格数据QSqlTableModel 提供了一组用于查询、插入、更新和删除数据库记录的方法。它适用于需要与 SQL 数据库交互的场景。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QSqlRelationalTableModel&lt;/td>
&lt;td>用于访问带有关系的 SQL 数据库的数据模型类是 QSqlTableModel 的子类，可以表示 SQL 数据库中的关系表格数据QSqlRelationalTableModel 提供了一组用于处理关系字段（如外键）的方法。适用于需要表示和操作关系数据库的场景。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QSortFilterProxyModel&lt;/td>
&lt;td>代理模型类，用于对其他模型数据进行排序和过滤是 QAbstractProxyModel 的子类,可以作为其他模型（如上述内置模型）的代理，对数据进行排序和过滤QSortFilterProxyModel 适用于需要对数据进行排序和过滤的场景，如表格视图、树形视图等&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/MMRZGBIAHI.png"
width="1327"
height="731"
srcset="https://sfw003.github.io/p/qt-mvc/image/MMRZGBIAHI_hu_6dfec354ff1dd4e1.png 480w, https://sfw003.github.io/p/qt-mvc/image/MMRZGBIAHI_hu_9f512f3c00b0870d.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;h4 id="model索引">Model索引
&lt;/h4>&lt;p>所有的模型都是统一通过模型索引来访问数据，它用于表示数据模型中特定数据项的位置
模型索引由&lt;strong>QModellndex&lt;/strong>类来表示，包含了一个数据项的行、列和父索引信息
关于QModellndex类一些主要特性如下：&lt;/p>
&lt;ul>
&lt;li>行和列：QModellndex包含一个数据项在模型中的行和列信息&lt;/li>
&lt;li>父索引：QModellndex还包含一个父索引l，表示数据项的父项，对于树形结构的模型（如QStandardltemModel或QFileSystemModel特别有用&lt;/li>
&lt;li>有效性：QModellndex可以是有效或无效的。有效索引表示模型中实际存在的数据项，而无效索引表示一个空或未定义的位置&lt;/li>
&lt;li>数据访问：通过模型索引，可以访问和操作模型中的数据&lt;/li>
&lt;li>模型指针：QModellndex包含一个指向其所属模型的指针&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/3LSJGBIAH4.png"
width="721"
height="370"
srcset="https://sfw003.github.io/p/qt-mvc/image/3LSJGBIAH4_hu_c6e4ef9674c71418.png 480w, https://sfw003.github.io/p/qt-mvc/image/3LSJGBIAH4_hu_97e33c2f13850eca.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>获取索引的函数是index，它在这一层定义&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/image-20241130103502653.png"
width="1053"
height="84"
srcset="https://sfw003.github.io/p/qt-mvc/image/image-20241130103502653_hu_5d40cf61f51a9baa.png 480w, https://sfw003.github.io/p/qt-mvc/image/image-20241130103502653_hu_987656470be95d72.png 1024w"
loading="lazy"
alt="image-20241130103502653"
class="gallery-image"
data-flex-grow="1253"
data-flex-basis="3008px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QAbstracTableMode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">QModelIndex&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">column&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QModelIndex&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QModelIndex&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">override&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/image-20241130102827271.png"
width="954"
height="614"
srcset="https://sfw003.github.io/p/qt-mvc/image/image-20241130102827271_hu_1c80d29eebde69a7.png 480w, https://sfw003.github.io/p/qt-mvc/image/image-20241130102827271_hu_d436540a77b55d2a.png 1024w"
loading="lazy"
alt="image-20241130102827271"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;h4 id="自定义model">自定义Model
&lt;/h4>&lt;p>系统的标准模型(QStandardltemModel）主要支持字符串与图标(Qlcon)，对于其他类型支持能力较弱
如果需要显示自定义数据结构，则更好的方式是采用自定义模型，同时对于大量数据的处理，自定义数据模型可以实现数据的按需加载、缓存等策略，以提高视图的性能。&lt;/p>
&lt;p>自定义模型基本实现思路：&lt;/p>
&lt;ul>
&lt;li>明确自定义模型需要处理的数据结构和特点，如树形结构，列表或者表格&lt;/li>
&lt;li>根据数据结构的特点，选择合适的基类，下面列举了相应的数据类型对应的比较合适的基类&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数据结构类型&lt;/th>
&lt;th>自定义模型基类&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>表格&lt;/td>
&lt;td>QAbstractTableModel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>列表&lt;/td>
&lt;td>QAbstractListModel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>通用&lt;/td>
&lt;td>QAbstractItemModel&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>继承这些模型后，需要实现以下函数（不同的模型实现的函数不同）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法原型&lt;/th>
&lt;th>方法描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>int rowCount(const QModelIndex&amp;amp; parent) const&lt;/strong>&lt;/td>
&lt;td>返回数据模型的行数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>int columnCount(const QModelIndex&amp;amp; parent = QModelIndex())&lt;/strong>&lt;/td>
&lt;td>返回数据模型的列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>QVariant data(const QModelIndex&amp;amp; index, int role = Qt::DisplayRole) const ;&lt;/strong>&lt;/td>
&lt;td>返回指定数据模型中指定单元格数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole&lt;/td>
&lt;td>返回表头数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool setData(const QModelIndex &amp;amp;index, const QVariant &amp;amp;value, int role = Qt::EditRole);&lt;/td>
&lt;td>设置指定索引的项的数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QModelIndex index(int row, int column, const QModelIndex &amp;amp;parent = QModelIndex()) const;&lt;/td>
&lt;td>返回给定行和列的项的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QModelIndex parent(const QModelIndex &amp;amp;child) const;&lt;/td>
&lt;td>返回给定子项的父项的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Qt::ItemFlags flags(const QModelIndex &amp;amp;index) const;&lt;/td>
&lt;td>返回给定索引的项的标志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool insertRows(int row, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>在给定位置插入指定数量的行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool removeRows(int row, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>从给定位置移除指定数量的行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool insertColumns(int column, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>在给定位置插入指定数量的列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool removeColumns(int column, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>从给定位置移除指定数量的列&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中最重要的是&lt;/p>
&lt;p>&lt;code>QVariant data(const QModelIndex&amp;amp; index, int role = Qt::DisplayRole) const ; &lt;/code>&lt;/p>
&lt;ul>
&lt;li>index 是索引&lt;/li>
&lt;li>role则是角色说明，Qt里有自带的角色说明
&lt;ul>
&lt;li>DisplayRole (0)，这是最基本的角色，通常用来显示文本内容&lt;/li>
&lt;li>DecorationRole (1)，通常用来显示图标或图片&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>如果是自定义Model, 最好使用自定义.&lt;/p>
&lt;p>数据的更改和增加，可以使用bool insertColumns(int column, int count, const QModelIndex &amp;amp;parent = QModelIndex()); 。。。&lt;/p>
&lt;p>简易使用自定义函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 添加一个新的笔画
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">StrokeModel&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">addStroke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">StrokeData&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">stroke&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知视图即将插入新行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">beginInsertRows&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QModelIndex&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建新的笔画数据，使用当前样式和时间戳
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">StrokeData&lt;/span> &lt;span class="n">newStroke&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stroke&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newStroke&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">style&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m_currentStyle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newStroke&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QDateTime&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentMSecsSinceEpoch&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newStroke&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 添加到笔画列表中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 通知视图插入完成
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">endInsertRows&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">emit&lt;/span> &lt;span class="nf">strokeAdded&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 发射笔画添加信号，处理handwriteview的按钮更新
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用自定义函数就需要关注：&lt;strong>通知&lt;/strong>&lt;/p>
&lt;p>beginRemoveRows 和 endRemoveRows 主要用于通知视图模型的结构变化（即行的添加或删除）&lt;/p>
&lt;p>这对函数主要影响视图的行管理，比如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>更新视图的行数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新行的索引&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新视图的滚动范围等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>dataChanged 信号用于通知视图数据内容的变化&lt;/p>
&lt;p>这个信号会触发视图的重绘操作&lt;/p>
&lt;p>它告诉视图：&amp;ldquo;这些数据已经改变，你需要重新绘制它们&lt;/p>
&lt;h3 id="delegate">Delegate
&lt;/h3>&lt;p>Qt Delegate 负责数据的编辑和渲染。当用户需要编辑数据时，Delegate负责提供编辑器，同时负责将编辑后的数据写回Model&lt;/p>
&lt;p>Qt 内置支持 MVD 模式的组件都是支持 QTableView,QTreeView 都支持默认委托,用于基本数据类型的渲染,包括文本、数字和图像，还有默认编辑组件 QLineEdit&lt;/p>
&lt;p>默认委托是由 ﻿QStyledItemDelegate 类来进行过描述,继承于QAbstractItemDelegate&lt;/p>
&lt;p>当遇到单元格的内容非文本，数字和图像等基本数据类型，则应该考虑自定义 Delegate,如下面应用场景&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/HOHJMBIAGE.png"
width="1616"
height="340"
srcset="https://sfw003.github.io/p/qt-mvc/image/HOHJMBIAGE_hu_a848bfe585f6501a.png 480w, https://sfw003.github.io/p/qt-mvc/image/HOHJMBIAGE_hu_ddef277a51253473.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="475"
data-flex-basis="1140px"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>委托类名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>父类&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>QItemDelegate&lt;/td>
&lt;td>基本的委托类，提供默认的渲染和编辑功能&lt;/td>
&lt;td>QAbstractItemDelegate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QStyledItemDelegate&lt;/td>
&lt;td>继承自 QItemDelegate，提供更好的样式支持和性能&lt;/td>
&lt;td>QItemDelegate&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;img src="image/SQKKGBI2ADQF6.png" alt="img" style="zoom:67%;" />
&lt;h4 id="自定义delegate">自定义Delegate
&lt;/h4>&lt;p>在实现自定义 Delegate 主要方式就是选择合适的 Delegate 基类，并重写实现相应的方法,这里一般选择 QStyledItemDelegate作为基类&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>virtual QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &amp;amp;option, const QModelIndex &amp;amp;index) const&lt;/th>
&lt;th>自定义单元格编辑器组件&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>*&lt;em>virtual void paint(QPainter &lt;em>painter, const QStyleOptionViewItem &amp;amp;option, const QModelIndex &amp;amp;index) const = 0&lt;/em>&lt;/em>&lt;/td>
&lt;td>自定义组件绘制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>virtual void setEditorData(QWidget *editor, const QModelIndex &amp;amp;index) const&lt;/td>
&lt;td>将模型数据设置到编辑器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>virtual void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &amp;amp;index) const&lt;/td>
&lt;td>将编辑后的数据设置到模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>virtual void updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &amp;amp;option, const QModelIndex &amp;amp;index) const&lt;/td>
&lt;td>自定义编辑器的几何位置&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>