<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux进程间通信 on 石某人</title><link>https://sfw003.github.io/tags/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link><description>Recent content in Linux进程间通信 on 石某人</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>石某人</copyright><lastBuildDate>Thu, 03 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sfw003.github.io/tags/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 进程间通信</title><link>https://sfw003.github.io/p/linux-process-communication/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-process-communication/</guid><description>&lt;p>绘图文件，在&lt;a class="link" href="https://sfw003.github.io/p/linux-series/#linux进程管理" >linux系列文章:进程管理&lt;/a>&lt;/p>
&lt;h2 id="进程间通信">进程间通信
&lt;/h2>&lt;blockquote>
&lt;p>进程间通信（Inter-Process Communication，IPC）是指在操作系统中，不同的进程之间进行数据交换、信息传递和同步操作的机制。在多任务操作系统中，不同的进程可能同时运行，它们之间可能需要进行数据共享、协作完成某项任务等操作，这就需要进程间通信。
进程间通信目的：&lt;/p>
&lt;ol>
&lt;li>数据传输：一个进程需要将它的数据发送给另一个进程&lt;/li>
&lt;li>资源共享：多个进程之间共享同样的资源。&lt;/li>
&lt;li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。&lt;/li>
&lt;li>进程控制：有些进程希望完全控制另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>如何理解进程间通信：&lt;strong>本质是让不同的进程看到同一份资源&lt;/strong>。&lt;/p>
&lt;ol>
&lt;li>那如何让不同进程看到同一份资源呢？&lt;/li>
&lt;li>资源又是什么呢？&lt;/li>
&lt;/ol>
&lt;p>怀着这2个问题，我们来看看进程通信模块：
一般操作系统会有一个独立的通信模块，隶属于文件系统, 即IPC通信模块。
在linux内核刚被设计时，不支持通信，后来发现通信很重要，于是很多开发人员开始设计通信模块。当时的设计一个通信模块并不难，很多人提出了不同设计思路，谁也不服谁，为了统一，制定了标准。
最后落地了2套标准：system V &amp;amp;&amp;amp; posix&lt;/p>
&lt;p>进程间通信的分类：&lt;/p>
&lt;blockquote>
&lt;p>管道&lt;/p>
&lt;ol>
&lt;li>匿名管道pipe&lt;/li>
&lt;li>命名管道&lt;/li>
&lt;/ol>
&lt;p>System V IPC&lt;/p>
&lt;ol>
&lt;li>System V 消息队列&lt;/li>
&lt;li>System V 共享内存&lt;/li>
&lt;li>3 .System V 信号量&lt;/li>
&lt;/ol>
&lt;p>POSIX IPC&lt;/p>
&lt;ol>
&lt;li>消息队列&lt;/li>
&lt;li>共享内存&lt;/li>
&lt;li>信号量&lt;/li>
&lt;li>互斥量&lt;/li>
&lt;li>条件变量&lt;/li>
&lt;li>读写锁&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h2 id="管道">管道
&lt;/h2>&lt;p>在使用linux命令时，常常需要使用管道&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ps aux &lt;span class="p">|&lt;/span> grep name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的&lt;code>丨&lt;/code>竖线就是一个管道，它的功能是将前一个命令的输出，作为后一个命令的输入，采用FIFO（先进先出）的传输方式。&lt;/p>
&lt;p>这种管道没有名字，称为&lt;strong>匿名管道&lt;/strong>&lt;/p>
&lt;p>有了匿名管道，那肯定还有&lt;strong>命名管道&lt;/strong>。命名管道通过&lt;code>mkfifo&lt;/code>来创建&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mkfifo name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="匿名管道">匿名管道
&lt;/h3>&lt;p>匿名管道是如何创建的呢？这涉及到一个系统调用：pipe&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="err">功能&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">创建管道&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">原型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pipefd&lt;/span>&lt;span class="err">：文件描述符数组&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">输出型参数，其中&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">存放读端的文件描述符&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">存放读端的文件描述符&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">返回值&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">成功返回&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">，失败返回错误代码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>管道通常是&lt;strong>单向通信&lt;/strong>，主要是为了简化设计。如果要进行双向通信，那就创造两个管道。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91.png"
width="531"
height="638"
srcset="https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91_hu_966c08cf36ab7829.png 480w, https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91_hu_84a82c9a7f6451b2.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="199px"
>&lt;/p>
&lt;p>案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cassert&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建管道，让父进程写，子进程读
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//子进程 -- 读取管道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="c1">//关闭写端,留下读端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//……子进程接受数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//父进程 -- 写入管道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="c1">//关闭读端，留下写端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//……父进程写入数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="命名管道">命名管道
&lt;/h3>&lt;h3 id="理解管道">理解管道
&lt;/h3>&lt;p>linux下一切皆文件，管道能读能写，肯定是一种文件。一般情况下，进程管理文件如下图。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723.png"
width="719"
height="256"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723_hu_6ecd350cf21aef45.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723_hu_5bc3a31a3e4d0dfc.png 1024w"
loading="lazy"
alt="image-20250410161331723"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="674px"
>&lt;/p>
&lt;blockquote>
&lt;p>这里内核缓存区到外存，要通过页表，到物理内存，在通过DMA写入外存。&lt;/p>&lt;/blockquote>
&lt;p>管道不同于上面的形式，&lt;strong>它是一种内存级别的文件，本质就是内核里面的一串缓存&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338.png"
width="676"
height="481"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338_hu_f3a6e333b57a7ac2.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338_hu_3ae4f80a2b888aab.png 1024w"
loading="lazy"
alt="image-20250410161310338"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;h2 id="共享内存">共享内存
&lt;/h2>&lt;p>听名字就懂了，具体原理：拿出一块虚拟地址空间来，映射到相同的物理内存中。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482.png"
width="551"
height="551"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482_hu_4ab6cbca5c590b6c.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482_hu_1186a27661ddb0d5.png 1024w"
loading="lazy"
alt="image-20250410163312482"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h2 id="套接字socket">套接字（socket）
&lt;/h2></description></item></channel></rss>