<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>石某人</title><link>https://sfw003.github.io/</link><description>Recent content on 石某人</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>石某人</copyright><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sfw003.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>网站内容概述</title><link>https://sfw003.github.io/p/blog-overview/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/blog-overview/</guid><description>&lt;h2 id="网站概览">网站概览
&lt;/h2></description></item><item><title>数据结构与算法</title><link>https://sfw003.github.io/p/data-structures-and-algorithms/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/data-structures-and-algorithms/</guid><description>&lt;p>数据结构和算法系列，在个人的gitee仓库
&lt;a class="link" href="https://gitee.com/sfw003/data-structures-and-algorithms" target="_blank" rel="noopener"
>数据结构和算法&lt;/a>&lt;/p></description></item><item><title>C++ 开发系列</title><link>https://sfw003.github.io/p/c-series/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/c-series/</guid><description>&lt;h2 id="系列介绍">系列介绍
&lt;/h2>&lt;p>本系列文章将带您从零开始学习 C++ 开发，涵盖从基础概念到高级应用的各个方面。无论您是编程新手还是有一定经验的开发者，都能在这里找到适合自己的学习路径。&lt;/p>
&lt;h2 id="文章列表">文章列表
&lt;/h2>&lt;h3 id="c-标准">C++ 标准
&lt;/h3>&lt;p>绘图文件，在&lt;a class="link" href="c&amp;#43;&amp;#43;%e6%a0%87%e5%87%86.drawio" >c++标准.drawio&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/compile-and-link/" >C++ 编译和链接&lt;/a> - C++ 编译和链接&lt;/li>
&lt;/ul></description></item><item><title>软件工程系列文章</title><link>https://sfw003.github.io/p/soft-project-series/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-series/</guid><description>&lt;h2 id="系列介绍">系列介绍
&lt;/h2>&lt;p>本系列文章将带您从零开始学习软件工程，涵盖从基础概念到高级应用的各个方面。无论您是编程新手还是有一定经验的开发者，都能在这里找到适合自己的学习路径。&lt;/p>
&lt;h2 id="文章列表">文章列表
&lt;/h2>&lt;h3 id="软件工程">软件工程
&lt;/h3>&lt;h3 id="需求">需求
&lt;/h3>&lt;h3 id="设计">设计
&lt;/h3>&lt;h3 id="测试">测试
&lt;/h3>&lt;h3 id="运维">运维
&lt;/h3></description></item><item><title>后端开发系列</title><link>https://sfw003.github.io/p/backend-development-series/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/backend-development-series/</guid><description>&lt;p>笔者想建立自己的后端技能树，以并发量的增长为线索，构建后端开发技能树。&lt;/p>
&lt;h2 id="单机架构">单机架构
&lt;/h2>&lt;p>这里先介绍单机架构是什么？&lt;/p>
&lt;h3 id="基础">基础
&lt;/h3>&lt;p>刚开始，需要做一个简单的服务器，因此首要任务是做出一个简单的服务器。&lt;/p>
&lt;p>技能：&lt;/p>
&lt;ol>
&lt;li>网络编程: 使用socket编程, 熟悉TCP/IP协议, 熟悉HTTP/HTTPS协议&lt;/li>
&lt;li>数据库: 看懂sql语句，知道如何使用语言的api操作数据库&lt;/li>
&lt;li>测试： 知道如何进行单元测试、集成测试、压力测试&lt;/li>
&lt;li>运维： 知道如何部署服务器，如何配置服务器，如何监控服务器&lt;/li>
&lt;/ol>
&lt;h3 id="进阶">进阶
&lt;/h3>&lt;p>由于经济条件不允许，只能使用一台服务器，现在并发量增长，如何对一台服务器进行优化，提高并发量？&lt;/p>
&lt;p>技能：&lt;/p>
&lt;ol>
&lt;li>多线程： 熟悉多线程编程，熟悉线程池，熟悉线程安全&lt;/li>
&lt;li>高级IO（IO多路复用, 异步IO, 零拷贝）&lt;/li>
&lt;li>高性能网络模式（Reactor, Proactor）&lt;/li>
&lt;li>数据库：索引优化&lt;/li>
&lt;/ol>
&lt;h2 id="应用数据分离架构">应用数据分离架构
&lt;/h2>&lt;h2 id="应用服务集群架构">应用服务集群架构
&lt;/h2>&lt;p>我们的系统受到了用户的欢迎，并且出现了爆款，单台应用服务器已经无法满足需求了。我们的单机应用服务器首先遇到了瓶颈，摆在我们技术团队面前的有两种方案，大家针对方案的优劣展示了热烈的讨论：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>垂直扩展/纵向扩展ScaleUp。通过购买性能更优、价格更高的应用服务器来应对更多的流量。这种方案的优势在于完全不需要对系统软件做任何的调整；但劣势也很明显：硬件性能和价格的增长关系是非线性的，意味着选择性能2倍的硬件可能需要花费超过4倍的价格，其次硬件性能提升是有明显上限的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>水平扩展/横向扩展ScaleOut。通过调整软件架构，增加应用层硬件，将用户流量分担到不同的应用层服务器上，来提升系统的承载能力。这种方案的优势在于成本相对较低，并且提升的上限空间也很大。但劣势是带给系统更多的复杂性，需要技术团队有更丰富的经验。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>如果采用水平扩展，技能要求：负载均衡&lt;/p>
&lt;ol>
&lt;li>负载均衡： 熟悉负载均衡的原理，熟悉负载均衡的算法，熟悉负载均衡的实现&lt;/li>
&lt;li>服务注册与发现：etcd&lt;/li>
&lt;li>集群间通信：grpc， protobuf&lt;/li>
&lt;li>配置中心&lt;/li>
&lt;li>会话管理：由session管理变为token管理&lt;/li>
&lt;li>发布策略
&lt;ul>
&lt;li>灰度发布（金丝雀发布）&lt;/li>
&lt;li>蓝绿发布&lt;/li>
&lt;li>滚动发布&lt;/li>
&lt;li>版本控制&lt;/li>
&lt;li>自动化发布&lt;/li>
&lt;li>回滚机制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="读写分离主从分离架构">读写分离/主从分离架构
&lt;/h2>&lt;p>随着访问量继续增加，发现业务中一些数据的读取频率远大于其他数据的读取频率。我们把这部分数据称为热点数据，与之相对应的是冷数据。针对热数据，为了提升其读取的响应时间，可以增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的html页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。其中涉及的技术包括：使用memcached作为本地缓存，使用Redis作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。&lt;/p>
&lt;p>技能：引入缓存&lt;/p>
&lt;ol>
&lt;li>redis: 熟悉redis的api，熟悉redis的持久化，熟悉redis的集群&lt;/li>
&lt;li>缓存一致性： 熟悉缓存一致性问题，熟悉缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题&lt;/li>
&lt;/ol>
&lt;h2 id="冷热分离架构">冷热分离架构
&lt;/h2>&lt;h2 id="微服务架构">微服务架构
&lt;/h2></description></item><item><title>Linux 系统系列文章</title><link>https://sfw003.github.io/p/linux-series/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-series/</guid><description>&lt;h2 id="文章列表">文章列表
&lt;/h2>&lt;h3 id="linux-常用命令">Linux 常用命令
&lt;/h3>&lt;h3 id="linux进程管理">Linux进程管理
&lt;/h3>&lt;p>绘制文件：&lt;a class="link" href="linux%e8%bf%9b%e7%a8%8b%e7%ae%a1%e7%90%86.drawio" >linux进程管理.drawio&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/linux-process/" >Linux 进程&lt;/a> - Linux 进程管理&lt;/li>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/linux-process-communication/" >Linux 进程间通信&lt;/a> - Linux 进程间通信&lt;/li>
&lt;/ul>
&lt;h3 id="linux-文件系统">Linux 文件系统
&lt;/h3></description></item><item><title>Qt 开发系列</title><link>https://sfw003.github.io/p/qt-series/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-series/</guid><description>&lt;h2 id="系列介绍">系列介绍
&lt;/h2>&lt;p>本系列文章将带您从零开始学习 Qt 开发，涵盖从基础概念到高级应用的各个方面。无论您是编程新手还是有一定经验的开发者，都能在这里找到适合自己的学习路径。&lt;/p>
&lt;p>绘图文件，在&lt;a class="link" href="qt.drawio" >qt.drawio&lt;/a>&lt;/p>
&lt;h2 id="文章列表">文章列表
&lt;/h2>&lt;h3 id="qt-环境搭建">Qt 环境搭建
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/qt-env-setup-01/" >Qt 的安装与环境配置&lt;/a> - 搭建 Qt 开发环境&lt;/li>
&lt;/ul>
&lt;h3 id="qt-core">Qt Core
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/qt-core_02_container_and_algorithm/" >Qt Core 02 容器类和算法 &lt;/a> - Qt 核心概念与基础功能&lt;/li>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/qt-core_03_event_mechanism/" >Qt Core 03 事件机制&lt;/a> - 事件机制&lt;/li>
&lt;/ul>
&lt;h3 id="qt-gui">Qt GUI
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/" >Qt GUI 01 Qt 绘图框架&lt;/a> - Qt 绘图框架&lt;/li>
&lt;/ul>
&lt;h3 id="qt-widgets">Qt Widgets
&lt;/h3>&lt;h2 id="资源推荐">资源推荐
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://doc.qt.io/" target="_blank" rel="noopener"
>Qt 官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://doc.qt.io/qt-6/examples.html" target="_blank" rel="noopener"
>Qt 示例程序&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://forum.qt.io/" target="_blank" rel="noopener"
>Qt 论坛&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.qtcn.org/" target="_blank" rel="noopener"
>Qt 中文社区&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="更新计划">更新计划
&lt;/h2>&lt;p>本系列文章会持续更新，计划包含以下内容：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Qt 网络编程&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Qt 数据库操作&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Qt 项目实战&lt;/li>
&lt;/ul>
&lt;p>欢迎关注本系列文章的更新，也欢迎在评论区提出建议和问题。&lt;/p></description></item><item><title>个人项目</title><link>https://sfw003.github.io/p/project-dic/</link><pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/project-dic/</guid><description>&lt;p>存放个人项目&lt;/p></description></item><item><title>C++11</title><link>https://sfw003.github.io/p/c-11/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/c-11/</guid><description>&lt;h2 id="c11简介">C++11简介
&lt;/h2>&lt;p>在2003年C++标准委员会曾经提交了一份技术勘误表(简称TC1)，使得C++03这个名字已经取代了C++98称为C++11之前的最新C++标准名称。不过由于C++03(TC1)主要是对C++98标准中的漏洞进行修复，语言的核心部分则没有改动，因此人们习惯性的把两个标准合并称为C++98/03标准。从C++0x到C++11，C++标准10年磨一剑，第二个真正意义上的标准珊珊来迟。相比于C++98/03，C++11则带来了数量可观的变化，其中包含了约140个新特性，以及对C++03标准中约600个缺陷的修正，这使得C++11更像是从C++98/03中孕育出的一种新语言。相比较而言C++11能更好地用于系统开发和库开发、语法更加泛华和简单化、更加稳定和安全，不仅功能更强大，而且能提升程序员的开发效率，公司实际项目开发中也用得比较多，所以我们要作为一个重点去学习。C++11增加的语法特性非常篇幅非常多，这里挑重点介绍。&lt;/p>
&lt;p>面试常问：你了解c++11的新特性吗？说一下你的看法&lt;/p>
&lt;p>回答思路：&lt;/p>
&lt;ol>
&lt;li>首先说一下有哪些新特性&lt;/li>
&lt;li>然后再问面试官需要详细说说哪些特性&lt;/li>
&lt;/ol>
&lt;h2 id="统一的初始化列表">统一的初始化列表
&lt;/h2>&lt;h3 id="初始化">{}初始化
&lt;/h3>&lt;p>在C++98中，标准允许使用花括号{}对数组或者结构体元素进行统一的列表初始值设定。比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">array1&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">array2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>C++11扩大了用大括号括起的列表(初始化列表)的使用范围，使其可用于所有的内置类型和用户自定义的类型，&lt;strong>使用初始化列表时，可添加等号(=)，也可不添加&lt;/strong>。、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Date&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">year&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">month&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">_year&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">year&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">_month&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">month&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">_day&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">day&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Date(int year, int month, int day)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_year&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_month&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_day&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">array1&lt;/span>&lt;span class="p">[]{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">array2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Point&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// C++11中列表初始化也可以适用于new表达式中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Date&lt;/span> &lt;span class="n">d1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2022&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// C++11支持的列表初始化，这里会调用构造函数初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">d2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2022&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Date&lt;/span> &lt;span class="n">d3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">2022&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>记录一个事例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//我想创建一个匿名对象, 但是编译器认为这可能是一个函数声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="p">};&lt;/span>&lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="stdinitializer_list">std::initializer_list
&lt;/h3>&lt;p>std::initializer_list 是 C++11 中的一个特性，它允许你使用花括号 {} 中的值列表来初始化容器或数组。通常用于初始化标准库容器，比如 std::list、std::vector、std::set、std::map 以及数组， 也可以用于包含容器成员的自定义类。
当使用花括号初始化语法时，编译器会生成一个 &lt;code>std::initializer_list&lt;/code> 对象。这个对象内部实际上包含两个指针：一个指向数组（或类似数组的结构）的开始位置，另一个指向结束位置（即下一个元素的起始位置，但不包括该位置）。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/c-11/image/b85d97071a5f4344b13ed5cd404c5bd4.png"
width="1461"
height="402"
srcset="https://sfw003.github.io/p/c-11/image/b85d97071a5f4344b13ed5cd404c5bd4_hu_caadddcaeb4c1935.png 480w, https://sfw003.github.io/p/c-11/image/b85d97071a5f4344b13ed5cd404c5bd4_hu_2ed8cd836ad9894.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="363"
data-flex-basis="872px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里{&amp;#34;sort&amp;#34;, &amp;#34;排序&amp;#34;}会先初始化构造一个pair对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;sort&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;排序&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;insert&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;插入&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用大括号对容器赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="c11关键字">C++11关键字
&lt;/h2>&lt;h3 id="auto">auto
&lt;/h3>&lt;p>在C++98中auto是一个存储类型的说明符，表明变量是局部自动存储类型，但是局部域中定义局部的变量默认就是自动存储类型，所以auto就没什么价值了。C++11中废奔auto原来的用法，将其用于实现自动类型腿断。这样要求必须进行显示初始化，让编译器将定义对象的类型设置为初始化值的类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//auto 为int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">12.8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//auto 为double
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//auto 为int*
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>auto的特殊情况：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>auto 不能在函数的参数中使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>作用于类的成员变量,auto 不能作用于类的非静态成员变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>auto 关键字不能定义数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>auto不能用于模板&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vector&amp;lt;bool&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">var2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>std::vector&amp;lt;bool&amp;gt;&lt;/code> 的特殊性&lt;/p>
&lt;ul>
&lt;li>&lt;strong>位压缩&lt;/strong>：&lt;code>std::vector&amp;lt;bool&amp;gt;&lt;/code> 是一个特例，它使用位（bit）而不是字节（byte）来存储布尔值。这是为了节省内存，但它也意味着对 &lt;code>std::vector&amp;lt;bool&amp;gt;&lt;/code> 的访问与常规向量有所不同。&lt;/li>
&lt;li>&lt;strong>代理对象&lt;/strong>：访问 &lt;code>std::vector&amp;lt;bool&amp;gt;&lt;/code> 中的元素（例如 &lt;code>vec[3]&lt;/code>）返回一个临时的代理对象，而不是普通的 &lt;code>bool&lt;/code> 值。这是一个特殊的代理类型，用于提供对底层位的访问。它实际上并不是 &lt;code>bool&lt;/code> 的引用。&lt;/li>
&lt;/ul>
&lt;h3 id="decltype">decltype
&lt;/h3>&lt;p>decltype 是 C++11 新增的一个关键字，它和 auto 的功能一样，都用来在编译时期进行自动类型推导。它是declare type的缩写，主要功能用来声明类型auto并不适合于所有自动推导的类型，并且auto的使用必须要初始化变量。而特殊的情况可能无法满足。declart type就可以解决这个问题。它可以在编译的时候推导出一个表达式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//auto根据val的类型类推导，必须初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">varName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//decltype是根据exp表达式推导，可以不用初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">varname&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//b被推导成int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">10.8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">5.5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//x被推导成double
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//b被推导成double
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">使用场景：模板泛型编程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//auto + decltype结合实现返回值类型后置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">T2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">T2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">t1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">T2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">mul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">T2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">t1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">4.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.14&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 21.98
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="using">using
&lt;/h3>&lt;p>在老版的C++中using用于声明域名空间。在C++11中C++赋予了using更多新的功能，让C++变得更加灵活。&lt;/p>
&lt;p>C++中提供了using也有了重新定义类型别名的方式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">C&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="err">旧的类型名&lt;/span> &lt;span class="err">新的类型&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//使用例子：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">uint_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">funp&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">C&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="err">新的类型&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">旧的类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//例子:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">uint_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">funp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>using可以给&lt;strong>模板类&lt;/strong>重定义，但是typedef无法使用此功能。&lt;/li>
&lt;li>using更清晰&lt;/li>
&lt;/ul>
&lt;h3 id="nullptr">nullptr
&lt;/h3>&lt;p>nullptr是为了替换NULL而发明出来的。nullptr的类型为std::nullptr_t,而NULL的类型为int，可以防止一些类型转化导致的问题。如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">funTest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;void fun(char *p)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">funTest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;void fun(int p)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">funTest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">funTest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">funTest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//NULL底层实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#ifndef NULL
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#ifdef __cplusplus
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#define NULL 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#define NULL ((void *)0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//模拟nullptr底层实现（非官方)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="cm">/*常量*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">nullptr_t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">operator&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="cm">/*向任意类的非成员指针转换*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">operator&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">::*&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="cm">/*向任意类型的成员指针转换*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="cm">/*不可取地址*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="k">nullptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="default">default
&lt;/h3>&lt;p>用于生产默认的成员函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="delete">delete
&lt;/h3>&lt;p>禁止生成默认的成员函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="n">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">delete&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">禁止生成拷贝构造&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="orride">orride
&lt;/h3>&lt;p>c++11新增：用于明确指示派生类中的成员函数是对基类中的虚函数的重写。若没有对虚函数重写，会提示错误。一般子类写了override，就不用加virtual了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">pulic&lt;/span> &lt;span class="n">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="n">orride&lt;/span> &lt;span class="p">{};&lt;/span> &lt;span class="c1">//如果没实现，就报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="final">final
&lt;/h3>&lt;p>c++11新增：用于标记虚函数，表示该函数不能在派生类中再次被重写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">final&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">pulic&lt;/span> &lt;span class="n">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{};&lt;/span> &lt;span class="c1">//如果实现，就报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="explicit">explicit
&lt;/h3>&lt;p>c++11新增，禁止隐式类型转换&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="err">比如智能指针不允许将原始指针赋值给&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">原因是&lt;/span>&lt;span class="n">shared_ptr构造函数使用了explicit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">对于&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span> &lt;span class="err">来说，如果其构造函数不带&lt;/span> &lt;span class="k">explicit&lt;/span>&lt;span class="err">，那么像&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="err">这样的赋值就会被允许，编译器会尝试隐式将&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="err">类型转换为&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="constexpr-重要">constexpr (重要)
&lt;/h3>&lt;p>&lt;code>constexpr&lt;/code> 是 C++11 引入的关键字，用于指定表达式在&lt;strong>编译时&lt;/strong>求值。它允许在编译期对常量表达式进行计算，从而提高程序效率，并增加编译时类型检查的可能性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 编译期计算
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">runtimeResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 运行期计算
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">runtimeResult&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 编译期计算
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Square(10)&lt;/code> 被编译期求值，而 &lt;code>Square(y)&lt;/code> 则在运行时求值，因为 &lt;code>y&lt;/code> 是运行时变量。&lt;/p>
&lt;h2 id="右值引用-">右值引用 *
&lt;/h2>&lt;p>左值和右值：&lt;strong>左值可以出现赋值符号的左边，右值不能出现在赋值符号左边&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 以下几个都是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 以下几个都是常见的右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">纯右值：非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和&lt;/span> &lt;span class="n">lambda&lt;/span> &lt;span class="err">表达式等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">将亡值：与右值引用相关的表达式，比如，&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="err">类型函数的返回值、&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span> &lt;span class="err">的返回值等。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fmin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>C++98/03 标准中就有引用，使用 &amp;ldquo;&amp;amp;&amp;rdquo; 表示。但此种引用方式有一个缺陷，即正常情况下只能操作 C++ 中的左值，无法对右值添加引用。虽然 C++98/03 标准不支持为右值建立非常量左值引用，但允许使用常量左值引用操作右值。也就是说，常量左值引用既可以操作左值，也可以操作右值.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//true;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>左指引用的缺陷：当函数返回对象是一个局部变量，出了函数作用域就不存在了，就不能使用左值引用返回，只能传值返回，而传值返回&lt;strong>至少&lt;/strong>存在1次拷贝构造。&lt;/p>
&lt;p>为此，C++11 标准新引入了另一种引用方式，称为右值引用，用 &amp;ldquo;&amp;amp;&amp;amp;&amp;rdquo; 表示。&lt;/p>
&lt;p>&lt;strong>左值引用总结&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>左值引用只能引用左值，不能引用右值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>但是const左值引用既可引用左值，也可引用右值&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 左值引用只能引用左值，不能引用右值。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ra1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// ra为a的别名
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//int&amp;amp; ra2 = 10; // 编译失败，因为10是右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// const左值引用既可引用左值，也可引用右值。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ra3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ra4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>右值引用总结：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>右值引用只能右值，不能引用左值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>但是右值引用可以move以后的左值。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 右值引用只能右值，不能引用左值。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">r1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// error C2440: “初始化”: 无法从“int”转换为“int &amp;amp;&amp;amp;”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// message : 无法将左值绑定到右值引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">r2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 右值引用可以引用move以后的左值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">r3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="完美转发">完美转发
&lt;/h3>&lt;p>&lt;strong>完美转发&lt;/strong>（Perfect Forwarding）是 C++11 引入的一种机制，它允许函数在调用其他函数时，能够&lt;strong>完美保留&lt;/strong>传入参数的类型和值类别（左值或右值），并将其准确地传递给下一个函数。&lt;/p>
&lt;p>为什么要有完美转发？根本原因在于&lt;strong>右值引用指向右值，但本身是左值&lt;/strong>，也就是说&lt;code>T&amp;amp;&amp;amp; t&lt;/code>中，t指向右值，但t本身是左值。所以，如果不采用发转，不管传进来的是右值，经过右值引用也会变成左值，从而去调用左值函&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t指向右值&lt;/span>&lt;span class="err">，但是&lt;/span>&lt;span class="n">t本身是左值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>std::forward&lt;/strong> 完美转发在传参的过程中保留对象原生类型属性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;左值引用&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;const 左值引用&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;右值引用&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;const 右值引用&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// std::forward&amp;lt;T&amp;gt;(t)在传参的过程中保持了t的原生类型属性。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">PerfectForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PerfectForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PerfectForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 左值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">PerfectForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PerfectForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// const 左值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">PerfectForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// const 右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际中使用场景&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">pushFront&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">/&lt;/span>&lt;span class="p">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="万能引用引用折叠">万能引用（引用折叠）
&lt;/h3>&lt;p>&lt;strong>万能引用&lt;/strong>（Universal References）是在 C++11 中引入的一个重要概念。万能引用是通过使用模板类型推导和右值引用的结合来实现的，主要用于实现完美转发（Perfect Forwarding）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;utility&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">Process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// arg 是一个万能引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 完美转发，调用一个其他的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// std::forward 将 arg 转发为其原始值类别（左值或右值）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">arg&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 传递左值， T&amp;amp;&amp;amp;会发生引用折叠，折叠为T&amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 传递右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ReturnValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 完美转发，返回右值引用或左值引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">只有参数是万能引用，上面的返回值只能视作右值&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="可变模板参数">可变模板参数
&lt;/h2>&lt;p>C++11的新特性可变参数模板能够让您创建可以接受可变参数的函数模板和类模板，相比C++98/03，类模版和函数模版中只能含固定数量的模版参数，可变模版参数无疑是一个巨大的改进。然而由于可变模版参数比较抽象，使用起来需要一定的技巧.&lt;/p>
&lt;p>形式：&lt;code>template&amp;lt;class ...Args&amp;gt;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Args是一个模板参数包，args是一个函数形参参数包
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 声明一个参数包Args...args，这个参数包中可以包含0到任意个模板参数。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="nc">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Args&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的参数args前面有省略号，所以它就是一个可变模版参数，我们把带省略号的参数称为“参数包”，它里面包含了0到N(N&amp;gt;=0)个模版参数。我们无法直接获取参数包args中的每个参数的，只能通过展开参数包的方式来获取参数包中的每个参数，这是使用可变模版参数的一个主要特点，也是最大的难点，即如何展开可变模版参数。由于语法不支持使用args[]这样方式获取可变参数，所以我们的用一些奇招来&amp;ndash;获取参数包的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="err">方式&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">：递归&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 递归终止函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 展开函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">class&lt;/span>&lt;span class="err">... &lt;/span>&lt;span class="nc">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Args&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">...);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sort&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">方式&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">：逗号表达式展开参数包&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">PrintArg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 展开函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="err">... &lt;/span>&lt;span class="nc">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Args&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{(&lt;/span>&lt;span class="n">PrintArg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)...};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ShowList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sort&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">e1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">e2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">e3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="nc">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Args&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">...);&lt;/span>&lt;span class="c1">//一次性使用参数包的所有参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注：STL容器中的empalce相关接口使用了 可变模板 + 万能引用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="err">... &lt;/span>&lt;span class="nc">Args&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">emplace_back&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Args&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>emplace_back是直接构造了，push_back 是先构造，再移动构造&lt;/p>
&lt;h2 id="智能指针-">智能指针 *
&lt;/h2>&lt;p>智能指针是基于RAII机制的类模板，利用对象生命周期来控制程序资源。&lt;/p>
&lt;blockquote>
&lt;p>RAII是Resource Acquisition Is Initialization（wiki上面翻译成 “资源获取就是初始化”）的简称，是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。&lt;strong>RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>2个问题：为什么？怎么实现？&lt;/p>
&lt;p>&lt;strong>为什么要保障资源自动释放&lt;/strong>？&lt;/p>
&lt;ol>
&lt;li>防止开发者忘记delete，造成内存泄漏&lt;/li>
&lt;li>抛异常，导致跳过delete 语句&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">throw&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>如何保障资源正常释放&lt;/strong>？&lt;/p>
&lt;p>在智能指针的析构函数内，执行指针指向对象的析构函数。&lt;/p>
&lt;p>智能指针一共有4种，其中auto_ptr已经弃用。不同类型的智能指针的使用场景，实现机制不同。对于使用者，首先要记住的就是它们的使用场景。&lt;/p>
&lt;h3 id="auto_ptr">auto_ptr
&lt;/h3>&lt;p>C++98: 资源转移&lt;/p>
&lt;p>C++11之前：资源管理权限的转移&amp;mdash;-对资源释放的权限&lt;/p>
&lt;p>C++11：弃用&lt;/p>
&lt;p>它的解决方式是管理权转移，&lt;code>p2 = p1&lt;/code>会将p1的管理权转移给p2, 而后p1悬空。如果p1是将亡值，这没什么问题，但p1不一定是将亡值，可能是左值，不能随便的转移资源。因此建议什么情况都不要使用auto_ptr&lt;/p>
&lt;p>auto_ptr&lt;code>在C++11中被标记为&lt;/code>deprecated&lt;code>（弃用），并建议开发者迁移至&lt;/code>std::unique_ptr&lt;/p>
&lt;h3 id="unique_ptr">unique_ptr
&lt;/h3>&lt;p>c++11：&lt;strong>unique_ptr代表的是专属所有权，即由unique_ptr管理的内存，只能被一个对象持有。&lt;/strong>&lt;/p>
&lt;p>因此：unique_ptr不支持拷贝和赋值，只支持移动(std::move)&lt;/p>
&lt;p>&lt;strong>使用场景&lt;/strong>：&lt;/p>
&lt;p>大多数场景下用到的应该都是unique_ptr&lt;/p>
&lt;ul>
&lt;li>忘记delete&lt;/li>
&lt;li>抛异常，导致跳过delete 语句&lt;/li>
&lt;/ul>
&lt;p>这2点也是智能指针最基本的功能&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：&lt;/p>
&lt;p>因为C++的zero cost abstraction的特点，unique_ptr在默认情况下和裸指针的大小是一样的。所以&lt;strong>内存上没有任何的额外消耗，性能是最优的。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>模拟实现:简易版&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UniquePtr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 默认构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">UniquePtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 移动构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">UniquePtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UniquePtr&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 转移所有权，置空其他指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 移动赋值运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">UniquePtr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UniquePtr&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 释放当前持有的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">m_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 转移所有权
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 置空其他指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁止拷贝构造和拷贝赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">UniquePtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">UniquePtr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UniquePtr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">UniquePtr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">UniquePtr&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 释放管理的对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 解引用操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 指针操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取原始指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 释放管理的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 释放旧指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">m_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 更新为新指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 释放并返回原始指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 置空管理指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 返回原始指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 管理的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>std::unique_ptr&lt;/code>，它专门为管理动态数组提供了支持。你可以直接使用 &lt;code>std::unique_ptr&lt;/code> 的数组形式，它会在超出作用域时自动调用 &lt;code>delete[]&lt;/code>：而shared_ptr直到c++17才支持动态数组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="shared_ptr">shared_ptr
&lt;/h3>&lt;p>c++11新增：&lt;strong>shared_ptr代表的是共享所有权，即多个shared_ptr可以共享同一块内存。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>使用场景&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>shared_ptr通常使用在共享权不明的场景。有可能多个对象同时管理同一个内存时。最经典场景就是：多线程下的跨线程的对象&lt;/strong>&lt;/li>
&lt;li>对象的延迟销毁。当一个对象的析构非常耗时，甚至影响到了关键线程的速度。可以将对象转移到另外一个线程中释放，从而解放关键线程。&lt;/li>
&lt;li>延迟对象的生命周期。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>原理&lt;/strong>：&lt;/p>
&lt;p>shared_ptr内部是利用引用计数来实现内存的自动管理，每当复制一个shared_ptr，引用计数会+1。当一个shared_ptr离开作用域时，引用计数会-1。当引用计数为0的时候，则delete内存。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/c-11/image/6f12215dbe524833882fade179ac42f3.png"
width="738"
height="423"
srcset="https://sfw003.github.io/p/c-11/image/6f12215dbe524833882fade179ac42f3_hu_5b05b3130fd28385.png 480w, https://sfw003.github.io/p/c-11/image/6f12215dbe524833882fade179ac42f3_hu_9aa453a10696e86d.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>内存占用高&lt;/strong>：shared_ptr的内存占用是裸指针的两倍。因为除了要管理一个裸指针外，还要维护一个引用计数。 因此相比于unique_ptr, shared_ptr的内存占用更高&lt;/li>
&lt;li>&lt;strong>原子操作性能低&lt;/strong>：考虑到线程安全问题，引用计数的增减必须是原子操作。而原子操作一般情况下都比非原子操作慢。&lt;/li>
&lt;/ol>
&lt;p>我们在使用中，可以通过移动来优化：如果一个shared_ptr需要将所有权共享给另外一个新的shared_ptr，而我们确定在之后的代码中都不再使用这个shared_ptr。 对于此种场景，我们尽量使用std::move，将shared_ptr转移给新的对象。因为移动不用增加引用计数，因此性能比复制更好。&lt;/p>
&lt;p>&lt;strong>使用&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>shared_ptr支持的操作&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;T&amp;gt; p&lt;/code>&lt;/td>
&lt;td>空共享指针，可以指向T类型对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*p&lt;/code>&lt;/td>
&lt;td>获得p所指向的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>void reset&lt;/code>&lt;/td>
&lt;td>释放任何可能存在的被管理对象的所有权。调用的共享指针被设置为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>void reset(T *ptr)&lt;/code>&lt;/td>
&lt;td>释放当前被管理的对象的所有权。获取由ptr指向的对象的所有权。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T *get()&lt;/code>&lt;/td>
&lt;td>返回指向被管理对象的裸指针，如果没有被管理的对象，则返回空指针。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>make_shared&amp;lt;T&amp;gt;(args)&lt;/code>&lt;/td>
&lt;td>返回一个shared_ptr,此shared_ptr指向一个动态分配的类型为T的对象，用args初始化此对象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.use_cout()&lt;/code>&lt;/td>
&lt;td>返回与p共享对象的智能指针数量&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>使用注意事项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="err">注意&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">：不要使用原始指针初始化多个&lt;/span>&lt;span class="n">shared_ptr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">当出了这个作用域后，报错，&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">free&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">多次释放&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">因为这段代码相当于是&lt;/span> &lt;span class="n">sp1和sp2分别管理不同的引用计数器&lt;/span>&lt;span class="err">，即都是&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">，当出了作用域后，&lt;/span>&lt;span class="n">sp1析构会释放一次&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">sp2析构也会释放一次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">正确写法：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sp1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">注意&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">：不要用栈中的指针构造&lt;/span> &lt;span class="n">shared_ptr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sharedPtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sharedPtr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 错误：返回栈上对象的 shared_ptr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">注意&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="err">：&lt;/span>&lt;span class="n">shared_ptr的参数默认是不支持数组类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// 错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">]());&lt;/span> &lt;span class="c1">// 错误，c++17前不能传递数组类型作为shared_ptr的模板参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">因为&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span> &lt;span class="err">默认使用&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="err">来释放内存，而不是&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">解决方式：添加自定义删除器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[](&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">](),&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">default_delete&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>模拟实现：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MySharedPtr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">useCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">realse&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">subCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_pcount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span>&lt;span class="n">m_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">m_pcount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_ptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">m_pcount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_pcount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_pmutex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">realse&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pcount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_pcount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pmutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_pmutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::~&lt;/span>&lt;span class="n">MySharedPtr&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">realse&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">useCount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_pcount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">realse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">m_pcount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">m_ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">m_pcount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">addCount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">m_pcount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">MySharedPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">subCount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">m_pcount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_pmutex&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>循环引用问题：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;~A()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/c-11/image/image-20250415110513259.png"
width="781"
height="279"
srcset="https://sfw003.github.io/p/c-11/image/image-20250415110513259_hu_f2caf5b8fc7fc522.png 480w, https://sfw003.github.io/p/c-11/image/image-20250415110513259_hu_b319a260ce7bde80.png 1024w"
loading="lazy"
alt="image-20250415110513259"
class="gallery-image"
data-flex-grow="279"
data-flex-basis="671px"
>&lt;/p>
&lt;p>程序执行结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">A()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">A()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="weak_ptr">weak_ptr
&lt;/h3>&lt;p>c++11新增：&lt;strong>weak_ptr代表的是无所有权，不能单独管理对象。配合shared_ptr解决循环引用问题&lt;/strong>&lt;/p>
&lt;p>weak_ptr 的构造和析构不会引起引用计数的增加或减少。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>weak_ptr支持的操作&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>bool expired() const&lt;/code>&lt;/td>
&lt;td>空共判断weak_ptr保存的队行是否已经销毁，销毁了返回true，否则返回false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;element_type&amp;gt; lock() const;&lt;/code>&lt;/td>
&lt;td>生命周期未结束，返回一个share_ptr指针，指向同样的对象，否则，返回一个为nullptr的share_ptr.引用计数 + 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>long use_count()&lt;/code>&lt;/td>
&lt;td>返回所有与weak_ptr指向同一对象的shared_ptr的数量。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>我们用weak_ptr来修改之前的循环引用代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;~A()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">weak_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//修改prev和next其中一个为weak_ptr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//prev为weak_ptr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/c-11/image/image-20250415125927892.png"
width="773"
height="277"
srcset="https://sfw003.github.io/p/c-11/image/image-20250415125927892_hu_71361dcc55570cea.png 480w, https://sfw003.github.io/p/c-11/image/image-20250415125927892_hu_456226bcbd9584a2.png 1024w"
loading="lazy"
alt="image-20250415125927892"
class="gallery-image"
data-flex-grow="279"
data-flex-basis="669px"
>&lt;/p>
&lt;p>程序执行结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">A()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">A()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~A()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~A()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="c的函数式编程">c++的函数式编程
&lt;/h2>&lt;blockquote>
&lt;p>函数式编程是什么？&lt;/p>
&lt;p>函数式编程（Functional Programming, FP）是一种以数学中的λ演算（lambda calculus）为理论基础的编程范式，其核心是将计算视为&lt;strong>函数的组合与变换&lt;/strong>，而非对状态或指令的执行顺序的依赖.&lt;/p>&lt;/blockquote>
&lt;p>从 C++11 开始，C++ 引入对函数式编程的支持。主要体现在&lt;/p>
&lt;ul>
&lt;li>&lt;code>lambda表达式&lt;/code>：函数式编程中闭包机制的体现。&lt;/li>
&lt;li>&lt;code>std::function&lt;/code>：通用函数封装器，可存储Lambda、函数指针等，提供统一接口。&lt;/li>
&lt;li>&lt;code>std::bind&lt;/code>：参数绑定与适配工具，用于生成部分参数固定的新函数。&lt;/li>
&lt;/ul>
&lt;h3 id="lambda">lambda
&lt;/h3>&lt;p>lambda可以看作函数对象（仿函数），编译器会根据lambda表达式自动生成一个匿名函数对象，它有以下优点：&lt;/p>
&lt;ul>
&lt;li>声明式的编程风格：就地匿名定义目标函数或函数对象，不需要额外写一个命名函数或函数对象。&lt;/li>
&lt;li>简洁：避免了代码膨胀和功能分散，让开发更加高效。&lt;/li>
&lt;li>在需要的时间和地点实现功能闭包，使程序更加灵活。&lt;/li>
&lt;/ul>
&lt;p>形式：&lt;code>[capture-list] (parameters) mutable -&amp;gt; return-type { statement }&lt;/code>&lt;/p>
&lt;ol>
&lt;li>&lt;code>[capture-list] &lt;/code>: 捕捉列表，该列表总是出现在lambda函数的开始位置，编译器根据[]来判断接下来的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用&lt;/li>
&lt;li>&lt;code>(parameters)&lt;/code>：参数列表。与普通函数的参数列表一致，如果不需要参数传递，则可以连同()一起省略&lt;/li>
&lt;li>&lt;code>mutable&lt;/code>：可变的，&lt;strong>默认情况下，lambda函数总是一个const函数&lt;/strong>，mutable可以取消其常量性。使用该修饰符时，参数列表不可省略(即使参数为空)&lt;/li>
&lt;li>&lt;code>return-type&lt;/code>: 返回值类型，可以不写，编译器会自动推导&lt;/li>
&lt;li>&lt;code>{statement}&lt;/code> ： 函数体,短小&lt;/li>
&lt;/ol>
&lt;p>举例：&lt;code>auto add = [](int x, int y)-&amp;gt;int {return x + y; };&lt;/code>&lt;/p>
&lt;p>捕捉列表：
捕捉列表描述了上下文中那些数据可以被lambda使用，以及使用的方式传值还是传引用。&lt;/p>
&lt;ul>
&lt;li>[var]：表示值传递方式捕捉变量var&lt;/li>
&lt;li>[=]：表示值传递方式捕获所有父作用域中的变量(包括this)&lt;/li>
&lt;li>[&amp;amp;var]：表示引用传递捕捉变量var&lt;/li>
&lt;li>[&amp;amp;]：表示引用传递捕捉所有父作用域中的变量(包括this)&lt;/li>
&lt;li>[this]：表示值传递方式捕捉当前的this指针&lt;/li>
&lt;/ul>
&lt;p>注意点：默认情况下，lambda函数总是一个const函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="err">错误代码：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">swap1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">swap1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//值捕获的列表的a，b相当于 const int a， const int b：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//要想改变，如下：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">swap1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="k">mutable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">swap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">但是它改变的是&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">无法影响外部的&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//提问下列代码哪些是正确，哪些是错误的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">funFirst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;};&lt;/span> &lt;span class="c1">//error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">funSecond&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;};&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">funThird&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;};&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">funFourth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;};&lt;/span> &lt;span class="c1">//false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">funFifth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);};&lt;/span> &lt;span class="c1">//error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">funSixth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);};&lt;/span> &lt;span class="c1">//true;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">funSeventh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);};&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>lambda和闭包&lt;/p>
&lt;blockquote>
&lt;p>闭包（Closure） 是编程语言中一种特殊的函数与词法作用域结合的现象。其核心机制是：&lt;strong>当一个内部函数（如 Lambda 表达式）访问其外部函数或定义环境中的变量时，即使外部函数已执行完毕，这些变量的生命周期会被延长，形成闭包环境&lt;/strong>。&lt;/p>&lt;/blockquote>
&lt;p>Lambda 表达式通过捕获列表（如 C++ 的 &lt;code>[=]&lt;/code> 或 &lt;code>[&amp;amp;]&lt;/code>）或隐式捕获（如 Java、JavaScript）引用外部变量。这些变量在 Lambda 定义时被“冻结”，即使原作用域已销毁，仍可通过闭包访问。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">lambda&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// 值捕获x，形成闭包
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="function">function
&lt;/h3>&lt;p>function是&lt;strong>包装器&lt;/strong>，当需要将不同类型的可调用对象（如普通函数、Lambda、成员函数等）作为参数传递时，&lt;code>std::function&lt;/code>提供统一的封装接口。&lt;/p>
&lt;p>比如：函数指针，反函数，lambda表达式，即使他们的功能一样，但将它们作为参数传给模板时，会被识别为三种类型，实例化为三份，这导致使用效率降低，而包装器则可以说是将它们进行了一层封装。&lt;/p>
&lt;p>验证如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">F&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span> &lt;span class="n">useF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;count:&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;count:&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Functor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">operator&lt;/span>&lt;span class="p">()(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 实例化3个useF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">useF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">11.11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">useF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Functor&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mf">11.11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">useF&lt;/span>&lt;span class="p">([](&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="mf">11.11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 实例化1个useF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Functor&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[](&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">useF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">11.11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">useF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">11.11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">useF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">11.11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：只实例化了一个useF&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">count:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:00FBF4F0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5.555
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:00FBF4F4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.70333
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:00FBF4F8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.7775
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:00FBF4FC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5.555
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:00FBF4FC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.70333
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">count:00FBF4FC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.7775
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用场景：最常见的场景是设置&lt;strong>回调函数&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 定义回调接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">register_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 传递Lambda或函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">register_callback&lt;/span>&lt;span class="p">([](&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span> &lt;span class="c1">// 输出42
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="bind">bind
&lt;/h3>&lt;p>bind也是是包装器，也叫绑定器，当目标函数参数与调用环境不匹配时，通过绑定部分参数生成新函数对象&lt;/p>
&lt;p>使用如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">PrintSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">boundFunc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PrintSum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">placeholders&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">_1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 绑定第一个参数为10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">boundFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 只需传入第二个参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>理解
&lt;img src="https://sfw003.github.io/p/c-11/image/9a3af5aa315f490fbac08047b5e62244.png"
width="1445"
height="396"
srcset="https://sfw003.github.io/p/c-11/image/9a3af5aa315f490fbac08047b5e62244_hu_c9a81dba3153fff2.png 480w, https://sfw003.github.io/p/c-11/image/9a3af5aa315f490fbac08047b5e62244_hu_565ae4e5792caabd.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="364"
data-flex-basis="875px"
>&lt;/p>
&lt;p>它的使用场景：回调函数，基本和function搭配使用。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Channel&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">EventCallback&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EventCallback&lt;/span> &lt;span class="n">m_read_callback&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">setReadCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">EventCallback&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">cb&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_read_callback&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Connection&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Channel&lt;/span> &lt;span class="n">m_channel&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">hanleRead&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//..
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Connection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setReadCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">Connection&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">hanleRead&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回调函数往往在事件驱动模型中使用，想更深入了解回调函数，可以去参考reactor模式的服务器等。&lt;/p>
&lt;h2 id="其他">其他
&lt;/h2>&lt;h3 id="stdtuple">std::tuple
&lt;/h3>&lt;p>c++11新增，用于将多个值打包成一个单一的对象。它可以存储不同类型的值，并且可以通过索引或类型来访问这些值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">tuple&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.14159&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="stdquoted">std::quoted
&lt;/h3>&lt;p>c++11新增，给字符串加双引号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//====&amp;gt; hello world
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="n">str&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">quoted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//===&amp;gt; &amp;#34;hello world&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>编译和链接</title><link>https://sfw003.github.io/p/compile-and-link/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/compile-and-link/</guid><description>&lt;h2 id="什么是编译链接">什么是编译链接？
&lt;/h2>&lt;p>编译则是将编译型语言（如c/c++）翻译为计算机可以识别的二进制文件，即目标文件。&lt;/p>
&lt;p>链接则是一个打包的过程，将所有的目标文件以及系统组件组合成一个可执行文件。&lt;/p>
&lt;p>c/c++编译链接过程如下：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/compile-and-link/image/image-20250412214538192.png"
width="1331"
height="311"
srcset="https://sfw003.github.io/p/compile-and-link/image/image-20250412214538192_hu_2cd31e34de39535d.png 480w, https://sfw003.github.io/p/compile-and-link/image/image-20250412214538192_hu_acc16930fab9772a.png 1024w"
loading="lazy"
alt="image-20250412214538192"
class="gallery-image"
data-flex-grow="427"
data-flex-basis="1027px"
>&lt;/p>
&lt;h2 id="编译">编译
&lt;/h2>&lt;p>编译过程分为3部分：预处理（预编译），编译，汇编，整个编译过程由编译器负责。&lt;/p>
&lt;h3 id="预处理">预处理
&lt;/h3>&lt;h4 id="头文件的展开">头文件的展开
&lt;/h4>&lt;h4 id="define定义的宏替换">#define定义的宏替换
&lt;/h4>&lt;h4 id="删除注释">删除注释
&lt;/h4>&lt;h3 id="编译-1">编译
&lt;/h3>&lt;h3 id="汇编">汇编
&lt;/h3>&lt;h2 id="链接">链接
&lt;/h2>&lt;p>C/C++的链接方式主要分为 &lt;strong>静态链接&lt;/strong> 和 &lt;strong>动态链接&lt;/strong>&lt;/p>
&lt;h3 id="静态链接">静态链接
&lt;/h3>&lt;p>在编译时将库代码（&lt;code>.a&lt;/code>/&lt;code>.lib&lt;/code>）完全嵌入到可执行文件中&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>文件体积大，相同库代码在不同程序中重复存在&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新需重新编译整个程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>独立性强&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="动态链接">动态链接
&lt;/h3>&lt;p>运行时加载共享库（&lt;code>.so&lt;/code>/&lt;code>.dll&lt;/code>），代码在内存中共享&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ul>
&lt;li>节省磁盘和内存空间，多个程序共用同一库&lt;/li>
&lt;li>支持热更新，库更新后无需重新编译程序&lt;/li>
&lt;li>依赖环境配置，需确保运行时库路径正确&lt;/li>
&lt;/ul>
&lt;p>如何理解？&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/compile-and-link/image/image-20250412213818280.png"
width="551"
height="571"
srcset="https://sfw003.github.io/p/compile-and-link/image/image-20250412213818280_hu_3c504564613543ab.png 480w, https://sfw003.github.io/p/compile-and-link/image/image-20250412213818280_hu_427dc5841cc2de0f.png 1024w"
loading="lazy"
alt="image-20250412213818280"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>疑问：&lt;/p>
&lt;p>假设动态库里有一个函数 Print(), 在生成动态库的过程中，Print函数的虚拟地址是被硬编码到动态库里。&lt;/p>
&lt;p>这导致了一个问题，当进程使用Print(), 动态库首先被加载到物理内存里然后通过页表与虚拟地址相映射。但是由于Print函数的虚拟地址被硬编码到动态库，因此通过页表映射的Print函数虚拟地址是&lt;strong>固定的&lt;/strong>。&lt;/p>
&lt;p>那问题来了，这个虚拟地址已经被占了呢？那就出问题了。为了解决这个问题，动态库内的函数不在使用&lt;strong>绝对地址&lt;/strong>，而是&lt;strong>相对地址&lt;/strong>，即偏移量。&lt;/p>
&lt;p>此时dy.so通过页表映射的虚拟地址不固定，之后要想找到Print函数，只需用动态库的起始地址 + Print函数的偏移量。&lt;/p>
&lt;hr>
&lt;p>下面看看具体的操作系统下c++的编译和链接&lt;/p>
&lt;h2 id="linux">linux
&lt;/h2>&lt;h3 id="gccg">gcc/g++
&lt;/h3>&lt;p>GCC（GNU Compiler Collection）是Linux下C/C++开发的核心工具链，&lt;/p>
&lt;h3 id="linux下制作动静态库">linux下制作动静态库
&lt;/h3>&lt;p>linux的静态库为.a文件，动态库为.so文件&lt;/p>
&lt;ul>
&lt;li>
&lt;p>静态库：通过&lt;code>ar -rc&lt;/code>打包目标文件生成&lt;code>.a&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态库：使用&lt;code>gcc -shared -fPIC&lt;/code>编译生成位置无关代码（PIC）的&lt;code>.so&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="linux静态库">linux静态库
&lt;/h4>&lt;p>现在有两个文件：test.h, test.c，如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">h&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">Print&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;test.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">Print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;66666666&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/compile-and-link/image/1b1e2d3bcb83494f13fae1292e2f31d9.png"
width="1370"
height="545"
srcset="https://sfw003.github.io/p/compile-and-link/image/1b1e2d3bcb83494f13fae1292e2f31d9_hu_6465704b98a78e4a.png 480w, https://sfw003.github.io/p/compile-and-link/image/1b1e2d3bcb83494f13fae1292e2f31d9_hu_4462f465061056fc.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="603px"
>&lt;/p>
&lt;p>执行上述命令后，结果如下：lib目录里存储制作的静态库。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gcc -o test.o -c test.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ar -rc libtest.a test.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# make put
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p lib/include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p lib/mylib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp *.h lib/include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp *.a lib/mylib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# make clean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -f *.o *.a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lib Makefile test.c test.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# tree lib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── test.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── mylib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── libtest.a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">2&lt;/span> directories, &lt;span class="m">2&lt;/span> files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>使用静态库&lt;/strong>&lt;/p>
&lt;p>现在我们创建main.c来测试我们的静态库。如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# cat main.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#include &amp;#34;test.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int main&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Print&lt;span class="o">()&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> 0&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>root@iZbp1inz4ol3gjahpjal9qZ:~/study# gcc -o main main.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">main.c:1:10: fatal error: test.h: No such file or directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="c1">#include &amp;#34;test.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span> ^~~~~~~~
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">compilation terminated.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里出现了一个报错，找不到头文件。原因很简单，test.h与main.c不在同一级目录下，此时我们有3种做法：&lt;/p>
&lt;ol>
&lt;li>告诉编译器，除了在当前目录下、系统目录下找，如果找不到，就去指定目录下找。参数&lt;code>-I [路径】&lt;/code>
&lt;code>gcc main.c -o main -I ./lib/include&lt;/code>&lt;/li>
&lt;li>include头文件时，带相对路径或绝对路径
&lt;code>include &amp;quot;lib/include/test.h&amp;quot;&lt;/code>&lt;/li>
&lt;li>安装到系统里，即将头文件和库移到&lt;code>/usr/inlcude 和/usr/lib64&lt;/code>, 如果不想移，也可以建立软链接，再将软链接放到&lt;code>/usr/inlcude 和/usr/lib64&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>这里采用第一种，结果如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# gcc -o main main.c -I lib/include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/ld: /tmp/ccGShNRL.o: in &lt;span class="k">function&lt;/span> &lt;span class="sb">`&lt;/span>main&lt;span class="s1">&amp;#39;:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">main.c:(.text+0xe): undefined reference to `Print&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">collect2: error: ld returned &lt;span class="m">1&lt;/span> &lt;span class="nb">exit&lt;/span> status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>报错显示找不到Print函数，属于链接报错。原因是你只告诉了.h的路径，并没有告诉.a文件的路径.
因此完整的命令如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gcc main.c -o main -I ./lib/include/ -L ./lib/mylib -ltest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>-L [库的路径]-l[库名]&lt;/code>&lt;/p>
&lt;p>&lt;strong>注意库名要掐头去尾且最好与-l连在一起&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# tree lib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── test.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── mylib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── libtest.a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">2&lt;/span> directories, &lt;span class="m">2&lt;/span> files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study# gcc -o main main.c -I lib/include -L lib/mylib -ltest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@iZbp1inz4ol3gjahpjal9qZ:~/study#
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="linux动态库">linux动态库
&lt;/h4>&lt;p>linux下有个命令可以看到程序动态链接了哪些库 &amp;mdash; ldd
以上文的main程序为例&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/compile-and-link/image/d90e93924400c15dcef28613ae5dd2d1.png"
width="818"
height="125"
srcset="https://sfw003.github.io/p/compile-and-link/image/d90e93924400c15dcef28613ae5dd2d1_hu_63cfda79315a461.png 480w, https://sfw003.github.io/p/compile-and-link/image/d90e93924400c15dcef28613ae5dd2d1_hu_4d3c8dac4ba0bf9a.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="654"
data-flex-basis="1570px"
>&lt;/p>
&lt;p>现在有2个文件：dytest.h dytest.c&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>sfw@VM-24-12-centos 3_10&lt;span class="o">]&lt;/span>$ cat dytest.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#include &amp;#34;dytest.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void Print&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> printf&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;dytest链接正常\n&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>sfw@VM-24-12-centos 3_10&lt;span class="o">]&lt;/span>$ cat dytest.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#pragma once&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#include &amp;lt;stdio.h&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void Print&lt;span class="o">()&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/compile-and-link/image/6670b8b5da9069471bf74542ebd4fea5.png"
width="1123"
height="526"
srcset="https://sfw003.github.io/p/compile-and-link/image/6670b8b5da9069471bf74542ebd4fea5_hu_4dfbaf5f31359486.png 480w, https://sfw003.github.io/p/compile-and-link/image/6670b8b5da9069471bf74542ebd4fea5_hu_793d1476bcd22700.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p>
&lt;p>执行上述命令后便会生成lib目录，libtest.so便是我们制作的动态库
&lt;img src="https://sfw003.github.io/p/compile-and-link/image/ee5f48069eafa0cc09695afb626a1fbc.png"
width="510"
height="200"
srcset="https://sfw003.github.io/p/compile-and-link/image/ee5f48069eafa0cc09695afb626a1fbc_hu_5d37ff89df813cc7.png 480w, https://sfw003.github.io/p/compile-and-link/image/ee5f48069eafa0cc09695afb626a1fbc_hu_be413c9582c8c6ff.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="612px"
>&lt;/p>
&lt;p>创建main.c进行测试
&lt;img src="https://sfw003.github.io/p/compile-and-link/image/0c69887b45104f561befb7cd3f7c52a1.png"
width="540"
height="213"
srcset="https://sfw003.github.io/p/compile-and-link/image/0c69887b45104f561befb7cd3f7c52a1_hu_2fddfd9b03ce0aa1.png 480w, https://sfw003.github.io/p/compile-and-link/image/0c69887b45104f561befb7cd3f7c52a1_hu_f6d58d745b55a955.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="608px"
>&lt;/p>
&lt;p>同样和静态库一样：&lt;code>gcc main.c -o main -I ./lib/include/ -L ./lib/mylib/ -ltest&lt;/code>
最后便会出现下面的错误
&lt;img src="https://sfw003.github.io/p/compile-and-link/image/de40ae10e75dc7ace6797b0f919c3da1.png"
width="1622"
height="265"
srcset="https://sfw003.github.io/p/compile-and-link/image/de40ae10e75dc7ace6797b0f919c3da1_hu_5b24f97b1b013124.png 480w, https://sfw003.github.io/p/compile-and-link/image/de40ae10e75dc7ace6797b0f919c3da1_hu_2d6b2bd98151134.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="612"
data-flex-basis="1468px"
>
此时我们用ldd命令来查看，会看到not found,找不到库，可我们明明已经告诉编译器库在哪里，为什么还是找不到？原因是我们告诉了编译器，但现在已经是可执行程序，需要通过&lt;strong>加载器&lt;/strong>来进行链接，但我们并没有告诉加载器，库在哪里。
&lt;img src="https://sfw003.github.io/p/compile-and-link/image/a4d97fc7a33561f121d006221b9cd51d.png"
width="820"
height="162"
srcset="https://sfw003.github.io/p/compile-and-link/image/a4d97fc7a33561f121d006221b9cd51d_hu_f8aac3036ec19ac5.png 480w, https://sfw003.github.io/p/compile-and-link/image/a4d97fc7a33561f121d006221b9cd51d_hu_4a1824672226cab9.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="506"
data-flex-basis="1214px"
>
解决这个问题的方法很多，这里介绍3种：&lt;/p>
&lt;ol>
&lt;li>安装到系统里，即&lt;code>/usr/lib64&lt;/code>&lt;/li>
&lt;li>添加路径到环境变量&lt;code>LD_LTBRAY_PATH&lt;/code>
&lt;code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/sfw/study/3_10/lib/mylib&lt;/code>
&lt;strong>地址写到库所在目录就可以了，因为库的名字早就写在可执行程序中&lt;/strong>
但是这种方法，在重启时，环境变量更新，便会失效。除非，你写到系统配置文件里。&lt;/li>
&lt;li>在&lt;code>/etc/ld.so.conf.d&lt;/code>里面建立动态库路径，然后ldconfig&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>/etc/ld.so.conf.d 目录是 Linux 下的动态链接器配置目录。在这个目录下，可以放置一系列以 .conf 结尾的文件，这些文件包含了动态链接器的库文件搜索路径配置。每个文件通常包含一组路径，告诉动态链接器在运行时去哪里搜索共享库文件。
操作如下：(下面操作需要root权限）
&lt;img src="https://sfw003.github.io/p/compile-and-link/image/9c95bdbe1939ebe964000dc2463c57f0.png"
width="1528"
height="457"
srcset="https://sfw003.github.io/p/compile-and-link/image/9c95bdbe1939ebe964000dc2463c57f0_hu_3a3b78370b92d6ae.png 480w, https://sfw003.github.io/p/compile-and-link/image/9c95bdbe1939ebe964000dc2463c57f0_hu_da5b41db2a8a300e.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="334"
data-flex-basis="802px"
>&lt;/p>&lt;/blockquote>
&lt;h2 id="windows">windows
&lt;/h2>&lt;h3 id="msvc">MSVC
&lt;/h3>&lt;p>windows下的c/c++工具链是 MSVC，MSVC包括以下几个工具&lt;/p>
&lt;ul>
&lt;li>
&lt;p>cl.exe：一个控制 Microsoft C++ (MSVC) C 和 C++ 编译器和链接器的工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>link.exe：链接器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他（debugger……）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>误解：cl.exe 这里的cl是编译器compiler和链接器linker的两个单词首字母的缩写，是不是表示cl.exe即是编译器又是链接器？&lt;/p>
&lt;p>不是，根据官方文档：&lt;strong>除非使用 /c 选项，否则 CL 会在编译后自动调用链接器link.exe&lt;/strong>。cl.exe本身只是编译器。&lt;/p>&lt;/blockquote>
&lt;h3 id="windows-sdk">windows SDK
&lt;/h3>&lt;h3 id="windows制作动静态库">windows制作动静态库
&lt;/h3></description></item><item><title>手写输入法</title><link>https://sfw003.github.io/p/handwrite-input-method/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/handwrite-input-method/</guid><description>&lt;h1 id="智能手写输入法">智能手写输入法
&lt;/h1>&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241212130425503.png"
width="721"
height="481"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241212130425503_hu_9b2b4646683905f2.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241212130425503_hu_c8f85fa32a985f62.png 1024w"
loading="lazy"
alt="image-20241212130425503"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;h1 id="设计思路">设计思路
&lt;/h1>&lt;h2 id="模块划分">模块划分
&lt;/h2>&lt;p>【金山文档 | WPS云文档】 手写输入法模块划分
&lt;a class="link" href="https://kdocs.cn/l/cbaoXUi8YmWw" target="_blank" rel="noopener"
>https://kdocs.cn/l/cbaoXUi8YmWw&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211211755335.png"
width="2583"
height="756"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211211755335_hu_4760580790a9045b.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241211211755335_hu_6274bbd536c8e489.png 1024w"
loading="lazy"
alt="image-20241211211755335"
class="gallery-image"
data-flex-grow="341"
data-flex-basis="820px"
>&lt;/p>
&lt;p>models&lt;/p>
&lt;ul>
&lt;li>&lt;strong>StrokeModel&lt;/strong>: 管理笔画数据，提供数据的增删改查功能。&lt;/li>
&lt;li>&lt;strong>CandidateModel&lt;/strong>: 管理候选词数据，提供候选词的选择和更新功能。&lt;/li>
&lt;li>&lt;strong>ConfigModel&lt;/strong>: 管理配置数据，如用户设置、手写识别参数等。&lt;/li>
&lt;/ul>
&lt;p>delegates&lt;/p>
&lt;ul>
&lt;li>&lt;strong>StrokeDelegate&lt;/strong>: 负责笔画的渲染。&lt;/li>
&lt;li>&lt;strong>CandidateDelegate&lt;/strong>: 负责候选词的渲染。&lt;/li>
&lt;/ul>
&lt;p>views&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HandWriteView&lt;/strong>: 手写板视图，处理用户输入和笔画显示。&lt;/li>
&lt;li>&lt;strong>CandidateView&lt;/strong>: 候选词视图，显示识别结果的候选词。&lt;/li>
&lt;li>&lt;strong>SettingsPopupDialog&lt;/strong>: 设置弹窗，提供用户配置界面。&lt;/li>
&lt;li>&lt;strong>ToolPopupDialog&lt;/strong>：手动选择标点、数字、字母、语言弹窗&lt;/li>
&lt;/ul>
&lt;p>controllers&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RecognitionController&lt;/strong>: 负责与识别引擎的交互，处理识别结果。&lt;/li>
&lt;li>&lt;strong>TSFController&lt;/strong>: 负责与文本服务框架（TSF）的交互，管理输入法状态。&lt;/li>
&lt;/ul>
&lt;p>core&lt;/p>
&lt;ul>
&lt;li>Recognition：提供识别服务
&lt;ul>
&lt;li>&lt;strong>RecognitionModel&lt;/strong>: 识别服务，提供手写识别的核心算法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IPC: 用于和TSF服务通信
&lt;ul>
&lt;li>&lt;strong>IPCServer&lt;/strong>: 使用命名管道进行双向通信&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Common: 公共组件，提供通用的工具类和数据结构。
&lt;ul>
&lt;li>&lt;strong>data.h&lt;/strong>：核心数据结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>dictionary&lt;/p>
&lt;ul>
&lt;li>&lt;strong>dictionary.db&lt;/strong>: Sqlite数据库，里面存储汉字-拼音表，汉字-常见词组表&lt;/li>
&lt;li>&lt;strong>DictionaryManager&lt;/strong>：词典管理类&lt;/li>
&lt;li>&lt;strong>LocalDictionary&lt;/strong>：本地词典（使用dictionary.db）&lt;/li>
&lt;li>&lt;strong>OnlineDictionary&lt;/strong>：在线词典（使用第三方平台词典）&lt;/li>
&lt;/ul>
&lt;h2 id="手写区域">手写区域
&lt;/h2>&lt;p>笔迹数据存储&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">StrokeStyle&lt;/span> &lt;span class="c1">// 笔迹样式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QColor&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Qt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">black&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 笔迹颜色（默认颜色: 黑）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 笔迹大小（默认大小: 2px）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">StrokeStyle&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">color&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">StrokeData&lt;/span> &lt;span class="c1">// 笔迹数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QPoint&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 笔迹点集
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">StrokeStyle&lt;/span> &lt;span class="n">style&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 笔迹样式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">qint64&lt;/span> &lt;span class="n">timestamp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 时间戳（目前未用到）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StrokeData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StrokeData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">StrokeStyle&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">style&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>手写区域采用 Qt 的 Model-View 架构。&lt;/p>
&lt;p>view：通过继承 &lt;code>QAbstractItemView&lt;/code> 实现自定义视图控件。设计了基类 &lt;code>HandWriteView&lt;/code> 及其两个子类 &lt;code>SingleHandWriting&lt;/code>（单字手写）和 &lt;code>LongSentenceHandWriting&lt;/code>（长句手写），实现了不同模式下的手写功能。&lt;/p>
&lt;p>delegate: 通过继承&lt;code>QStyledItemDelegate&lt;/code> 实现自定义代理。设计了类&lt;code>StrokeDelegate&lt;/code>，实现&lt;code>paint&lt;/code>函数，进行局部重绘，减少整个手写试图的重绘次数。&lt;/p>
&lt;p>model: 因为笔迹用通过继承&lt;code>QAbstractListModel&lt;/code> 实现自定义模型，数据采用&lt;code>QVector&amp;lt;StrokeDate&amp;gt;&lt;/code>存储。&lt;/p>
&lt;h3 id="时序图">时序图
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211215033811.png"
width="1060"
height="538"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211215033811_hu_182c8f4de0c4ef82.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241211215033811_hu_7bc2b7e21887a203.png 1024w"
loading="lazy"
alt="image-20241211215033811"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="472px"
>&lt;/p>
&lt;p>基本流程：&lt;/p>
&lt;ol>
&lt;li>用户用鼠标在HandWriteView上绘制，先后触发 mousePressEvent, mouseMoveEvent, mouseReleaseEvent，采集笔迹给StrokeModel&lt;/li>
&lt;li>每次笔迹(点)更新，通知StrokeDelegate进行笔迹渲染，展示给用户&lt;/li>
&lt;li>当一次完整笔迹采集后，发送信号StrokeDateChange给RecognitionContoller调用识别引擎进行识别&lt;/li>
&lt;/ol>
&lt;p>通过单字手写按钮、长句手写按钮可以将进行不同手写模式的切换&lt;/p>
&lt;h3 id="详细设计">详细设计
&lt;/h3>&lt;p>手写输入法有2种模式：单字手写和长句手写&lt;/p>
&lt;ul>
&lt;li>在单字手写模式下，手写区域为正方形，米字格&lt;/li>
&lt;li>在长句手写模式下，手写区域为矩形，网格。&lt;/li>
&lt;/ul>
&lt;p>二者的区别在于paintEvent绘制背景。 因此我设计了一个基类HandWriteView，2个子类SingleHandWriting和LongSentenceHandWriting&lt;/p>
&lt;p>基类 HandWriteView&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>UI 组件管理&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>撤销按钮：支持笔画回退&lt;/li>
&lt;li>清空按钮：清除所有笔画&lt;/li>
&lt;li>提示文本：显示当前状态信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>笔迹处理&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>笔画捕获：处理鼠标事件实现笔迹采集&lt;/li>
&lt;li>笔迹渲染：实时绘制用户输入的笔画&lt;/li>
&lt;li>状态管理：跟踪书写状态，控制按钮启用/禁用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事件处理&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>mousePressEvent：开始笔画&lt;/li>
&lt;li>mouseMoveEvent：继续笔画&lt;/li>
&lt;li>mouseReleaseEvent：结束笔画&lt;/li>
&lt;li>paintEvent：渲染视图&lt;/li>
&lt;li>resizeEvent：处理尺寸变化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>子类特化&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>SingleHandWriting&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>实现米字格背景&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>LongSentenceHandWriting&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>实现网格背景&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="笔迹识别">笔迹识别
&lt;/h2>&lt;p>我希望我的笔迹识别能够支持多种识别引擎。因此采用策略模式设置了一个抽象类IRecognitionEngine&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">IRecognitionEngine&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">QObject&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Q_OBJECT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">explicit&lt;/span> &lt;span class="n">IRecognitionEngine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">QObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">IRecognitionEngine&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 初始化引擎
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 处理笔画数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processStrokes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StrokeData&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">strokes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 清理资源
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">cleanup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">signals&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">recognitionCompleted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">candidates&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 笔迹识别完成信号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">recognitionError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 笔迹识别错误信号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目前我只设置了一种识别引擎：windows的墨迹识别 window LNK&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">WindowsTabletEngine&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">IRecognitionEngine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Q_OBJECT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">explicit&lt;/span> &lt;span class="n">WindowsTabletEngine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">WindowsTabletEngine&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processStrokes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StrokeData&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">strokes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">cleanup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setRecognitionMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RecognitionMode&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 辅助方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">winrt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">UI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Inking&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">InkStroke&lt;/span> &lt;span class="n">createInkStroke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">StrokeData&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">strokeData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 处理坐标转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">winrt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">UI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Inking&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">InkStrokeContainer&lt;/span> &lt;span class="n">handleCoordinateConversion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StrokeData&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">strokes&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 处理错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">handleRecognitionError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 数据补充
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dataSupplement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RecognitionResult&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RecognitionMode&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 识别器容器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">winrt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">UI&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Inking&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">InkRecognizerContainer&lt;/span> &lt;span class="n">m_recognizerContainer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 识别目标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">RecognitionMode&lt;/span> &lt;span class="n">m_recognitionTarget&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="时序图-1">时序图
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211214020664.png"
width="1031"
height="540"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211214020664_hu_3792421ce77c6453.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241211214020664_hu_156ead823f509b8b.png 1024w"
loading="lazy"
alt="image-20241211214020664"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="458px"
>&lt;/p>
&lt;h3 id="详细设计-1">详细设计
&lt;/h3>&lt;p>笔迹识别函数processStrokes包括3部分：&lt;/p>
&lt;ul>
&lt;li>qt笔迹 &amp;ndash;&amp;gt; windows LNK（handleCoordinateConversion）&lt;/li>
&lt;li>异步识别&lt;/li>
&lt;li>结果补充(如果候选词&amp;lt;9则补充，同时加入拼音和4个词组)（dataSupplement）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">InkStrokeContainer&lt;/span> &lt;span class="n">WindowsTabletEngine&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">handleCoordinateConversion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StrokeData&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">strokes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InkStrokeContainer&lt;/span> &lt;span class="n">strokeContainer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InkStrokeBuilder&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// qt坐标转换为winrt坐标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_recognitionTarget&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RecognitionMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SingleChar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 单字模式：将所有笔画的点合并成一个笔画
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">IVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Foundation&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">allpoints&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">single_threaded_vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Foundation&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">stroke&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">strokes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QPoint&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">point&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">stroke&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">scaledX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">scaledY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">allpoints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Foundation&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scaledX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">scaledY&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">inkStroke&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateStroke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">allpoints&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">strokeContainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddStroke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inkStroke&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_recognitionTarget&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RecognitionMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MultiChar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">stroke&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">strokes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 自由书写模式：保持原有的多笔画结构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">IVector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Foundation&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">points&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">single_threaded_vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Foundation&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QPoint&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">point&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">stroke&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">scaledX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">scaledY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">points&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Windows&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Foundation&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scaledX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">scaledY&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">inkStroke&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateStroke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">strokeContainer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddStroke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inkStroke&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">strokeContainer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果补充&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">WindowsTabletEngine&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">dataSupplement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RecognitionResult&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RecognitionMode&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RecognitionMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SingleChar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef USE_LIBRARY
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="c1">// 1. 如果候选字少于9个，补充相似字
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="n">firstChar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">getSimilarCharacters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">firstChar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">similar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 添加相似字到候选列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">similar&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 确保不超过9个
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeLast&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 2. 为所有候选字获取拼音
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pinyins&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clear&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 确保拼音列表为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pendingPinyinRequests&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">character&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">getPinyin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pendingPinyinRequests&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">char_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">pinyin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pinyins&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">character&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pinyin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="n">pendingPinyinRequests&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 当所有拼音都获取完毕后，获取相关词组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pendingPinyinRequests&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 3. 获取相关词组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">getRelatedWords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">relatedWords&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里可以发送完成信号（上述步骤都是异步获取，当获取完成后，发送信号通知）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">emit&lt;/span> &lt;span class="nf">recognitionCompleted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mode&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RecognitionMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MultiChar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">candidates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QString&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fromLocal8Bit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">emit&lt;/span> &lt;span class="n">recognitionCompleted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="词典">词典
&lt;/h2>&lt;p>词典用来补充数据，为识别出的字提供拼音、词组服务。词典分为在线词典和本地词典，对于这种双模式词典设计，我使用策略、单例、工厂模式的组合。&lt;/p>
&lt;p>策略模式：采用在线词典和本地词典双重实现&lt;/p>
&lt;p>工厂模式：使用词典管理器统一管理不同词典实现&lt;/p>
&lt;p>单例模式：词典管理器采用单例设计，确保全局唯一访问点&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241212124604757.png"
width="2061"
height="612"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241212124604757_hu_da745297493ba6e3.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241212124604757_hu_ebcb156b3ef56bfe.png 1024w"
loading="lazy"
alt="image-20241212124604757"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="808px"
>&lt;/p>
&lt;h3 id="详细设计-2">详细设计
&lt;/h3>&lt;p>词典接口（IDictionary）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义统一的词典操作接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>包含拼音查询、相似字查询、相关词组查询等基本功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提供可用性检查机制&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">IDictionary&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">IDictionary&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 核心接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getPinyin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getSimilarCharacters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getRelatedWords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 状态检查
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">isAvailable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本地词典（LocalDictionary）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基于 SQLite 数据库实现&lt;/p>
&lt;/li>
&lt;li>
&lt;p>包含字符表和词组表两个基本表结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提供快速的本地查询能力&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LocalDictionary&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">IDictionary&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LocalDictionary&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">LocalDictionary&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getPinyin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getSimilarCharacters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getRelatedWords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">isAvailable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">initDatabase&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QSqlDatabase&lt;/span> &lt;span class="n">m_db&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">m_isInitialized&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在线词典（OnlineDictionary）（未测试）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过网络 API 实现（采用百度只能云）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提供更丰富的词典数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持数据的实时更新&lt;/p>
&lt;/li>
&lt;li>
&lt;p>包含请求缓存机制，优化性能&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="n">OnlineDictionary&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">public&lt;/span> &lt;span class="n">QObject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">public&lt;/span> &lt;span class="n">IDictionary&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Q_OBJECT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">explicit&lt;/span> &lt;span class="n">OnlineDictionary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">OnlineDictionary&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">IDictionary&lt;/span> &lt;span class="err">接口实现&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">getPinyin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">getSimilarCharacters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">getRelatedWords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">bool&lt;/span> &lt;span class="n">isAvailable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">API配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">setApiKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">appId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">secretKey&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="n">milliseconds&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">signals&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">errorMessage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">private&lt;/span> &lt;span class="n">slots&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">handleNetworkReply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QNetworkReply&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">reply&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">handleTimeout&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">private&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">API请求相关&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="n">generateSignature&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QUrlQuery&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QNetworkReply&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">endpoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">QUrlQuery&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">缓存相关&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QVariant&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">qint64&lt;/span> &lt;span class="n">timestamp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QVariant&lt;/span> &lt;span class="n">getCachedData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">cacheData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QVariant&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">cleanCache&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">private&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">网络相关&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QNetworkAccessManager&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_networkManager&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QNetworkReply&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QJsonDocument&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">m_pendingReplies&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QTimer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_timeoutTimer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">m_timeout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">API配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="n">m_appId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="n">m_secretKey&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="n">m_baseUrl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">bool&lt;/span> &lt;span class="n">m_isInitialized&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">缓存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QString&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CacheEntry&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">m_cache&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">CACHE_DURATION&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3600&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">缓存时间（秒）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">CACHE_MAX_SIZE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">最大缓存条目数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>词典管理器（DictionaryManager）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>统一管理在线和本地词典&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提供智能切换机制&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处理词典查询的优先级策略&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DictionaryManager&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取拼音
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getPinyin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取相似字
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getSimilarCharacters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取相关词
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getRelatedWords&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">character&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QStringList&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 配置方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setOnlineApiKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">appId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">secretKey&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 设置是否优先使用在线词典
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setPreferOnline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">prefer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">DictionaryManager&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IDictionary&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">getPreferredDictionary&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">OnlineDictionary&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_onlineDictionary&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LocalDictionary&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_localDictionary&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">m_preferOnline&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="候选词区域">候选词区域
&lt;/h2>&lt;p>候选词区域负责展示和管理用户可选择的候选字词。采用 Qt 的 Model-View 架构。&lt;/p>
&lt;p>view：系统提供两种候选词视图模式:单字模式(SingleCharCandidateView)，长句模式(LongSentenceCandidateView),里面设置成员&lt;code>QTableView&lt;/code>&lt;/p>
&lt;p>delegate: 通过继承&lt;code>QStyledItemDelegate&lt;/code>实现自定义代理。对TableItem设置的&lt;strong>动态属性&lt;/strong>进行样式绘制。&lt;/p>
&lt;p>model：通过继承&lt;code>QAbstractTableModel&lt;/code>实现自定义模型。存储候选词数据，接受笔迹识别控制器传输的候选词数据。&lt;/p>
&lt;h3 id="时序图-2">时序图
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211215501576.png"
width="1255"
height="540"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211215501576_hu_3a51b7437c3ed61c.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241211215501576_hu_569b950e5b5093ec.png 1024w"
loading="lazy"
alt="image-20241211215501576"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="557px"
>&lt;/p>
&lt;h3 id="详细设计-3">详细设计
&lt;/h3>&lt;p>候选词区域有2种模式：单字手写和长句手写&lt;/p>
&lt;ul>
&lt;li>在单字手写模式下，候选词区域(SingleCharCandidateView)由4部分组成，从上到下
&lt;ul>
&lt;li>提示窗口（QWidget* m_hintWidget）：显示鼠标hover的候选词，如果是汉字，添加拼音&lt;/li>
&lt;li>单字候选词（QTableView* m_mainCandidateView）：3x3表格，显示单字&lt;/li>
&lt;li>词组候选词（QTableView* m_phraseCandidateView）：2x2表，显示词组&lt;/li>
&lt;li>4个工具按钮：标点、数字、字母、语言&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SingleCharCandidateView&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">CandidateView&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Q_OBJECT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 事件过滤器(过滤鼠标事件，未TableItem添加动态属性)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">eventFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">watched&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">QEvent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QWidget&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_hintWidget&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 提示窗口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">QLabel&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_hintLabel&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 提示文本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">QLabel&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_pinyinLabel&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="c1">// 提示拼音
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QTableView&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_mainCandidateView&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 3x3候选词表格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">QTableView&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_phraseCandidateView&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 2x2词组表格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在长句手写模式下，候选词区域(LongSentenceCandidateView)由2部分，从上到下
&lt;ul>
&lt;li>候选词（QTableView* m_candidateView）：1x9的表格，显示识别的长句&lt;/li>
&lt;li>4个工具按钮：标点、数字、字母、语言&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">class LongSentenceCandidateView : public CandidateView
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Q_OBJECT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">protected:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 事件过滤器(过滤鼠标事件，未TableItem添加动态属性)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bool eventFilter(QObject* watched, QEvent* event) override;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> QTableView* m_candidateView{nullptr}; // 1x9候选词表格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="手写上屏">手写上屏
&lt;/h2>&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211212731512.png"
width="919"
height="199"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241211212731512_hu_72b8090cd47603c2.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241211212731512_hu_f571d6b32f1f8474.png 1024w"
loading="lazy"
alt="image-20241211212731512"
class="gallery-image"
data-flex-grow="461"
data-flex-basis="1108px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>采用分离式设计：Qt程序负责手写识别，TSF模块负责文本服务&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用命名管道（IPC）实现两个模块间的通信&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TSF模块以COM组件形式实现，注册为系统输入法&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>基本流程：手写输入 -&amp;gt; Qt识别 -&amp;gt; IPC传输 -&amp;gt; TSF接收 -&amp;gt; 创建EditSession -&amp;gt; 插入文本&lt;/p>
&lt;p>&lt;strong>该功能我没有测试通过，我成功了注册了输入法，实现了qt程序和tsf模块的通信，但是在创建编辑会话这一步，我无法将文本插入进去&lt;/strong>&lt;/p>
&lt;p>具体的模块划分&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/handwrite-input-method/image/image-20241212130702519.png"
width="707"
height="592"
srcset="https://sfw003.github.io/p/handwrite-input-method/image/image-20241212130702519_hu_4349e801bd3afab5.png 480w, https://sfw003.github.io/p/handwrite-input-method/image/image-20241212130702519_hu_7501e988a22aefe5.png 1024w"
loading="lazy"
alt="image-20241212130702519"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;p>核心组件：&lt;/p>
&lt;p>TextService类：实现TSF核心接口&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ITfTextInputProcessor：输入法处理器接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ITfThreadMgrEventSink：线程管理事件接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ITfTextEditSink：文本编辑事件接口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EditSession类：实现文本编辑会话负责实际的文本插入操作管理文本选区和光标位置&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>单例模式</title><link>https://sfw003.github.io/p/soft-project-design-pattern-singleton/</link><pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-design-pattern-singleton/</guid><description>&lt;h2 id="单例模式">单例模式
&lt;/h2>&lt;p>单例模式是指在内存只会创建且仅创建一次对象的设计模式，确保在程序运行期间只有唯一的实例。&lt;/p>
&lt;h2 id="使用场景">使用场景
&lt;/h2>&lt;p>&lt;strong>当对象需要被共享的时候又或者某类需要频繁实例化.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>设备管理器，系统中可能有多个设备，但是只有一个设备管理器，用于管理设备驱动;&lt;/li>
&lt;li>数据池，用来缓存数据的数据结构，需要在一处写，多处读取或者多处写，多处读取;&lt;/li>
&lt;li>回收站,在整个系统运行过程中，回收站一直维护着仅有的一个实例;&lt;/li>
&lt;li>应用程序的日志应用，一般都何用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加;&lt;/li>
&lt;li>网站的计数器，一般也是采用单例模式实现，否则难以同步。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>实际开发中，如果不是完美符合使用场景，不推荐使用。&lt;/strong>
如果实际开发经验不够，很容易看什么都是单例。&lt;/p>
&lt;h2 id="c实现">c++实现
&lt;/h2>&lt;p>单例模式的关键点：创建且仅创建一次对象
2个关键点：&lt;/p>
&lt;ol>
&lt;li>如何只创建一次？&lt;/li>
&lt;li>如何禁止拷贝和赋值？（保证只有一个）&lt;/li>
&lt;/ol>
&lt;h3 id="静态局部变量">静态局部变量
&lt;/h3>&lt;p>对于1：这很容易想到&lt;strong>静态局部变量&lt;/strong>
当一个函数中定义一个局部静态变量，那么这个局部静态变量只会初始化一次，就是在这个函数第一次调用的时候，以后无论调用几次这个函数，函数内的局部静态变量都不再初始化。&lt;/p>
&lt;p>对于2：可以将拷贝构造和赋值重载设置位私有成员。&lt;/p>
&lt;p>综上，我们可以得到第一个版本&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton1&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述版本的单例模式在C++11 以前存在多线程不安全的情况，多个线程同时执行这段代码，&lt;strong>编译器可能会初始化多个静态变量&lt;/strong>。&lt;/p>
&lt;p>magic static, 它是C++11标准中提供的新特性&lt;/p>
&lt;ul>
&lt;li>如果在初始化变量时控制同时进入声明，则并发执行应等待初始化完成。&lt;/li>
&lt;li>如果当变量在初始化的时候，并发同时进入声明语句，并发线程将会阻塞等待初始化结束。&lt;/li>
&lt;/ul>
&lt;p>即c++规定各厂商优化编译器，能保证线程安全。所以为了保证运行安全请确保使用C++11以上的标准。&lt;/p>
&lt;p>&lt;code>/Zc:threadSafeInit&lt;/code> 是 Microsoft Visual Studio 编译器中的一个编译选项，作用是启用线程安全的静态局部变量初始化。这个选项对于 C++11 引入的“magic statics”（线程安全的静态局部变量）机制尤为重要。
当启用 &lt;code>/Zc:threadSafeInit&lt;/code>（默认在 C++11 及更高标准中启用）时，编译器会确保静态局部变量的初始化是线程安全的。这意味着如果多个线程首次访问同一个静态局部变量，编译器会保证该变量只被初始化一次，并确保其他线程可以看到初始化后的正确值。
VS2015+：默认启用线程安全初始化（等效于主动设置 /Zc:threadSafeInit）。
VS2013 及之前：不启用线程安全初始化，需手动加锁或升级编译器&lt;/p>
&lt;p>在项目- 属性 - C/C++ -命令行里可以查看。如果想禁用，输入&lt;code>/Zc:threadSafeInit-&lt;/code>
&lt;img src="https://sfw003.github.io/p/soft-project-design-pattern-singleton/image/e6b5e2f9a64d4f88911dc4671835e132.png"
width="1122"
height="726"
srcset="https://sfw003.github.io/p/soft-project-design-pattern-singleton/image/e6b5e2f9a64d4f88911dc4671835e132_hu_3a4f87f763386020.png 480w, https://sfw003.github.io/p/soft-project-design-pattern-singleton/image/e6b5e2f9a64d4f88911dc4671835e132_hu_6dc31f6464806f90.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;p>实际开发中一定要注意是否遵循规定。
如果遵循，推荐使用静态局部变量的方式，又简单又安全。&lt;/p>
&lt;h3 id="饿汉式线程安全">饿汉式（线程安全）
&lt;/h3>&lt;blockquote>
&lt;p>饿汉式：程序启动即初始化&lt;/p>&lt;/blockquote>
&lt;p>在C++11 推出以前，局部静态变量的方式实现单例存在线程安全问题，所以部分人提出了一种方案，就是在主线程启动后，其他线程没有启动前，由主线程先初始化单例资源，这样其他线程获取的资源就不涉及重复初始化的情况了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//饿汉式初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton2&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton2&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Singleton2&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton2&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Singleton2&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getInstance&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>虽然从使用的角度规避多线程的安全问题，但是又引出了很多问题，如1. 启动即初始化，可能导致程序启动时间延长。2. 从规则上束缚了开发者&lt;/p>
&lt;h3 id="懒汉式线程安全">懒汉式（线程安全）
&lt;/h3>&lt;blockquote>
&lt;p>懒汉式：需要时即初始化&lt;/p>&lt;/blockquote>
&lt;p>事例何时初始化应该由开发者决定。因此我们使用懒汉式初始化。但懒汉式初始化存在线程安全问题，即资源的重复初始化，因此，我们需要加锁。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//这里不加锁判断，提高性能
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="c1">//1处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//2处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="c1">//3处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么2处要加一个判断呢？
假如现在有线程A, B同时调用getInstance()&lt;/p>
&lt;ol>
&lt;li>此时s_single == nullptr， A和B同时进入1处，假设A加上锁，B等待&lt;/li>
&lt;li>A执行完3处的命令后，通过s_mutex.unlock()解锁，此时B加上锁。&lt;/li>
&lt;li>如果没有2处，B会再执行一遍3处，这会导致内存泄漏，而加上2处后，B会判断s_single != nullptr, 解锁返回&lt;/li>
&lt;/ol>
&lt;h3 id="懒汉式线程安全-智能指针">懒汉式（线程安全）+ 智能指针
&lt;/h3>&lt;p>但这还没完，懒汉式相比饿汉式有一个最大的不同：不确定是哪个线程初始化的。那之后由谁析构呢？
其实不必操心，我们可以利用c++的RAIII，使用智能指针。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有些人认为虽然智能指针能自动回收内存，如果有开发人员手动delete指针怎么办？将析构函数设为私有，为智能指针添加&lt;strong>删除器&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[](&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">single&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//析构私有
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>上面的代码仍然存在危险，主要原因在于new操作是由三部分组成的&lt;/p>
&lt;ol>
&lt;li>
&lt;p>分配内存
在第一个阶段，new 操作会调用内存分配函数（默认是 operator new），在堆上为新对象分配足够的空间。如果内存分配失败，通常会抛出 std::bad_alloc 异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用构造函数
分配到内存后，new 操作会在刚刚分配的内存上调用对象的构造函数，初始化该对象的各个成员。构造函数的参数可以在 new 语句中直接传递。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回指针
构造函数执行完毕后，new 操作会返回一个指向新创建对象的指针。如果是 new[] 操作符（即分配数组），则返回指向数组起始元素的指针&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这里的问题就再2和3的顺序上，有些编译器会优化，将2和3的顺序颠倒。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//1处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton3&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="c1">//2处
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">s_mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果2和3的顺序颠倒，那么顺序变为
1.分配内存
3.返回指针
2.调用构造
可能出现下面的情况：
线程A执行到2处的new的第3步，此时s_single已经不为空，但是指向的对象还未调用构造。
线程B刚好执行1处，此时s_single != nullptr, 直接返回s_single。&lt;strong>外部将接受到一个还没来的及调用构造函数的对象的指针。&lt;/strong>&lt;/p>
&lt;p>为解决这个问题，C++11 推出了std::call_once函数保证多个线程只执行一次&lt;/p>
&lt;h3 id="懒汉式线程安全智能指针call_once">懒汉式(线程安全)+智能指针+call_once
&lt;/h3>&lt;p>&lt;code>std::call_once &lt;/code>是 C++11 引入的一个函数，用于保证某段代码在多线程环境中只被执行一次。这对单例模式、懒加载或只需执行一次的初始化操作非常有用。
&lt;code>std::call_once&lt;/code> 与一个&lt;code> std::once_flag&lt;/code> 对象配合使用。&lt;code>std::once_flag&lt;/code> 是一个标志，确保 &lt;code>std::call_once&lt;/code> 所调用的函数只会执行一次，不论有多少个线程试图同时调用它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">once_flag&lt;/span> &lt;span class="n">s_flag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">call_once&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s_flag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[](&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">single&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//析构私有
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s_single&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s_single&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="懒汉式线程安全智能指针call_oncecrtp">懒汉式(线程安全)+智能指针+call_once+CRTP
&lt;/h3>&lt;p>为了让单例类更通用，可以通过继承实现多个单例类。
注：这里需要使用c++的CRTP（奇异递归模板模式），不知道是什么，自己查一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mutex&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getInstance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">once_flag&lt;/span> &lt;span class="n">s_flag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">call_once&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s_flag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s_instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s_instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s_instance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">s_instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="k">public&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="c1">//CRTP
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Singleton&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>friend class Singleton&amp;lt;A&amp;gt;;&lt;/code>的目的是允许 &lt;code>Singleton&amp;lt;A&amp;gt;&lt;/code> 类访问 A 的受保护构造函数。没有这个 friend 声明，&lt;code>Singleton&amp;lt;A&amp;gt; &lt;/code>将无法调用 A 的构造函数，从而无法在 &lt;code>getInstance&lt;/code> 方法中正确地创建 A 的实例。&lt;/p></description></item><item><title>bug</title><link>https://sfw003.github.io/p/soft-project-bug/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-bug/</guid><description>&lt;h2 id="bug">Bug
&lt;/h2>&lt;p>定义：一个计算机bug指在计算机程序中存在的一个错误(error)、缺陷(flaw)、疏忽(mistake)或者故障（fault)，这些bug使程序无法正确的运行。Bug产生于程序的源代码或者程序设计阶段的疏忽或者错误。&lt;/p>
&lt;h3 id="bug的描述">Bug的描述
&lt;/h3>&lt;p>描述bug的基本要素：问题出现的版本、问题出现的环境、问题出现的步骤、预期结果、实际结果、解决方案（可以不提）&lt;/p>
&lt;p>案例：&lt;/p>
&lt;p>&lt;strong>问题出现的版本&lt;/strong>：谷歌浏览器版本123.0.6312.123（正式版本）(64位)
&lt;strong>问题出现的环境&lt;/strong>：Windows家庭版
&lt;strong>问题出现的步骤&lt;/strong>：
1、打开谷歌浏览器，输入网址https://www.101eduyun.com/
2、等待首页页面渲染完成
&lt;strong>预期结果&lt;/strong>：二维码与登陆模块不会出现遮挡，二维码可以正常扫描
&lt;strong>实际结果&lt;/strong>：二维码被登陆模块遮挡，二维码扫描失败&lt;/p>
&lt;h3 id="bug的级别">Bug的级别
&lt;/h3>&lt;p>bug级别⼀般分为：崩溃、严重、⼀般、次要。具体参考公司的Bug文档&lt;/p>
&lt;h3 id="bug的流程">Bug的流程
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-bug/image/image-20250407160810821.png"
width="563"
height="692"
srcset="https://sfw003.github.io/p/soft-project-bug/image/image-20250407160810821_hu_31c1bf736e85390e.png 480w, https://sfw003.github.io/p/soft-project-bug/image/image-20250407160810821_hu_26050c697fb12f75.png 1024w"
loading="lazy"
alt="image-20250407160810821"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="195px"
>&lt;/p></description></item><item><title>测试分类</title><link>https://sfw003.github.io/p/soft-project-test-classification/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-test-classification/</guid><description/></item><item><title>测试用例</title><link>https://sfw003.github.io/p/soft-project-test-case/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-test-case/</guid><description>&lt;h2 id="测试用例">测试用例
&lt;/h2>&lt;p>测试用例（TestCase）是为了实施测试而向被测试的系统提供的一组集合，这组集合包含：测试环境、操作步骤、测试数据、预期结果等要素。&lt;/p>
&lt;h2 id="设计思想">设计思想
&lt;/h2>&lt;p>&lt;strong>工具选择：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>过去的方式：Excel&lt;/p>
&lt;/li>
&lt;li>
&lt;p>现在的方式：思维导图&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>设计思想：&lt;/strong>&lt;/p>
&lt;p>正确设计测试用例的思想：&lt;strong>常规思维+逆向思维+发散性思维&lt;/strong>
设计测试用例的原则二：&lt;/p>
&lt;ol>
&lt;li>测试用例的编写不仅应当根据有效和预料到的输入情况，而且也应该根据无效和未预料到的输入情况。&lt;/li>
&lt;li>检查程序是否“未做其应该做的”仅是成功的一半，测试的另一半是检查程序是否“做了其不应该做的”。(是上一条原则的必然结果)&lt;/li>
&lt;li>计划测试工作时不应默许假定不会发现错误。&lt;/li>
&lt;/ol>
&lt;h2 id="设计方法">设计方法
&lt;/h2>&lt;p>设计测试用例的万能公式：&lt;strong>功能测试+界面测试+性能测试+兼容性测试+易用性测试+安全测试&lt;/strong>&lt;/p>
&lt;p>&lt;strong>特殊测试：弱网测试，安装和卸载测试&lt;/strong>&lt;/p>
&lt;h3 id="基于需求的设计方法">基于需求的设计方法
&lt;/h3>&lt;p>基于需求的设计方法也是总的设计测试用例的方法，在工作中，我们需要参考需求文档/产品规格说明书来设计测试用例。
测试人员接到需求之后，要对需求进行分析和验证，从合理的需求中进一步分析细化需求，从细化的需求中找出测试点，根据这些测试点再去设计测试用例。
以该注册邮箱账号需求为例，我们来设计测试用例。&lt;/p>
&lt;p>需求如下：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408132354814.png"
width="516"
height="169"
srcset="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408132354814_hu_df0be855c97f0d28.png 480w, https://sfw003.github.io/p/soft-project-test-case/image/image-20250408132354814_hu_b77688ae9f043e66.png 1024w"
loading="lazy"
alt="image-20250408132354814"
class="gallery-image"
data-flex-grow="305"
data-flex-basis="732px"
>&lt;/p>
&lt;p>根据万能公式，我们可以设计出基本的轮廓&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408134329736.png"
width="577"
height="216"
srcset="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408134329736_hu_99cc5f28f8cf034c.png 480w, https://sfw003.github.io/p/soft-project-test-case/image/image-20250408134329736_hu_836b18b93b63fad7.png 1024w"
loading="lazy"
alt="image-20250408134329736"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="641px"
>&lt;/p>
&lt;p>以功能测试为例：
&lt;img src="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408134732381.png"
width="998"
height="722"
srcset="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408134732381_hu_98a8686e8619fe9f.png 480w, https://sfw003.github.io/p/soft-project-test-case/image/image-20250408134732381_hu_6cc72bc69521e6ea.png 1024w"
loading="lazy"
alt="image-20250408134732381"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;blockquote>
&lt;p>上面的内容不包含具体的测试用例&lt;/p>&lt;/blockquote>
&lt;h3 id="具体用例的设计方法">具体用例的设计方法
&lt;/h3>&lt;h4 id="等价类和边界值法">等价类和边界值法
&lt;/h4>&lt;p>上面的格式要求：6-15位字符，我们如何测试呢？分别测试6,7,8……15位吗。如果是6-1500位字符呢？显然穷举很麻烦， 我们采用方法是等价类。&lt;/p>
&lt;p>依据需求将输入（特殊情况下会考虑输出）划分为若干个等价类，从等价类中选出一个测试用例，如果这个测试用例测试通过，则认为所代表的等价类测试通过，这样就可以用较少的测试用例达到尽量多的功能覆盖，解决了不能穷举测试的问题。&lt;/p>
&lt;p>&lt;strong>等价类&lt;/strong>分类：&lt;/p>
&lt;ul>
&lt;li>有效等价类：对于程序的规格说明书是合理的、有意义的输入数据构成的集合，利用有效等价类验证程序是否实现了规格说明中所规定的功能和性能&lt;/li>
&lt;li>无效等价类：根据需求说明书，不满足需求的集合。&lt;/li>
&lt;/ul>
&lt;p>6-15位则可以划为&lt;/p>
&lt;ul>
&lt;li>有效等价类：[6, 15]&lt;/li>
&lt;li>无效等价类：[0, 6) (15 正无穷)&lt;/li>
&lt;/ul>
&lt;p>但这还是几个区间，如何设计具体的值？&lt;strong>边界值法&lt;/strong>&lt;/p>
&lt;p>边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。&lt;/p>
&lt;p>边界值包含: &lt;strong>边界值、次边界值&lt;/strong>&lt;/p>
&lt;p>[6, 15]&lt;/p>
&lt;ul>
&lt;li>边界值为 6， 15&lt;/li>
&lt;li>次边界值为5，16&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408140837719.png"
width="598"
height="298"
srcset="https://sfw003.github.io/p/soft-project-test-case/image/image-20250408140837719_hu_1c8de8e2c3a31c39.png 480w, https://sfw003.github.io/p/soft-project-test-case/image/image-20250408140837719_hu_7c34d23a2d54567a.png 1024w"
loading="lazy"
alt="image-20250408140837719"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;h4 id="正交法">正交法
&lt;/h4>&lt;h2 id="测试用例案例">测试用例案例
&lt;/h2>&lt;h3 id="对命令进行测试">对命令进行测试
&lt;/h3>&lt;p>如对windows/linux的某个命令设计测试用例&lt;/p>
&lt;p>功能测试：对不同的文件类型进行测试
1）普通的txt文件能够生成zip文件
2）图片/视频/zip文件能够生成zip文件
3）多个文件能够生成zip文件(混合文件)
4）空文件夹可以生成zip文件
5）错误的命令是否可以解压 (zipzip/没有写压缩包文件名称/没有源文件)
6）其他参数的测试
界面测试：
1）文件压缩成功命令行提示是否美观
2）文件压缩报错命令行提示是否友好
性能测试：
1）文件大小超过1G时文件是否可以压缩
2）文件大小超过1G时文件压缩消耗的时间是否在合理的时间范围内
兼容性测试：
1）zip工具可以在多系统上使用，如Windows、Linux、Mac
易用性测试：
1）zip命令有使用帮助教程，如zip&amp;ndash;help命令下会展示如何使用
安全性：
1）使用zip命令不会泄漏文件内容&lt;/p>
&lt;h3 id="对接口进行测试">对接口进行测试
&lt;/h3>&lt;p>假设一个论坛系统有接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">http://ip:port/get?id=10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">如果接口为 http://ip:port/get 返回所有的帖子
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">如果接口为 http://ip:port/get?id=10 返回id=10的帖子
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于接口测试，我们就不考虑界面测试、易用性测试、兼容性测试等等，专注于功能测试、安全测试。&lt;/p></description></item><item><title>自动化测试</title><link>https://sfw003.github.io/p/soft-project-automation-test/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-automation-test/</guid><description/></item><item><title>软件工程</title><link>https://sfw003.github.io/p/soft-project/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project/</guid><description>&lt;h1 id="软件生命周期">软件生命周期
&lt;/h1>&lt;p>软件生命周期（Software Development Life Cycle，SDLC）是软件开发和维护的整个过程，包括需求分析、设计、实现、测试、部署和维护等阶段。&lt;/p></description></item><item><title>设计模式</title><link>https://sfw003.github.io/p/soft-project-design-pattern/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-design-pattern/</guid><description>&lt;p>编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序(软件)，具有更好特性。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>代码复用性(即:相同功能的代码，不用多次编写)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可读性(即:编程规范性，便于其他程序员的阅读和理解)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可扩展性(即:当需要增加新的功能时，非常的方便，称为可维护)4)可靠性(即:当我们增加新的功能后，对原来的功能没有影响)5)使程序呈现高内聚，低耦合的特性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="七大原则">七大原则
&lt;/h1>&lt;ol>
&lt;li>开闭原则&lt;/li>
&lt;li>依赖倒转(倒置)原则&lt;/li>
&lt;li>单一职责原则&lt;/li>
&lt;li>接口隔离原则&lt;/li>
&lt;li>里氏替换原则&lt;/li>
&lt;li>迪米特法则&lt;/li>
&lt;li>合成复用原则&lt;/li>
&lt;/ol>
&lt;h2 id="开闭原则-">开闭原则 *
&lt;/h2>&lt;p>Open-Closed Principle, OCP&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对扩展开放，对更改关闭。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="单一职责原则-">单一职责原则 *
&lt;/h2>&lt;p>Simple Responsibility Pinciple，SRP&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不要存在多余一个导致类变更的原因。一个类应该应该只负责一项职责。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个应该实现单一职责，否则就应该把类拆分，便于后期的维护&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="依赖倒转倒置原则">依赖倒转(倒置)原则
&lt;/h2>&lt;p>Dependence Inversion Principle,DIP&lt;/p>
&lt;ul>
&lt;li>
&lt;p>高层模块(稳定)不应该依赖于底层模块(变化),二者都应该依赖于抽象(稳定)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>抽象(稳定)不应该依赖于实现细节(变化),实现细节应该依赖于抽象(稳定).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>数据库操作&lt;/strong>&lt;/p>
&lt;p>假设你有一个高层模块（比如用户管理模块），它需要访问数据库执行增、删、改、查操作。如果在不遵守依赖倒转原则的情况下，用户管理模块直接依赖于具体的数据库实现（例如 MySQL 操作），那么这个模块就与数据库紧密耦合，不利于扩展和测试。&lt;/p>
&lt;p>&lt;strong>应用DIP：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>高层模块&lt;/strong>：用户管理模块定义一个接口 &lt;code>IDatabase&lt;/code>，负责所有与数据库相关的操作。&lt;/li>
&lt;li>&lt;strong>低层模块&lt;/strong>：具体的数据库实现类（如 &lt;code>MySQLDatabase&lt;/code> 或 &lt;code>PostgreSQLDatabase&lt;/code>）实现 &lt;code>IDatabase&lt;/code> 接口。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>支付接口集成&lt;/strong>&lt;/p>
&lt;p>假设你的系统支持多种支付方式（如支付宝、微信支付、银行卡支付等），如果每次增加一种支付方式都需要修改支付处理的高层逻辑，就会导致代码的耦合度增加，违反了单一职责和开闭原则。&lt;/p>
&lt;p>&lt;strong>应用DIP：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>高层模块&lt;/strong>：支付处理模块定义一个 &lt;code>IPaymentProcessor&lt;/code> 接口。&lt;/li>
&lt;li>&lt;strong>低层模块&lt;/strong>：每种支付方式都实现 &lt;code>IPaymentProcessor&lt;/code> 接口。&lt;/li>
&lt;/ul>
&lt;h2 id="里氏替换原则">里氏替换原则
&lt;/h2>&lt;p>Liskov Substitution Principle,LSP&lt;/p>
&lt;ul>
&lt;li>通俗的来讲就是子类可以扩展父类的功能，但不能改变父类原有的功能。【尽量不用重写父类的方法】&lt;/li>
&lt;/ul>
&lt;p>动物类和鸟类&lt;/p>
&lt;p>假设有一个 &lt;code>Animal&lt;/code> 类，它有一个 &lt;code>move&lt;/code> 方法，表示动物的移动方式。&lt;code>Bird&lt;/code> 类继承自 &lt;code>Animal&lt;/code> 类，并且需要实现 &lt;code>move&lt;/code> 方法来表示鸟类的飞行。这里的问题是，如果我们在 &lt;code>Bird&lt;/code> 类中强行调用 &lt;code>move&lt;/code> 方法来表示飞行，就可能出现不符合预期的行为，尤其是当 &lt;code>Bird&lt;/code> 类具有一些不适用于其他动物的行为时。&lt;/p>
&lt;p>如果我们使用 LSP 来设计这个问题，应该将 &lt;code>move&lt;/code> 方法根据动物的类型进行抽象，避免让所有的动物都遵循同样的 &lt;code>move&lt;/code> 行为。我们可以将动物分为两类，&lt;code>Flyable&lt;/code> 和 &lt;code>Swimmable&lt;/code>，分别定义 &lt;code>fly&lt;/code> 和 &lt;code>swim&lt;/code> 方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">class Animal {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> virtual void sound() = 0; // 动物发出声音
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Flyable {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> virtual void fly() = 0; // 可以飞的动物
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Swimmable {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> virtual void swim() = 0; // 可以游泳的动物
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="接口隔离原则">接口隔离原则
&lt;/h2>&lt;p>Interface Segregation Principle,ISP&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用多个专门的接口，而不使用单一的总接口，不应该强迫客户程序依赖它们不用的方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接口尽量细化，同时接口中的方法尽量少并且完备&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>（注：这里和&amp;quot;单一职责&amp;quot;是有区别的,单一职责强调类的职责单一，站在业务逻辑的角度，这里强调的是接口，要求接口的方法尽可能的少而完备）&lt;/p>
&lt;p>符合我们常说的&lt;strong>高内聚低耦合&lt;/strong>的设计思想，从而使得类具有很好的可读性、可扩展性和可维护性&lt;/p>
&lt;h2 id="迪米特法则">迪米特法则
&lt;/h2>&lt;p>迪米特原则（Law of Demeter LoD）是指一个对象应该对其他对象保持最少的了解，又叫&lt;strong>最少知道原则&lt;/strong>（Least Knowledge Principle,LKP），尽量降低类与类之间的耦合。迪米特原则主要强调只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输出参数中的类都可以称之为成员朋友类，而出现在方法体内部的类不属于朋友类。&lt;/p>
&lt;h2 id="合成复用原则">合成复用原则
&lt;/h2>&lt;p>合成复用原则的主要观点是，应该优先考虑使用组合，即将现有的类对象作为新类的成员变量，而不是继承已有的类&lt;/p>
&lt;p>&lt;strong>但是组合是否优于继承完全取决实际情况。&lt;/strong>&lt;/p>
&lt;h1 id="设计模式">设计模式
&lt;/h1>&lt;h2 id="单例模式-">单例模式 *
&lt;/h2>&lt;p>单例模式确保其一个类只有一个实例，而且自行实例化并向整个系统提供单个对象的模式。单例模式只应在有真正的“单一实例”的需求时才可使用。&lt;/p>
&lt;p>单例模式很常用，但也特别容易用错。一定要明确 单一实例的应用场景&lt;/p>
&lt;h2 id="工厂模式-">工厂模式 *
&lt;/h2>&lt;p>工厂模式将目的创建对象的具体过程屏蔽隔离起来，从而达到更高的灵活性，工厂模式可以分为三类：&lt;/p>
&lt;ul>
&lt;li>简单工厂模式(Simple Factory)&lt;/li>
&lt;li>工厂方法模式(Factory Method)&lt;/li>
&lt;li>抽象工厂模式(Abstract Factory)&lt;/li>
&lt;/ul>
&lt;p>一般用一下简单工厂就可以了&lt;/p>
&lt;p>&lt;strong>简单工厂&lt;/strong>&lt;/p>
&lt;p>简单工厂模式就是一个工厂类根据传入的参数决定创建出哪一类产品类的实例，被创建的实例具有共同的父类或接口。&lt;/p>
&lt;img src="image/IKKTMBIAJQ.png" alt="po_bgjgjccchbhbia" style="zoom:50%;" />
&lt;p>举例：聊天消息&lt;/p>
&lt;p>&lt;strong>工厂方法&lt;/strong>&lt;/p>
&lt;p>工厂方法模式：它也被叫做工厂模式。工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。&lt;/p>
&lt;p>工厂方法相对于简单工厂来说，就是把单一的工厂类，分成了多个具体的小厂，并抽象出一个工厂接口，这个接口只负责创建的方法，具体创建的过程由小工厂完成。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-design-pattern/image/2L5TOBIAYE.png"
width="2082"
height="900"
srcset="https://sfw003.github.io/p/soft-project-design-pattern/image/2L5TOBIAYE_hu_b17f7cf78f89a6c5.png 480w, https://sfw003.github.io/p/soft-project-design-pattern/image/2L5TOBIAYE_hu_cf543bea1edad16c.png 1024w"
loading="lazy"
alt="po_bgjhabdiijghja"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="555px"
>&lt;/p>
&lt;p>&lt;strong>抽象工厂&lt;/strong>&lt;/p>
&lt;p>抽象工厂模式是工厂方法的仅一步深化，在这个模式中的工厂类不单单可以创建一个对象，而是可以创建一组对象。这是和工厂方法最大的不同点。&lt;/p>
&lt;p>(这个模式最不好理解，而且在实际应用中局限性也蛮大的，因为这个模式并不符合开闭原则。实际开发还需要做好权衡。)&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-design-pattern/image/image-20241201210035211.png"
width="903"
height="584"
srcset="https://sfw003.github.io/p/soft-project-design-pattern/image/image-20241201210035211_hu_1eece043011fcfdf.png 480w, https://sfw003.github.io/p/soft-project-design-pattern/image/image-20241201210035211_hu_7f142f060c62002f.png 1024w"
loading="lazy"
alt="image-20241201210035211"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;h2 id="建造者模式">建造者模式
&lt;/h2>&lt;p>建造者模式（Builder Pattern）是一种创建型设计模式，它允许使用多个简单的对象一步步构建成一个复杂的对象。建造者模式使得对象的创建过程独立于对象的组成部分以及如何组合它们。&lt;/p>
&lt;p>&lt;strong>建造者模式的常见场景&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当一个对象的构建过程中有多个步骤，且这些步骤的顺序、类型可能不同。&lt;/li>
&lt;li>对象的构建过程独立于其组成部分的实现和顺序。&lt;/li>
&lt;/ul>
&lt;p>总结：分段初始化&lt;/p>
&lt;h2 id="适配器模式">适配器模式
&lt;/h2>&lt;p>其实就和转接口一样&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-design-pattern/image/image-20241201205351329.png"
width="542"
height="353"
srcset="https://sfw003.github.io/p/soft-project-design-pattern/image/image-20241201205351329_hu_c55cc1c37cc5a37a.png 480w, https://sfw003.github.io/p/soft-project-design-pattern/image/image-20241201205351329_hu_da7db42107f73906.png 1024w"
loading="lazy"
alt="image-20241201205351329"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;h2 id="策略模式-">策略模式 *
&lt;/h2>&lt;p>策略模式的作用就是把具体的算法实现从业务逻辑中剥离出来，成为一些列独立算法，使得它们可以相互转换。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当你有多个算法可以完成某项任务，而且这些算法的使用在不同的情况下是可替换的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你希望避免使用多个条件语句（&lt;code>if&lt;/code> 或 &lt;code>switch&lt;/code>）来选择某个算法或行为&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>支付方式选择&lt;/p>
&lt;p>假设你正在开发一个在线支付系统，用户可以选择不同的支付方式（如信用卡、支付宝、微信支付）。在这种情况下，使用策略模式可以帮助你避免在每个支付方式中编写大量的条件判断。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;memory&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 策略接口：支付方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentStrategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">pay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每种支付方式的具体实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">PaymentStrategy&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体策略：信用卡支付
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">CreditCardPayment&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">PaymentStrategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">pay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Paying &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; using Credit Card.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体策略：支付宝支付
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">AlipayPayment&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">PaymentStrategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">pay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Paying &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; using Alipay.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体策略：微信支付
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">WeChatPayment&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">PaymentStrategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">pay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Paying &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; using WeChat.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 上下文：订单类，负责选择支付方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Order&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 可以动态改变支付策略
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">setPaymentStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PaymentStrategy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">paymentStrategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 执行支付
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processPayment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">paymentStrategy&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">pay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PaymentStrategy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">paymentStrategy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="观察者模式-">观察者模式 *
&lt;/h2>&lt;p>观察者模式（Observer Pattern）是一种行为型设计模式，它定义了一种一对多的依赖关系，允许多个观察者对象同时监听某一个主题对象的状态变化。当主题对象的状态发生变化时，所有依赖于它的观察者都会得到通知并自动更新。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当一个对象的状态变化需要同时影响到多个对象，并且这些对象之间存在松散耦合关系时。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事件驱动系统，或某个状态变化会引发其他对象的行为（例如GUI界面中的按钮点击、发布订阅系统等）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>天气预报系统&lt;/strong>&lt;/p>
&lt;p>假设我们正在设计一个天气预报系统，其中有多个显示屏（例如当前天气显示、统计显示、热力图显示等），当天气状态变化时，所有显示屏都需要更新自己的信息。我们可以使用观察者模式来解决这个问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 观察者接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Observer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 被观察者接口（主题接口）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Subject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">registerObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">removeObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">notifyObservers&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体主题类：天气数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">WeatherData&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Subject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">registerObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">removeObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">notifyObservers&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">observer&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">observers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 设置天气数据，并通知观察者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setMeasurements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">hum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">pres&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temperature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">humidity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pressure&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pres&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">notifyObservers&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Observer&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">observers&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体观察者类：当前天气显示
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">CurrentConditionsDisplay&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Observer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CurrentConditionsDisplay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">weatherData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">weatherData&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">registerObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">temperature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">humidity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">display&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">display&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Current conditions: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">temperature&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;°C and &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">humidity&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;% humidity&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Subject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 具体观察者类：统计天气显示
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">StatisticsDisplay&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Observer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StatisticsDisplay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Subject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">weatherData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">weatherData&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">registerObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">temperature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">humidity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">display&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">display&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Statistics: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">temperature&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;°C, &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">humidity&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;% humidity&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Subject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 客户端代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建一个天气数据对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">WeatherData&lt;/span> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建观察者对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CurrentConditionsDisplay&lt;/span> &lt;span class="n">currentDisplay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">weatherData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StatisticsDisplay&lt;/span> &lt;span class="n">statisticsDisplay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">weatherData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 模拟天气变化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Setting new weather measurements...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setMeasurements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">30.4f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">65.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1012.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">Setting new weather measurements...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">weatherData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setMeasurements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">25.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">70.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1010.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>需求分析</title><link>https://sfw003.github.io/p/soft-project-needs-analysis/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/soft-project-needs-analysis/</guid><description>&lt;h2 id="需求">需求
&lt;/h2>&lt;h3 id="业务需求">业务需求
&lt;/h3>&lt;p>&lt;strong>定义&lt;/strong>：反映企业或客户对系统的高层次目标，通常由项目发起人定义&lt;/p>
&lt;h3 id="用户需求">用户需求
&lt;/h3>&lt;p>用户需求：描述的是用户的具体目标，或用户要求系统必须能完成的任务。&lt;/p>
&lt;h3 id="系统需求">系统需求
&lt;/h3>&lt;p>系统需求：从系统角度来说明软件的需求，包括功能需求(系统必须实现的功能)、非功能需求(比如软件的质量，可维护性，效率等等)和设计约束(交付时的一些限制条件，比如必须采用国有自主知识产权的数据库，必须运行在某个操作系统下)等等。&lt;/p>
&lt;h2 id="需求分析">需求分析
&lt;/h2>&lt;ol>
&lt;li>绘制系统上下文范围关系图：用于定义系统与系统外部实体间界限和接口的简单模型，为需求确定范围；&lt;/li>
&lt;li>创建用户界面原型：可以通过快速开发工具开发一个原型或者通过幻灯片、Flash等演示工具制作一个演示原型，甚至可以通过纸笔画出一些关键的界面接口示意图，从而帮助用户更好的理解要解决的问题，理解系统；&lt;/li>
&lt;li>分析需求的可行性：对获取到的需求进行成本、性能和技术实现方面的可行性研究，以及是否与其他的需求存在冲突，是否有对外部的依赖等；&lt;/li>
&lt;li>确定需求的优先级：是制订选代计划的一个重要的依据，可以使用满意和不满意指标进行说明。满意度表示当需求被实现时用户的满意程度，不满意度表示当需求未被实现时用户的不满意程度；&lt;/li>
&lt;li>为需求建立模型：表现形式主要是图表加上少量的文字描述，图形化的描述使需求更加清晰、易懂。需求分析模型主要描述系统的数据、功能、用户界面和运行的外部行为，并不会涉及软件的具体实现细节，同时，为后续的软件设计提供了系统的表示视图；&lt;/li>
&lt;li>创建数据字典：对系统用到的所有数据项和结构进行定义，以确保开发人员使用统一的数据定
义。&lt;/li>
&lt;/ol>
&lt;h2 id="用例模型分析">用例模型分析
&lt;/h2>&lt;h3 id="用例图">用例图
&lt;/h3>&lt;p>你展示的就是一个详细的用例描述（Use Case Description）示例。这是用例文档的标准格式之一，用于详细描述每个用例的具体信息。让我解释一下用例描述的各个组成部分：&lt;/p>
&lt;h3 id="用例描述">用例描述
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>用例名称&lt;/strong>：用例的唯一标识符和名称&lt;/p>
&lt;ul>
&lt;li>例：发布帖子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>简要说明&lt;/strong>：对用例功能的简短描述&lt;/p>
&lt;ul>
&lt;li>例：用户发布新帖子，同时增加对应版块帖子数量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>事件流（基本流程）&lt;/strong>：描述用例的主要步骤&lt;/p>
&lt;ul>
&lt;li>用户的操作步骤&lt;/li>
&lt;li>系统的响应步骤&lt;/li>
&lt;li>按照时间顺序排列&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>备选事件流（替代流程）&lt;/strong>：描述可能的异常情况和处理方式&lt;/p>
&lt;ul>
&lt;li>例：如果标题为空，系统提示错误&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>非功能需求&lt;/strong>：与该用例相关的性能、安全等要求&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>前置条件&lt;/strong>：执行用例前必须满足的条件&lt;/p>
&lt;ul>
&lt;li>例：用户必须登录系统&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>后置条件&lt;/strong>：用例执行完成后的系统状态&lt;/p>
&lt;ul>
&lt;li>例：更新帖子数量统计&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展点&lt;/strong>：用例可能的扩展或变化点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>优先级&lt;/strong>：用例的重要程度&lt;/p>
&lt;ul>
&lt;li>可以用数字或描述表示&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>模版：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>用例名称&lt;/th>
&lt;th>发布帖子&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>简要说明&lt;/td>
&lt;td>用户发布新帖，同时增加对应版块帖子数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>事件流&lt;/td>
&lt;td>1. 用户向系统发出发布新贴请求&lt;br/>2. 系统展示编辑新帖界面&lt;br/>3. 用户选择对应的版块类别，写入帖子标题与正文，并提交&lt;br/>4. 系统检查版块类别、标题、正文是否有效&lt;br/>5. 系统将所输入的信息存储建档，帖子发布成功&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>备选事件流&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>非功能需求&lt;/td>
&lt;td>无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>前置条件&lt;/td>
&lt;td>用户必须登录系统进行权限校验&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>后置条件&lt;/td>
&lt;td>修改对应版块下帖子的数量，修改用户发帖数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>扩展点&lt;/td>
&lt;td>无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>优先级&lt;/td>
&lt;td>最高(满意度5，不满意度5)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="数据模型分析">数据模型分析
&lt;/h2>&lt;h3 id="e-r图">E-R图
&lt;/h3>&lt;h3 id="类图">类图
&lt;/h3>&lt;p>&lt;strong>1. 发现概念类&lt;/strong>&lt;/p>
&lt;p>概念类：模型中可以代表事物与概念的对象。
OOA的主要任务就是找到系统中的对象和类，这些类将反映到OOD中的软件类和OOP中具体的实
现类。
发现类的方式有很多种，其中应用最广泛的是名词短语法，具体步骤如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>阅读和理解需求文档或用例描述&lt;/p>
&lt;/li>
&lt;li>
&lt;p>筛选出名词或名词短语，建立初始类清单(候选类)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将候选类分为三类：分别是显而易见的类，明显无意义的类和不确定类别的类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舍弃明显无意义类别的类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>小组讨论不确定类别的类，直到把他们合并或调整到其他两个类别。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. 确定类和类的关系&lt;/strong>&lt;/p>
&lt;p>当完成了类的寻找工作之后，就是理清这些类之间的关系，类之间的关系有：关联、依赖、泛化、聚合、组合和实现。&lt;/p>
&lt;p>&lt;strong>3. 画图&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-needs-analysis/image/image-20241221222350420.png"
width="651"
height="263"
srcset="https://sfw003.github.io/p/soft-project-needs-analysis/image/image-20241221222350420_hu_42e9d8979cd56597.png 480w, https://sfw003.github.io/p/soft-project-needs-analysis/image/image-20241221222350420_hu_f4057c3e391178e4.png 1024w"
loading="lazy"
alt="image-20241221222350420"
class="gallery-image"
data-flex-grow="247"
data-flex-basis="594px"
>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/soft-project-needs-analysis/image/image-20241221222257588.png"
width="674"
height="419"
srcset="https://sfw003.github.io/p/soft-project-needs-analysis/image/image-20241221222257588_hu_9452c2130aed4abc.png 480w, https://sfw003.github.io/p/soft-project-needs-analysis/image/image-20241221222257588_hu_1a72bb65ee020d8.png 1024w"
loading="lazy"
alt="image-20241221222257588"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p></description></item><item><title>【Qt GUI 01】Qt 绘图框架</title><link>https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/</guid><description>&lt;h2 id="qt-绘图框架">Qt 绘图框架
&lt;/h2>&lt;p>QPainter 与 QPaintDevice 和 QPaintEngine类一起构成了 Qt绘画系统的基础.&lt;/p>
&lt;ul>
&lt;li>QPainter 是用于执行绘图操作的类。&lt;/li>
&lt;li>QPaintDevice 表示可以使用QPainter绘制的设备。Qt中绘图设备的基类，它是一个抽象类，用于描述可以绘制的设备,QPainter 在 绘图设备中绘制中,常用的绘图设备 QWidget、QPixmap 、QImage&lt;/li>
&lt;li>QPaintEngine提供了 Painter 用于在不同类型的设备上绘图的界面。&lt;strong>对程序员不不透明&lt;/strong>，提供了不同类型设备的接口,由 QPaintDevice 和 QPainter 与其进行交互&lt;/li>
&lt;/ul>
&lt;p>如果 Painter处于活动状态，device()返回 Painter在其上绘画的绘制设备，paintEngine ()返回 Painter 当前正在操作的绘制引擎。有关更多信息，请参阅绘制系统。&lt;/p>
&lt;h3 id="qpaintdevice">QPaintDevice
&lt;/h3>&lt;p>QWidget 、QImage 、QPixmap 等等绘图场景都是从 QPainterDevice 继承而来的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Q_WIDGETS_EXPORT&lt;/span> &lt;span class="nl">QWidget&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">QObject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">QPaintDevice&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Q_GUI_EXPORT&lt;/span> &lt;span class="nl">QImage&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">QPaintDevice&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Q_GUI_EXPORT&lt;/span> &lt;span class="nl">QPixmap&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">QPaintDevice&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/OI2IWBIAYE.png"
width="817"
height="342"
srcset="https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/OI2IWBIAYE_hu_a75d766174401bc2.png 480w, https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/OI2IWBIAYE_hu_cb5b473abd451f8e.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="573px"
>&lt;/p>
&lt;h3 id="qpainter">QPainter
&lt;/h3>&lt;p>QPainter 是用于执行绘图操作的类，需要配合辅助类来使用，常见的有以下三种&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>QPen&lt;/th>
&lt;th>描述画笔，用户画线&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>QBrush&lt;/td>
&lt;td>描述画刷，用于填充&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QColor&lt;/td>
&lt;td>描述颜色&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="qt绘图事件">Qt绘图事件
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/4Y2YWBIAMY.png"
width="819"
height="159"
srcset="https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/4Y2YWBIAMY_hu_f5f129d91046de75.png 480w, https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/4Y2YWBIAMY_hu_bce228ade624de57.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="515"
data-flex-basis="1236px"
>&lt;/p>
&lt;p>绘图事件处理触发时机&lt;/p>
&lt;ul>
&lt;li>在窗口部件第一次显示时，系统会自动产生一个绘图事件(QPaintEvent),从而强制绘制这个窗口部件&lt;/li>
&lt;li>当重新调整窗口部件的大小时，系统也会产生一个绘制事件&lt;/li>
&lt;li>调用 update( 或者repaint()) 函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void QWidget::update()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void QWidget::repaint()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>update和repaint的区别：&lt;/p>
&lt;ul>
&lt;li>update是一个异步函数,它会将绘图事件添加到事件队列中,当事件循环回到主线程时，会调用组件的 paintEvent() 函数进行实际的重绘工作&lt;/li>
&lt;li>是一个同步函数，会立即触发组件的重绘操作,不会等待事件循环&lt;/li>
&lt;/ul>
&lt;h2 id="qt绘图实战">Qt绘图实战
&lt;/h2>&lt;h3 id="qpen">QPen
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>线型风格(Qt::PenStyle)&lt;/th>
&lt;th>&lt;img src=".assets/RX3VIBIAY4.png" alt="img" style="zoom:67%;" />&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>端点风格( Qt::PenCapStyle)&lt;/td>
&lt;td>&lt;img src=".assets/VP3VIBIAYE.png" alt="img" style="zoom:67%;" />&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>连接风格(Qt::PenJoinStyle)&lt;/td>
&lt;td>&lt;img src=".assets/ED4FIBIA2I.png" alt="img" style="zoom: 67%;" />&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>使用案例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QPainter&lt;/span> &lt;span class="nf">painter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QPen&lt;/span> &lt;span class="n">pen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setStyle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Qt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">DashDotLine&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//设置线性风格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setWidth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setBrush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Qt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">green&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//设置刷子
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setCapStyle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Qt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">RoundCap&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//设置端点风格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setJoinStyle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Qt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">RoundJoin&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//设置连接风格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">painter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setPen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pen&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="qbrush">QBrush
&lt;/h3>&lt;p>QBrush用于描述画刷，Qt中用于描述绘图区域填充样式的类。它可以用于指定绘图区域的背景色、渐变色、纹理、图片等&lt;/p>
&lt;img src="image/PC7OUWAYAAADC.png" alt="img" />
&lt;h3 id="qcolor">QColor
&lt;/h3>&lt;p>QColor 是Qt中用于表示颜色的类。它可以用于描述RGB颜色、RGBA颜色、HSL颜色、HSV颜色以及16进制颜色等。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QColor&lt;/span> &lt;span class="nf">color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Qt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">red&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 使用预定义颜色
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QColor&lt;/span> &lt;span class="nf">color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 使用RGB值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QColor&lt;/span> &lt;span class="nf">color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;#FF0000&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 使用16进制值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setRgb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 设置RGB颜色值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setHsl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">127&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 设置HSL颜色值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="qt坐标">Qt坐标
&lt;/h3>&lt;p>QPainter 使用的坐标系是组件自身坐标系，如果通过 geometry() 函数与 pos() 函数获取的坐标是基于父组件的坐标系&lt;/p>
&lt;p>相对于父组件的坐标可以通过 mapFromParent 函数进行转换，得到想的自己的坐标系&lt;/p>
&lt;img src="image/TNKYYBIADM.png" alt="img" style="zoom:67%;" />
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//获得相对父控件的坐标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QPoint&lt;/span> &lt;span class="n">centerPointFromParent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">geometry&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">center&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//获得相对自身的坐标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QPoint&lt;/span> &lt;span class="n">centerPoint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mapFromParent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">centerPointFromParent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="qt图形变换">Qt图形变换
&lt;/h3>&lt;p>在图形变换操作时,是对坐标系进行变换&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">QPainter&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">scale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qreal&lt;/span> &lt;span class="n">sx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">qreal&lt;/span> &lt;span class="n">sy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 缩放
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">QPainter&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">rotate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qreal&lt;/span> &lt;span class="n">angle&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 旋转
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">QPainter&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shear&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qreal&lt;/span> &lt;span class="n">sh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">qreal&lt;/span> &lt;span class="n">sv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 扭曲
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">QPainter&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">translate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qreal&lt;/span> &lt;span class="n">dx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">qreal&lt;/span> &lt;span class="n">dy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 平移
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/OSRFRJIYACQBM.png"
width="651"
height="170"
srcset="https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/OSRFRJIYACQBM_hu_9e0653914bce9f9f.png 480w, https://sfw003.github.io/p/qt-gui_01_qt_drawing_framework/image/OSRFRJIYACQBM_hu_84e3a0d676e8b925.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="382"
data-flex-basis="919px"
>&lt;/p></description></item><item><title>【Qt MVC】model-view-delegate</title><link>https://sfw003.github.io/p/qt-mvc/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-mvc/</guid><description>&lt;h2 id="mvc">MVC
&lt;/h2>&lt;p>模型-视图-控制(MVC) 是源自 Smalltalk 的一种设计模式,在构建用户界面时经常使用。用于将应用程序的数据、逻辑和界面分离，以提高代码可读性、可维护性和可扩展性&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MVC 框架由三个对象组成:&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>Model (模型) : 负责存储和处理数据，通常与数据库进行交互。模型表示应用程序的核心逻辑,例如数据结构、数据处理和存储等&lt;/li>
&lt;li>View (视图) ：负责显示数据，将模型中的数据可视化。视图是用户与系统交互的接口,通常包括图形用户界面 GUI 或者网页&lt;/li>
&lt;li>Controller (控制器 ） : 负责接收用户输入，处理用户请求，并更新模型和视图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/ZBUICBIAEM.png"
width="593"
height="336"
srcset="https://sfw003.github.io/p/qt-mvc/image/ZBUICBIAEM_hu_5daf3b18062ef567.png 480w, https://sfw003.github.io/p/qt-mvc/image/ZBUICBIAEM_hu_95be9bc04bb0448f.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;h2 id="qt-model-view">QT Model-View
&lt;/h2>&lt;p>在Qt中，Model-View是一种设计模式，用于将数据（Model）与其可视化表示（View）分离，使得程序更加模块化、可扩展和易于维护。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Model/View 框架主要包括以下三个组件&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>Model：模型是数据的抽象表示，它负责存储和管理数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>模型通常从底层数据源（如数据库、文件或数据结构）获取数据，并将其呈现给视图。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>View : 视图是数据的可视化表示，它负责呈现模型中的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>视图可以有多种形式，如表格、列表、树状结构等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>Delegate : 委托负责处理数据的显示和编辑。委托可以自定义单元格的渲染方式，以及将用户输入的数据写回模型&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>如果用户没有设置委托，则使用默认委托&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/CNWIIBIATQ.png"
width="389"
height="370"
srcset="https://sfw003.github.io/p/qt-mvc/image/CNWIIBIATQ_hu_135e5cf80bee8bc7.png 480w, https://sfw003.github.io/p/qt-mvc/image/CNWIIBIATQ_hu_f3d26aa16890443c.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;h3 id="view">View
&lt;/h3>&lt;p>在 Qt 内部实现了多个可以支持 Model/View 的视图,具体如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>视图名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>QListView&lt;/td>
&lt;td>用于显示单列的列表数据，适用于一维数据的操作&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/CF3YIBIAFM.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QTreeView&lt;/td>
&lt;td>用于显示树状结构数据，适用于树状结构数据的操作&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/AB4IIBIBJM.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QTableView&lt;/td>
&lt;td>用于显示表格状数据，适用于二维表格型数据的操作&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/EN4IIBIADI.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QColumnView&lt;/td>
&lt;td>用于多个QListView显示树状层次结构，树状结构的一层用一个QListView显示。&lt;/td>
&lt;td>&lt;img src="https://sfw003.github.io/.assets/KF4IIBIAQQ.png"
loading="lazy"
alt="img"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>它们的继承关系如下图。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/4Z6IIBIATQ.png"
width="1124"
height="458"
srcset="https://sfw003.github.io/p/qt-mvc/image/4Z6IIBIATQ_hu_6f611430ed07ae8d.png 480w, https://sfw003.github.io/p/qt-mvc/image/4Z6IIBIATQ_hu_e50e4df0b12c1825.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="588px"
>&lt;/p>
&lt;h3 id="自定义view">自定义View
&lt;/h3>&lt;h3 id="model">Model
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>QStandardItemModel&lt;/td>
&lt;td>1.通用的数据模型类，可以存储各种类型的数据（如列表、树形结构、表格等）2.是 QAbstractItemModel 的子类，提供了一组用于管理数据项（如添加、删除、修改等）的便捷方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QStringListModel&lt;/td>
&lt;td>1.用于存储字符串列表的数据模型类，2.是 QAbstractListModel 的子类，可以方便地管理字符串列表（如添加、删除、修改等3.适用于需要展示和操作字符串列表的场景，如列表框、下拉框&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QFileSystemModel&lt;/td>
&lt;td>用于访问文件系统的数据模型类是 QAbstractItemModel 的子类,可以表示文件系统的目录结构和文件信息适用于需要浏览和操作文件系统的场景，如文件选择器、文件管理器等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QSqlTableModel&lt;/td>
&lt;td>一个用于访问 SQL 数据库的数据模型类是 QAbstractTableModel 的子类,可以表示 SQL 数据库中的表格数据QSqlTableModel 提供了一组用于查询、插入、更新和删除数据库记录的方法。它适用于需要与 SQL 数据库交互的场景。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QSqlRelationalTableModel&lt;/td>
&lt;td>用于访问带有关系的 SQL 数据库的数据模型类是 QSqlTableModel 的子类，可以表示 SQL 数据库中的关系表格数据QSqlRelationalTableModel 提供了一组用于处理关系字段（如外键）的方法。适用于需要表示和操作关系数据库的场景。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QSortFilterProxyModel&lt;/td>
&lt;td>代理模型类，用于对其他模型数据进行排序和过滤是 QAbstractProxyModel 的子类,可以作为其他模型（如上述内置模型）的代理，对数据进行排序和过滤QSortFilterProxyModel 适用于需要对数据进行排序和过滤的场景，如表格视图、树形视图等&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/MMRZGBIAHI.png"
width="1327"
height="731"
srcset="https://sfw003.github.io/p/qt-mvc/image/MMRZGBIAHI_hu_6dfec354ff1dd4e1.png 480w, https://sfw003.github.io/p/qt-mvc/image/MMRZGBIAHI_hu_9f512f3c00b0870d.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;h4 id="model索引">Model索引
&lt;/h4>&lt;p>所有的模型都是统一通过模型索引来访问数据，它用于表示数据模型中特定数据项的位置
模型索引由&lt;strong>QModellndex&lt;/strong>类来表示，包含了一个数据项的行、列和父索引信息
关于QModellndex类一些主要特性如下：&lt;/p>
&lt;ul>
&lt;li>行和列：QModellndex包含一个数据项在模型中的行和列信息&lt;/li>
&lt;li>父索引：QModellndex还包含一个父索引l，表示数据项的父项，对于树形结构的模型（如QStandardltemModel或QFileSystemModel特别有用&lt;/li>
&lt;li>有效性：QModellndex可以是有效或无效的。有效索引表示模型中实际存在的数据项，而无效索引表示一个空或未定义的位置&lt;/li>
&lt;li>数据访问：通过模型索引，可以访问和操作模型中的数据&lt;/li>
&lt;li>模型指针：QModellndex包含一个指向其所属模型的指针&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/3LSJGBIAH4.png"
width="721"
height="370"
srcset="https://sfw003.github.io/p/qt-mvc/image/3LSJGBIAH4_hu_c6e4ef9674c71418.png 480w, https://sfw003.github.io/p/qt-mvc/image/3LSJGBIAH4_hu_97e33c2f13850eca.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>获取索引的函数是index，它在这一层定义&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/image-20241130103502653.png"
width="1053"
height="84"
srcset="https://sfw003.github.io/p/qt-mvc/image/image-20241130103502653_hu_5d40cf61f51a9baa.png 480w, https://sfw003.github.io/p/qt-mvc/image/image-20241130103502653_hu_987656470be95d72.png 1024w"
loading="lazy"
alt="image-20241130103502653"
class="gallery-image"
data-flex-grow="1253"
data-flex-basis="3008px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QAbstracTableMode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">QModelIndex&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">column&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QModelIndex&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QModelIndex&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">override&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/image-20241130102827271.png"
width="954"
height="614"
srcset="https://sfw003.github.io/p/qt-mvc/image/image-20241130102827271_hu_1c80d29eebde69a7.png 480w, https://sfw003.github.io/p/qt-mvc/image/image-20241130102827271_hu_d436540a77b55d2a.png 1024w"
loading="lazy"
alt="image-20241130102827271"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;h4 id="自定义model">自定义Model
&lt;/h4>&lt;p>系统的标准模型(QStandardltemModel）主要支持字符串与图标(Qlcon)，对于其他类型支持能力较弱
如果需要显示自定义数据结构，则更好的方式是采用自定义模型，同时对于大量数据的处理，自定义数据模型可以实现数据的按需加载、缓存等策略，以提高视图的性能。&lt;/p>
&lt;p>自定义模型基本实现思路：&lt;/p>
&lt;ul>
&lt;li>明确自定义模型需要处理的数据结构和特点，如树形结构，列表或者表格&lt;/li>
&lt;li>根据数据结构的特点，选择合适的基类，下面列举了相应的数据类型对应的比较合适的基类&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数据结构类型&lt;/th>
&lt;th>自定义模型基类&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>表格&lt;/td>
&lt;td>QAbstractTableModel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>列表&lt;/td>
&lt;td>QAbstractListModel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>通用&lt;/td>
&lt;td>QAbstractItemModel&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>继承这些模型后，需要实现以下函数（不同的模型实现的函数不同）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法原型&lt;/th>
&lt;th>方法描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>int rowCount(const QModelIndex&amp;amp; parent) const&lt;/strong>&lt;/td>
&lt;td>返回数据模型的行数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>int columnCount(const QModelIndex&amp;amp; parent = QModelIndex())&lt;/strong>&lt;/td>
&lt;td>返回数据模型的列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>QVariant data(const QModelIndex&amp;amp; index, int role = Qt::DisplayRole) const ;&lt;/strong>&lt;/td>
&lt;td>返回指定数据模型中指定单元格数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole&lt;/td>
&lt;td>返回表头数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool setData(const QModelIndex &amp;amp;index, const QVariant &amp;amp;value, int role = Qt::EditRole);&lt;/td>
&lt;td>设置指定索引的项的数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QModelIndex index(int row, int column, const QModelIndex &amp;amp;parent = QModelIndex()) const;&lt;/td>
&lt;td>返回给定行和列的项的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QModelIndex parent(const QModelIndex &amp;amp;child) const;&lt;/td>
&lt;td>返回给定子项的父项的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Qt::ItemFlags flags(const QModelIndex &amp;amp;index) const;&lt;/td>
&lt;td>返回给定索引的项的标志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool insertRows(int row, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>在给定位置插入指定数量的行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool removeRows(int row, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>从给定位置移除指定数量的行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool insertColumns(int column, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>在给定位置插入指定数量的列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool removeColumns(int column, int count, const QModelIndex &amp;amp;parent = QModelIndex());&lt;/td>
&lt;td>从给定位置移除指定数量的列&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中最重要的是&lt;/p>
&lt;p>&lt;code>QVariant data(const QModelIndex&amp;amp; index, int role = Qt::DisplayRole) const ; &lt;/code>&lt;/p>
&lt;ul>
&lt;li>index 是索引&lt;/li>
&lt;li>role则是角色说明，Qt里有自带的角色说明
&lt;ul>
&lt;li>DisplayRole (0)，这是最基本的角色，通常用来显示文本内容&lt;/li>
&lt;li>DecorationRole (1)，通常用来显示图标或图片&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>如果是自定义Model, 最好使用自定义.&lt;/p>
&lt;p>数据的更改和增加，可以使用bool insertColumns(int column, int count, const QModelIndex &amp;amp;parent = QModelIndex()); 。。。&lt;/p>
&lt;p>简易使用自定义函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 添加一个新的笔画
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">StrokeModel&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">addStroke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">StrokeData&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">stroke&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通知视图即将插入新行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">beginInsertRows&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QModelIndex&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建新的笔画数据，使用当前样式和时间戳
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">StrokeData&lt;/span> &lt;span class="n">newStroke&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stroke&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newStroke&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">style&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m_currentStyle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newStroke&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QDateTime&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">currentMSecsSinceEpoch&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newStroke&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 添加到笔画列表中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 通知视图插入完成
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">endInsertRows&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">emit&lt;/span> &lt;span class="nf">strokeAdded&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_strokes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 发射笔画添加信号，处理handwriteview的按钮更新
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用自定义函数就需要关注：&lt;strong>通知&lt;/strong>&lt;/p>
&lt;p>beginRemoveRows 和 endRemoveRows 主要用于通知视图模型的结构变化（即行的添加或删除）&lt;/p>
&lt;p>这对函数主要影响视图的行管理，比如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>更新视图的行数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新行的索引&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新视图的滚动范围等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>dataChanged 信号用于通知视图数据内容的变化&lt;/p>
&lt;p>这个信号会触发视图的重绘操作&lt;/p>
&lt;p>它告诉视图：&amp;ldquo;这些数据已经改变，你需要重新绘制它们&lt;/p>
&lt;h3 id="delegate">Delegate
&lt;/h3>&lt;p>Qt Delegate 负责数据的编辑和渲染。当用户需要编辑数据时，Delegate负责提供编辑器，同时负责将编辑后的数据写回Model&lt;/p>
&lt;p>Qt 内置支持 MVD 模式的组件都是支持 QTableView,QTreeView 都支持默认委托,用于基本数据类型的渲染,包括文本、数字和图像，还有默认编辑组件 QLineEdit&lt;/p>
&lt;p>默认委托是由 ﻿QStyledItemDelegate 类来进行过描述,继承于QAbstractItemDelegate&lt;/p>
&lt;p>当遇到单元格的内容非文本，数字和图像等基本数据类型，则应该考虑自定义 Delegate,如下面应用场景&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-mvc/image/HOHJMBIAGE.png"
width="1616"
height="340"
srcset="https://sfw003.github.io/p/qt-mvc/image/HOHJMBIAGE_hu_a848bfe585f6501a.png 480w, https://sfw003.github.io/p/qt-mvc/image/HOHJMBIAGE_hu_ddef277a51253473.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="475"
data-flex-basis="1140px"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>委托类名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>父类&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>QItemDelegate&lt;/td>
&lt;td>基本的委托类，提供默认的渲染和编辑功能&lt;/td>
&lt;td>QAbstractItemDelegate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QStyledItemDelegate&lt;/td>
&lt;td>继承自 QItemDelegate，提供更好的样式支持和性能&lt;/td>
&lt;td>QItemDelegate&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;img src="image/SQKKGBI2ADQF6.png" alt="img" style="zoom:67%;" />
&lt;h4 id="自定义delegate">自定义Delegate
&lt;/h4>&lt;p>在实现自定义 Delegate 主要方式就是选择合适的 Delegate 基类，并重写实现相应的方法,这里一般选择 QStyledItemDelegate作为基类&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>virtual QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &amp;amp;option, const QModelIndex &amp;amp;index) const&lt;/th>
&lt;th>自定义单元格编辑器组件&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>*&lt;em>virtual void paint(QPainter &lt;em>painter, const QStyleOptionViewItem &amp;amp;option, const QModelIndex &amp;amp;index) const = 0&lt;/em>&lt;/em>&lt;/td>
&lt;td>自定义组件绘制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>virtual void setEditorData(QWidget *editor, const QModelIndex &amp;amp;index) const&lt;/td>
&lt;td>将模型数据设置到编辑器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>virtual void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &amp;amp;index) const&lt;/td>
&lt;td>将编辑后的数据设置到模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>virtual void updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &amp;amp;option, const QModelIndex &amp;amp;index) const&lt;/td>
&lt;td>自定义编辑器的几何位置&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>【Qt Widgets】Qt 布局管理</title><link>https://sfw003.github.io/p/qt-widgets_layout_management/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-widgets_layout_management/</guid><description>&lt;h2 id="qt-布局管理">Qt 布局管理
&lt;/h2>&lt;h3 id="基本布局">基本布局
&lt;/h3>&lt;p>Qt 的布局管理系统提供了多种布局管理器类，用于自动排列和管理控件的位置与大小，确保界面在不同分辨率下保持美观和功能性。以下是其核心布局类及其特点的总结：&lt;/p>
&lt;h4 id="qhboxlayout水平布局">&lt;code>QHBoxLayout&lt;/code>（水平布局）
&lt;/h4>&lt;p>• &lt;strong>功能&lt;/strong>：将控件从左到右水平排列，适用于工具栏、按钮组等横向布局场景。
• &lt;strong>特点&lt;/strong>：自动调整控件间距，支持拉伸系数（&lt;code>stretch&lt;/code>）控制控件宽度占比。
• &lt;strong>代码示例&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QHBoxLayout&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">layout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">QHBoxLayout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addWidget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">button1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addWidget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">button2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="qvboxlayout垂直布局">&lt;code>QVBoxLayout&lt;/code>（垂直布局）
&lt;/h4>&lt;p>• &lt;strong>功能&lt;/strong>：将控件从上到下垂直排列，常用于表单、列表等纵向布局。
• &lt;strong>特点&lt;/strong>：支持设置空白区域（&lt;code>addStretch()&lt;/code>）和固定间距（&lt;code>addSpacing()&lt;/code>），灵活分配空间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QVBoxLayout&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">layout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">QVBoxLayout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addWidget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addWidget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lineEdit&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="qgridlayout网格布局">&lt;code>QGridLayout&lt;/code>（网格布局）
&lt;/h4>&lt;p>• &lt;strong>功能&lt;/strong>：将控件按行和列排列成网格，支持控件跨行或跨列。
• &lt;strong>特点&lt;/strong>：适用于复杂界面（如计算器、表格），通过 &lt;code>addWidget(widget, row, column, rowSpan, columnSpan)&lt;/code> 指定位置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QGridLayout&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">layout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">QGridLayout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addWidget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">button1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 第0行第0列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addWidget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">button2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 跨2列
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="qformlayout表单布局">&lt;code>QFormLayout&lt;/code>（表单布局）
&lt;/h4>&lt;p>• &lt;strong>功能&lt;/strong>：专为表单设计，每行包含标签（如 &lt;code>QLabel&lt;/code>）和输入控件（如 &lt;code>QLineEdit&lt;/code>）。
• &lt;strong>特点&lt;/strong>：自动对齐标签和输入框，简化登录界面、设置对话框的开发。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QFormLayout&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">layout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">QFormLayout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addRow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;用户名:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lineEditUser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">layout&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addRow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;密码:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lineEditPass&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>IO效率优化</title><link>https://sfw003.github.io/p/io_process_analysis/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/io_process_analysis/</guid><description>&lt;h2 id="io过程分析">io过程分析
&lt;/h2>&lt;h3 id="pio模式">PIO模式
&lt;/h3>&lt;p>编程式IO（Process IO)：数据需通过 CPU 寄存器中转，&lt;strong>完全占用 CPU&lt;/strong>（早期设备的实现方式）&lt;/p>
&lt;ul>
&lt;li>CPU发出对应的指令给磁盘控制器，然后返回；&lt;/li>
&lt;li>磁盘控制器收到指令后，于是就开始准备数据，会把数据放入到磁盘控制器的内部缓冲区中，然后产生一个中断;&lt;/li>
&lt;li>CPU收到中断信号后，停下手头的工作，接着把磁盘控制器的缓冲区的数据一次一个字节地读进自己的寄存器，然后再把寄存器里的数据写入到内存。在数据传输的期间CPU是无法执行其他任务的。&lt;/li>
&lt;/ul>
&lt;pre class="mermaid">%% 时序图：CPU与磁盘控制器的交互（PIO模式）
sequenceDiagram
participant 用户进程
participant CPU
participant 磁盘控制器
participant 内存
用户进程->>CPU: read() 系统调用（用户态→内核态）
CPU->>磁盘控制器: 发送读取指令
Note over CPU: CPU返回继续执行其他任务
磁盘控制器->>磁盘控制器: 准备数据到内部缓冲区
磁盘控制器->>CPU: 产生中断信号
loop 逐个字节传输
磁盘控制器->>CPU: 从缓冲区读取一个字节到寄存器
CPU->>内存: 将寄存器数据写入内存
Note over CPU: CPU 无法执行其他任务
end
CPU->>用户进程: 完成中断处理（内核态→用户态）
CPU->>用户进程: read() 返回数据
&lt;/pre>
&lt;h3 id="dma模式">DMA模式
&lt;/h3>&lt;p>直接内存访问（Direct Memory Access）技术：DMA将数据从磁盘控制器缓冲区搬运到内存，&lt;strong>不需要 CPU 逐字节参与&lt;/strong>（现代通用方案）&lt;/p>
&lt;ul>
&lt;li>用户进程调用read方法，向操作系统发出I/O请求，请求读取数据到自己的内存缓冲区中，进程进入阻塞状态;&lt;/li>
&lt;li>操作系统收到请求后，进一步将I/O请求发送DMA，然后让CPU执行其他任务；&lt;/li>
&lt;li>DMA进一步将I/O请求发送给磁盘；&lt;/li>
&lt;li>磁盘收到DMA的I/O请求，把数据从磁盘读取到磁盘控制器的缓冲区中，当磁盘控制器的缓冲区被读满后，向DMA发起中断信号，告知自己缓冲区已满；&lt;/li>
&lt;li>DMA收到磁盘的信号，将磁盘控制器缓冲区中的数据拷贝到内核缓冲区中，此时不占用CPU，CPU可以执行其他任务；&lt;/li>
&lt;li>当DMA读取了足够多的数据，就会发送中断信号给CPU;&lt;/li>
&lt;li>CPU收到DMA的信号，知道数据已经准备好，于是将数据从内核拷贝到用户空间，系统调用返回；&lt;/li>
&lt;/ul>
&lt;pre class="mermaid">sequenceDiagram
participant 用户空间
participant CPU
participant DMA
participant 磁盘控制器
participant 内核空间
用户空间->>CPU: read() 系统调用
CPU->>DMA: 配置传输参数（内存地址、数据长度等）
Note over CPU: CPU返回继续执行其他任务
DMA->>磁盘控制器: 发送IO请求
磁盘控制器->>磁盘控制器: 准备数据到内部缓冲区
磁盘控制器->>DMA: 数据就绪中断
DMA->>内核空间: DMA自动搬运数据（无需CPU参与）
DMA->>CPU: 传输完成中断
CPU->>用户空间: 返回数据
&lt;/pre>
&lt;blockquote>
&lt;p>早期DMA只存在在主板上，如今由于I/O 设备越来越多，数据传输的需求也不尽相同，所以每个I/O设
备里面都有自己的DMA控制器。&lt;/p>&lt;/blockquote>
&lt;h2 id="传统io的效率分析">传统IO的效率分析
&lt;/h2>&lt;p>IO可以划分为2个过程：等待数据就绪+数据拷贝&lt;/p>
&lt;p>我们先说传统IO的数据拷贝&lt;/p>
&lt;h3 id="多次切换和拷贝">多次切换和拷贝
&lt;/h3>&lt;p>对于一次read + write，总共发生&lt;strong>4次用户态和内核态的上下文切换&lt;/strong>和&lt;strong>4次数据拷贝&lt;/strong>&lt;/p>
&lt;p>上下文切换&lt;/p>
&lt;ul>
&lt;li>read的调用和返回：2次&lt;/li>
&lt;li>write的调用和返回：2次&lt;/li>
&lt;/ul>
&lt;p>数据拷贝&lt;/p>
&lt;ul>
&lt;li>外存（如磁盘、网卡）到内核空间，内核空间再到用户空间：2次&lt;/li>
&lt;li>用户空间到内核空间，内核空间到外存：2次&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/image-20250402202101581.png"
width="452"
height="231"
srcset="https://sfw003.github.io/p/io_process_analysis/image/image-20250402202101581_hu_f42bc94e11ec94d9.png 480w, https://sfw003.github.io/p/io_process_analysis/image/image-20250402202101581_hu_48a627203ecd0161.png 1024w"
loading="lazy"
alt="image-20250402202101581"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;p>上下文切换到成本并不小，一次切换需要耗时几十纳秒到几微秒，虽然时间看上去很短，但是在高并发的场景下，这类时间容易被累积和放大，从而影响系统的性能，数据拷贝同理。&lt;/p>
&lt;h3 id="等待数据就绪">等待数据就绪
&lt;/h3>&lt;p>对于本地，多数情况下数据都是就绪的，但到了网络，情况就不同了，等待时间往往大于数据拷贝时间。在传统IO中，往往是阻塞式等待，导致用户进程浪费了很多时间。&lt;/p>
&lt;h2 id="如何提高io效率">如何提高IO效率
&lt;/h2>&lt;p>2个维度：&lt;/p>
&lt;ol>
&lt;li>减少等待时间（即在等待时间内做其他事）&lt;/li>
&lt;li>减少上下文切换和数据拷贝的次数&lt;/li>
&lt;/ol>
&lt;h2 id="关于内核缓存区">关于内核缓存区
&lt;/h2>&lt;p>前文一直提到一个叫名词：内核缓存区，内核缓存区是什么？内核缓冲区实际上是&lt;strong>磁盘高速缓存（PageCache）&lt;/strong>。&lt;/p>
&lt;p>它采用&lt;strong>局部型原理&lt;/strong>来提高速度，举例：用户需要读取磁盘某部分0-50字节的内容，PageCache会&lt;strong>预读&lt;/strong>0-100字节的内容。&lt;/p>
&lt;p>多数情况下，PageCache能提高速率，但如果文件很大，PageCache的作用就体现不了，原因有2：&lt;/p>
&lt;ul>
&lt;li>PageCache 本身容量较小，读取大文件时，导致PageCache长时间被大文件占据，其他&lt;strong>热点&lt;/strong>小文件可能就无法充分使用到 PageCache，于是磁盘读写的性能就会下降了&lt;/li>
&lt;li>PageCache 中的大文件数据，不但没有享受到缓存带来的好处，还耗费 DMA 多拷贝到 PageCache一次；&lt;/li>
&lt;/ul>
&lt;p>那如何解决大文件的读取呢？&lt;/p>
&lt;p>综上，我们留下了3个问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>如何减少等待时间（即在等待时间内做其他事）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何减少上下文切换和数据拷贝的次数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何高效读取大文件&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="减少上下文切换和数据拷贝次数">减少上下文切换和数据拷贝次数
&lt;/h2>&lt;h3 id="零拷贝技术">零拷贝技术
&lt;/h3>&lt;p>零拷贝技术的核心目标是通过减少或消除用户空间与内核空间之间的数据复制次数，从而提升性能并降低资源消耗。&lt;/p>
&lt;p>实现零拷贝技术的方式有很多。&lt;/p>
&lt;h4 id="内存映射">内存映射
&lt;/h4>&lt;blockquote>
&lt;p>我目前就使用过这个&lt;/p>&lt;/blockquote>
&lt;p>原理如下图，将文件直接映射到进程的虚拟内存地址空间，用户程序通过操作内存指针访问文件数据，无需通过&lt;code>read&lt;/code>/&lt;code>write&lt;/code>系统调用复制数据&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/image-20250402202118025.png"
width="452"
height="231"
srcset="https://sfw003.github.io/p/io_process_analysis/image/image-20250402202118025_hu_95a0a224166d162d.png 480w, https://sfw003.github.io/p/io_process_analysis/image/image-20250402202118025_hu_fb0885cf82ec7b43.png 1024w"
loading="lazy"
alt="image-20250402202118025"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;p>windows的api&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>linux的api&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 直接通过addr指针访问文件数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">mmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PROT_READ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAP_SHARED&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基本流程：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void* addr = mmap(file, len);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">write(fd, addr, len);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre class="mermaid">graph TD
A[磁盘文件] -->|DMA 拷贝| B[缓存区]
B -->|CPU 拷贝| C[socket 缓冲区]
C -->|DMA 拷贝| D[网卡]
&lt;/pre>
&lt;p>上下文切换次数：4次&lt;/p>
&lt;ul>
&lt;li>mmap的调用和返回&lt;/li>
&lt;li>write的调用和返回&lt;/li>
&lt;/ul>
&lt;p>数据拷贝次数：3次&lt;/p>
&lt;p>&lt;strong>优势&lt;/strong>：减少用户态与内核态之间的数据拷贝次数，适用于频繁访问文件的场景（如数据库、视频处理）&lt;/p>
&lt;h4 id="sendfile-系统调用">sendfile 系统调用
&lt;/h4>&lt;p>&lt;strong>原理&lt;/strong>：直接在内核空间完成文件数据到网络套接字的传输，绕过用户空间。
• 传统流程：磁盘 → 内核缓冲区 → 用户缓冲区 → 内核缓冲区 → 网络。
• sendfile流程：磁盘 → 内核缓冲区 → 网络（无需用户空间参与）。
• &lt;strong>适用场景&lt;/strong>：文件传输（如Web服务器发送静态文件）。
• &lt;strong>代码示例&lt;/strong>（Linux）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sendfile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">in_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file_size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>技术&lt;/th>
&lt;th>实现方式&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;th>引用来源&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>内存映射&lt;/td>
&lt;td>文件映射到虚拟内存&lt;/td>
&lt;td>频繁文件读写（数据库、视频）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sendfile&lt;/td>
&lt;td>内核直接传输文件到网络&lt;/td>
&lt;td>Web服务器文件传输&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>splice&lt;/td>
&lt;td>管道传输数据&lt;/td>
&lt;td>文件/网络间高效复制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>分散-聚集&lt;/td>
&lt;td>单次操作多缓冲区&lt;/td>
&lt;td>网络协议分片处理&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DMA&lt;/td>
&lt;td>硬件直接访问内存&lt;/td>
&lt;td>高速I/O设备数据传输&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="减少等待时间">减少等待时间
&lt;/h2>&lt;p>感觉叫减少等待时间不是很准确，应该叫利用等待时间。我们怎么做到在数据未就绪的时候干其他事呢？通过采用高效的IO模型。&lt;/p>
&lt;p>我们常见的IO模型有以下5种：&lt;/p>
&lt;h3 id="5种io模型">5种IO模型
&lt;/h3>&lt;h4 id="阻塞io">阻塞IO
&lt;/h4>&lt;p>&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/d64703dc7e204e7784905198a8cb5f7a.png"
width="1412"
height="607"
srcset="https://sfw003.github.io/p/io_process_analysis/image/d64703dc7e204e7784905198a8cb5f7a_hu_cb5f8fa06ae030f0.png 480w, https://sfw003.github.io/p/io_process_analysis/image/d64703dc7e204e7784905198a8cb5f7a_hu_c7b7d2c3eba5df7.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>
一直等，直到数据就绪。&lt;/p>
&lt;h4 id="非阻塞io">非阻塞IO
&lt;/h4>&lt;p>非阻塞IO往往需要程序员循环的方式反复尝试读写文件描述符, 这个过程称为轮询. 这对CPU来说是较大的浪费, 一般只有特定场景下才使用.
&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/95e2198630f845b88abb77f9ae9dfa72.png"
width="1455"
height="733"
srcset="https://sfw003.github.io/p/io_process_analysis/image/95e2198630f845b88abb77f9ae9dfa72_hu_2db45c22e45b3f52.png 480w, https://sfw003.github.io/p/io_process_analysis/image/95e2198630f845b88abb77f9ae9dfa72_hu_de46250a40ef10f2.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>
不等，但会一直询问数据是否就绪，一旦就绪就处理。&lt;/p>
&lt;h4 id="信号驱动io">信号驱动IO
&lt;/h4>&lt;p>&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/0f71b8c818854affa576dcb489787cd9.png"
width="1421"
height="789"
srcset="https://sfw003.github.io/p/io_process_analysis/image/0f71b8c818854affa576dcb489787cd9_hu_245aa40e7fa4852e.png 480w, https://sfw003.github.io/p/io_process_analysis/image/0f71b8c818854affa576dcb489787cd9_hu_435acda24cf06ef6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>
不等，数据就绪后，系统通过信号来通知进程处理。&lt;/p>
&lt;h4 id="io多路转接-多路复用">IO多路转接 （多路复用）
&lt;/h4>&lt;p>IO多路转接: 虽然从流程图上看起来和阻塞IO类似. 实际上最核心在于IO多路转接能够同时等待多个文件描述符的就绪状态.
&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/38c9874a858d4701b53ee36dcb7d100d.png"
width="1487"
height="853"
srcset="https://sfw003.github.io/p/io_process_analysis/image/38c9874a858d4701b53ee36dcb7d100d_hu_4b71227cc6ed8cda.png 480w, https://sfw003.github.io/p/io_process_analysis/image/38c9874a858d4701b53ee36dcb7d100d_hu_6dcb901620d75694.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;h4 id="异步io">异步IO
&lt;/h4>&lt;p>由内核在数据拷贝完成时, 通知应用程序(而信号驱动是告诉应用程序何时可以开始拷贝数据).
&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/cce6fdfa8d9340348343a61921248167.png"
width="1364"
height="751"
srcset="https://sfw003.github.io/p/io_process_analysis/image/cce6fdfa8d9340348343a61921248167_hu_1d856d636957c395.png 480w, https://sfw003.github.io/p/io_process_analysis/image/cce6fdfa8d9340348343a61921248167_hu_b987b6fb4ddc5f91.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>总结：5种IO好比5种钓鱼方式&lt;/p>
&lt;ul>
&lt;li>阻塞IO: 一直盯着鱼竿直到中鱼&lt;/li>
&lt;li>非阻塞IO: 看会手机，看会鱼竿，发现中鱼，收杆&lt;/li>
&lt;li>信号驱动IO: 一直看手机，直到鱼竿抖动，收杆&lt;/li>
&lt;li>多路复用IO: 同时使用多个鱼竿，一直等，直到中鱼&lt;/li>
&lt;li>异步IO: 让小弟去等鱼竿，自己干其他事，等中鱼了，让小弟打电话通知我&lt;/li>
&lt;/ul>
&lt;p>前4种都属于同步IO，&lt;/p>
&lt;p>同步和异步关注的是消息通信机制.&lt;/p>
&lt;ul>
&lt;li>所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回. 但是一旦调用返回，就得到返回值了; 换句话说，就是由调用者主动等待这个调用的结果;&lt;/li>
&lt;li>异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果; 换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果; 而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过&lt;strong>回调函数&lt;/strong>处理这个调用&lt;/li>
&lt;/ul>
&lt;p>现在回答：哪种IO模型最能充分利用等待时间？异步IO&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">模型&lt;/th>
&lt;th style="text-align: center">开发难度&lt;/th>
&lt;th style="text-align: center">性能&lt;/th>
&lt;th style="text-align: center">典型应用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">阻塞I/O&lt;/td>
&lt;td style="text-align: center">简单&lt;/td>
&lt;td style="text-align: center">低&lt;/td>
&lt;td style="text-align: center">低并发文件读写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">非阻塞I/O&lt;/td>
&lt;td style="text-align: center">中等&lt;/td>
&lt;td style="text-align: center">中&lt;/td>
&lt;td style="text-align: center">传感器轮询&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">信号驱动I/O&lt;/td>
&lt;td style="text-align: center">复杂&lt;/td>
&lt;td style="text-align: center">中高&lt;/td>
&lt;td style="text-align: center">UDP协议通信&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">多路复用I/O&lt;/td>
&lt;td style="text-align: center">复杂&lt;/td>
&lt;td style="text-align: center">高&lt;/td>
&lt;td style="text-align: center">Web服务器（Nginx）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">异步I/O&lt;/td>
&lt;td style="text-align: center">复杂&lt;/td>
&lt;td style="text-align: center">极高&lt;/td>
&lt;td style="text-align: center">分布式存储系统&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>技术演进趋势&lt;/strong>：现代高并发系统（如Kafka、Netty）普遍采用&lt;strong>多路复用+异步I/O组合模型&lt;/strong>，在降低线程开销的同时实现高吞吐量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+-------------------+ +------------------+ +-------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| 多路复用线程 | | 异步I/O线程池 | | 业务处理线程池 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| (epoll_wait循环) | ----&amp;gt; | (io_uring提交任务) | ----&amp;gt; | (处理HTTP请求等) |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+ +-------------------+ +-------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↑ ↑ ↑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 监控事件就绪 提交异步任务 处理完成回调
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="io多路复用详解">IO多路复用详解
&lt;/h3>&lt;h4 id="select">select
&lt;/h4>&lt;p>I/O多路转接之select
系统提供select函数来实现多路复用输入/输出模型.&lt;/p>
&lt;ul>
&lt;li>select系统调用是用来让我们的程序监视多个文件描述符的状态变化的;&lt;/li>
&lt;li>程序会停在select这里等待，直到被监视的文件描述符有一个或多个发生了状态改变;&lt;/li>
&lt;/ul>
&lt;p>select接口介绍&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/select.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">nfds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">readfds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">writefds&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">exceptfds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">timeval&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>int nfds&lt;/strong>
参数类型：&lt;strong>输入型参数&lt;/strong>
说明：待检测的文件描述符中最大的文件描述符值加一&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fd_set * readfds/writefds/exceptfds&lt;/strong>
参数类型：&lt;strong>输入输出型参数&lt;/strong>
说明：fed_set是内核提供的一种数据类型，本质是位图.它的作用如下图：
&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/90d61ffc813fd01a464c88388d972520.png"
width="1410"
height="915"
srcset="https://sfw003.github.io/p/io_process_analysis/image/90d61ffc813fd01a464c88388d972520_hu_4a034fc1824a7f07.png 480w, https://sfw003.github.io/p/io_process_analysis/image/90d61ffc813fd01a464c88388d972520_hu_7517a8687a2f2728.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>
readfds &amp;ndash; 监控可读
writefds &amp;ndash; 监控可写
exceptfds - -监控错误&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>struct timeval * timeout&lt;/strong>
参数类型：&lt;strong>输入输出型参数&lt;/strong>
说明：超时时间，如果为 NULL，则 select 函数会一直阻塞直到有事件发生；如果为非 NULL，则表示最长等待时间。
&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/364b13400c0b35aa7d2af5d4d7ca8389.png"
width="1809"
height="268"
srcset="https://sfw003.github.io/p/io_process_analysis/image/364b13400c0b35aa7d2af5d4d7ca8389_hu_e453ef6914e8a128.png 480w, https://sfw003.github.io/p/io_process_analysis/image/364b13400c0b35aa7d2af5d4d7ca8389_hu_70f1cd4a9a8237d6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="675"
data-flex-basis="1620px"
>
struct timeval timeout = {1, 0}; 就表示最长等待时间为1秒&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回值
int n = select()
如果n &amp;gt; 0 表明有n个fd就绪
如果n == 0 表明超时
如果n &amp;lt; 0 表明出错&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>先介绍几个select的附属函数：select的参数fd_set是位图，如果让用户自己修改，不安全也不方便，与开发者也提供了几个专门修改fd_set的函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">FD_CLR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">清空&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">FD_ISSET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">是否已经设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">FD_SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">设置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">FD_ZERO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">清&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>select的例子&lt;/strong>&lt;/p>
&lt;p>这里不会对select的例子进行讲解，因此select太麻烦了。
select需要一个辅助数组，这个数组是用来保存sockfd（包括listensockfd， 已经客户端连接的sockfd)。为什么？原因在于select的参数。
第1个参数：nfds = maxfd+1，每次使用select时，都要遍历辅助数组来获得最大的fd，麻烦（当然你也可以设置成员来专门存储maxfd, 真正麻烦在后面）。
第2，3、4个参数：由于它们在调用select前后，比特位的含义发生了变化。（前表示是否监控，后表示是否就绪）因此你每次在调用之前都要重新设置。但你怎么知道要保存哪些fd？因此需要一个辅助数组来记录fd。在调用select前，遍历辅助数据来设置fd_set。
因此，select会出现很多遍历。代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/select.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Socket.hpp&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">defaultport&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">8888&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd_num_max&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd_set&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">defaultfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SelectServer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SelectServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">defaultport&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">_port&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">fd_num_max&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">defaultfd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// std::cout &amp;lt;&amp;lt; &amp;#34;fd_array[&amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34;]&amp;#34; &amp;lt;&amp;lt; &amp;#34; : &amp;#34; &amp;lt;&amp;lt; fd_array[i] &amp;lt;&amp;lt; std::endl;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">Init&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Socket&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_port&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Listen&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Accepter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 我们的连接事件就绪了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">clientip&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">clientport&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">clientip&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">clientport&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 会不会阻塞在这里？不会
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sock&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// sock -&amp;gt; fd_array[]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(;&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">fd_num_max&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 第二个循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">defaultfd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">fd_num_max&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Warning&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;server is full, close %d now!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PrintFd&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Recver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// demo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ssize_t&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// bug?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;get a messge: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Info&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;client quit, me too, close fd is : %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">defaultfd&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 这里本质是从select中移除
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Warning&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;recv error: fd is : %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">defaultfd&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 这里本质是从select中移除
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Dispatcher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd_set&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rfds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">fd_num_max&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 这是第三个循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">defaultfd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">FD_ISSET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rfds&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Fd&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Accepter&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 连接管理器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="c1">// non listenfd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Recver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">listensock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Fd&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">listensock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="n">rfds&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FD_ZERO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rfds&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">fd_num_max&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 第一次循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">defaultfd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FD_SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rfds&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">maxfd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maxfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maxfd&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rfds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;time out, timeout: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tv_sec&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tv_usec&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;select error&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;get a new link!!!!!&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Dispatcher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rfds&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">PrintFd&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;online fd list: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">fd_num_max&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">defaultfd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">SelectServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Sock&lt;/span> &lt;span class="n">_listensock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">_port&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">fd_num_max&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 数组, 用户维护的！
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// int wfd_array[fd_num_max];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>总结一下：select实现多路复用的方式是，将已连接的Socket都放到一个文件描述符集合，然后调用select函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生（通过遍历的方式）当检查到有事件产生后，将此Socket标记为可读或可写，接着再把整个文件描述符集合拷贝回用户态里，然后用户态再通过遍历的方法找到可读或可写的Socket，然后再对其处理。&lt;/p>
&lt;p>&lt;strong>select的缺点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>固定的文件描述符集合大小：select 使用 fd_set 数据结构来管理文件描述符集合，其大小由宏 FD_SETSIZE 决定，通常默认为 1024。这意味着 select 一次最多只能处理 1024 个文件描述符，这在某些需要处理大量并发连接的场景下可能会成为限制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复杂的代码逻辑：由于 select 的参数有很多输入输出型参数。&lt;strong>这导致每次使用都要遍历辅助数组来重新设置。&lt;/strong>（这个辅助数组是常数大小，因此算法优化遍历，效率不会改变多少）因此使用 select 编写的代码可能会比较麻烦、复杂，容易出错，并且难以维护和理解。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不支持高级别的事件通知：select 仅支持基本的事件通知，如可读、可写、异常等。在某些高级别的应用场景中，可能需要更多的事件类型和更细粒度的事件控制，而 select 无法满足这些需求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="poll">poll
&lt;/h4>&lt;p>poll是对select的优化，它解决了select的一些缺点。
哪些&lt;strong>缺点&lt;/strong>？&lt;/p>
&lt;ol>
&lt;li>固定的文件描述符集合大小&lt;/li>
&lt;li>不支持高级别的事件通知&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>poll的接口介绍&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/60fadf4b6ea367f464a49c533dc648fb.png"
width="1592"
height="435"
srcset="https://sfw003.github.io/p/io_process_analysis/image/60fadf4b6ea367f464a49c533dc648fb_hu_96b33fbb26a2fd7b.png 480w, https://sfw003.github.io/p/io_process_analysis/image/60fadf4b6ea367f464a49c533dc648fb_hu_7e9ac1361c92f4a4.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="365"
data-flex-basis="878px"
>
events和revents的取值：
&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/9c5bcca40609a6700b1365ce6e76dec3.png"
width="1163"
height="239"
srcset="https://sfw003.github.io/p/io_process_analysis/image/9c5bcca40609a6700b1365ce6e76dec3_hu_78539f860c4308e3.png 480w, https://sfw003.github.io/p/io_process_analysis/image/9c5bcca40609a6700b1365ce6e76dec3_hu_93527d467596541.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="486"
data-flex-basis="1167px"
>
&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/c28a6297bb1aa59ef34d1708bf5eb22d.png"
width="1158"
height="302"
srcset="https://sfw003.github.io/p/io_process_analysis/image/c28a6297bb1aa59ef34d1708bf5eb22d_hu_dfb9f45327c73f21.png 480w, https://sfw003.github.io/p/io_process_analysis/image/c28a6297bb1aa59ef34d1708bf5eb22d_hu_f922a20c568dcb5c.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="383"
data-flex-basis="920px"
>&lt;/p>
&lt;p>&lt;strong>poll的优点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>不同与select使用三个位图来表示三个 fdset的方式，poll使用一个pollfd的指针实现.pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式. 接口使用比select更方便.&lt;/li>
&lt;li>poll并没有最大数量限制 (但是数量过大后性能也是会下降).&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>poll的缺点&lt;/strong>&lt;/p>
&lt;p>poll中监听的文件描述符数目增多时，和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符.每次调用poll都需要把大量的pollfd结构从用户态拷贝到内核中.同时连接的大量客户端在一时刻可能只有很少的处于就绪状态, 因此随着监视的描述符数量的增长, 其效率也会线性下降。&lt;/p>
&lt;h4 id="epoll">epoll
&lt;/h4>&lt;p>按照man手册的说法: 是为处理大批量句柄而作了改进的poll. 但其实epoll已经可以说是一个新东西了。
它是在2.5.44内核中被引进的(epoll(4) is a new API introduced in Linux kernel 2.5.44)
Linux2.6下性能最好的多路它几乎具备了之前所说的一切优点，被公认为性能最好的多路IO转接方案。&lt;/p>
&lt;p>&lt;strong>epoll的接口&lt;/strong>&lt;/p>
&lt;p>epoll有3个系统调用接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">epoll_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">epoll_ctl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">epoll_event&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">epoll_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">epoll_event&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">events&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxevents&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面我们来看看epoll的具体流程：
网卡接收数据，触发硬件中断，OS调用epoll的回调函数，执行以下4步&lt;/p>
&lt;ol>
&lt;li>根据网卡驱动信息，获取就绪的fd&lt;/li>
&lt;li>将数据交付给TCP的接收缓冲区&lt;/li>
&lt;li>以就绪的fd作为红黑树节点的key值，提取对应红黑树节点（内部包含events信息）&lt;/li>
&lt;li>依据提取的信息创建就绪节点，连接到就绪队列中&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://sfw003.github.io/p/io_process_analysis/image/942b31f58aba4fd08fd5f5333bc6fb7e.png"
width="5324"
height="4504"
srcset="https://sfw003.github.io/p/io_process_analysis/image/942b31f58aba4fd08fd5f5333bc6fb7e_hu_85b40fafd66005dc.png 480w, https://sfw003.github.io/p/io_process_analysis/image/942b31f58aba4fd08fd5f5333bc6fb7e_hu_d450d9316afbc935.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="283px"
>&lt;/p></description></item><item><title>Linux 进程</title><link>https://sfw003.github.io/p/linux-process/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-process/</guid><description>&lt;p>绘图文件，在&lt;a class="link" href="https://sfw003.github.io/p/linux-series/#linux进程管理" >linux系列文章:进程管理&lt;/a>&lt;/p>
&lt;h2 id="进程和pcb">进程和PCB
&lt;/h2>&lt;p>什么是进程？
课本上的定义有很多，如：进程是程序的一次执行，是加载到内存的程序，是&lt;strong>系统进行资源分配和调度的一个独立单位&lt;/strong>。&lt;/p>
&lt;p>我们不必去纠结定义，只需知道2点：如何描述进程？如何管理进程？&lt;/p>
&lt;p>描述=提取进程属性，管理=对进程的属性进行管理
由此首先要引出一个概念：进程的PCB&lt;/p>
&lt;p>PCB(process control block) 是什么？一句话：&lt;strong>进程属性的集合&lt;/strong>，是一个结构体。此时进程就被拆分为2个部分：属性和数据，如下图：&lt;/p>
&lt;p>linux下的进程信息存储在&lt;code>/proc&lt;/code>目录下&lt;/p>
&lt;h3 id="linux下的pcb">linux下的PCB
&lt;/h3>&lt;p>在linux操作系统下的PCB：&lt;strong>task_struct（结构体）&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>task_struct的内容分类：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>标识符&lt;/strong>: 描述本进程的唯一标示符，用来区别其他进程。&lt;/li>
&lt;li>&lt;strong>状态&lt;/strong>: 任务状态，退出代码，退出信号等。&lt;/li>
&lt;li>&lt;strong>优先级&lt;/strong>: 相对于其他进程的优先级。&lt;/li>
&lt;li>程序计数器: 程序中即将被执行的下一条指令的地址。&lt;/li>
&lt;li>内存指针: 包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针&lt;/li>
&lt;li>上下文数据: 进程执行时处理器的寄存器中的数据[休学例子，要加图CPU，寄存器]。&lt;/li>
&lt;li>I／O状态信息: 包括显示的I/O请求,分配给进程的I／O设备和被进程使用的文件列表。&lt;/li>
&lt;li>记账信息: 可能包括处理器时间总和，使用的时钟数总和，时间限制，记账号等。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h3 id="进程状态">进程状态
&lt;/h3>&lt;p>在操作系统学科中，描述了一&lt;strong>个进程活动期间至少具备3种状态&lt;/strong>，即进程的三态模型。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/image-20250410115534591.png"
width="483"
height="315"
srcset="https://sfw003.github.io/p/linux-process/image/image-20250410115534591_hu_bec84f15f212fa14.png 480w, https://sfw003.github.io/p/linux-process/image/image-20250410115534591_hu_309684bf5fa1ab87.png 1024w"
loading="lazy"
alt="image-20250410115534591"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>但是这几种状态不够应对实际的情况。如果有大量处于阻塞状态的进程，将长时间占据物理内存空间，造成浪费。因此我们新增一种状态——&lt;strong>挂起状态&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>挂起状态：进程没有占用物理内存空间的状态（关键词：物理内存）&lt;/p>
&lt;p>理解：此时进程的数据会被移到磁盘空间中&lt;/p>&lt;/blockquote>
&lt;p>其中挂起状态又分为2种：阻塞挂起和就绪挂起&lt;/p>
&lt;ul>
&lt;li>阻塞挂起状态：进程在外存，等待事件&lt;/li>
&lt;li>就绪挂起状态：进程在外存，事件就绪&lt;/li>
&lt;/ul>
&lt;p>因此现在有 运行、就绪、阻塞、阻塞挂起、就绪挂起共5种状态，如果再具体一点，还可以加入进程&lt;strong>创建状态&lt;/strong>和进程&lt;strong>结束状态&lt;/strong>，共7种。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/image-20250410141859878.png"
width="721"
height="318"
srcset="https://sfw003.github.io/p/linux-process/image/image-20250410141859878_hu_9faf517a3ac888f3.png 480w, https://sfw003.github.io/p/linux-process/image/image-20250410141859878_hu_de4865f7672b1bc1.png 1024w"
loading="lazy"
alt="image-20250410141859878"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="544px"
>&lt;/p>
&lt;p>在linux系统中，关于进程状态的定义如下，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">task_state_array&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* states in TASK_REPORT: */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;R (running)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x00 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;S (sleeping)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x01 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;D (disk sleep)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x02 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;T (stopped)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x04 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;t (tracing stop)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x08 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;X (dead)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x10 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Z (zombie)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x20 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;P (parked)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x40 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* states beyond TASK_REPORT: */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;I (idle)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* 0x80 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="磁盘睡眠--d">磁盘睡眠 &amp;ndash; D
&lt;/h4>&lt;p>D状态，磁盘睡眠，进程的磁盘睡眠状态（Disk Sleep State）通常是指进程处于等待磁盘I/O操作完成的状态。这种状态通常出现在进程请求进行磁盘读取或写入操作时，但磁盘尚未完成相应的I/O操作，因此进程被阻塞，等待磁盘响应。在这种状态下，进程不会消耗CPU时间，而是被挂起，直到磁盘I/O操作完成。&lt;/p>
&lt;p>也就是挂起状态。&lt;/p>
&lt;h4 id="暂停和跟踪暂停--t和t">暂停和跟踪暂停 &amp;ndash; T和t
&lt;/h4>&lt;p>Linux操作系统的有个信号&lt;code>kill -19&lt;/code>， 可以使进程暂停。T状态即进程处于暂停状态。注意不要于S状态混淆，S状态一定是进程在等待某种资源，但T状态不一定在等待某种资源。&lt;/p>
&lt;p>那T和t有什么区别呢？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Stopped（停止）状态：
进程处于停止状态通常是由于接收到了一个信号，例如SIGSTOP（Ctrl-Z产生的SIGTSTP信号）或者SIGTSTP（通常由shell的暂停命令引发）。这种状态下的进程被挂起，暂时停止执行，但可以通过发送SIGCONT信号来恢复执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tracing Stop（跟踪停止）状态：
进程处于跟踪停止状态通常是由于调试器（如GDB）或者ptrace系统调用的作用。在这种状态下，进程被调试器所追踪，通常是因为调试器在进行单步执行、观察或者修改进程的内存等操作。这种状态下的进程暂时停止执行，直到调试器允许其继续执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="僵尸进程--z">僵尸进程 &amp;ndash; Z
&lt;/h4>&lt;p>当一个进程（子进程）完成执行后，它的退出状态需要被父进程获取。如果父进程没有主动获取子进程的退出状态，那么子进程就会变成僵尸进程，相当于一个人处于生死之间。&lt;/p>
&lt;h5 id="父子进程-">父子进程 *
&lt;/h5>&lt;p>这里提到了父子进程，那什么是父进程、子进程？如何创建子进程？&lt;/p>
&lt;p>下方代码实现：父进程一直运行，子进程执行3次后结束&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是进程：pid = %d，ppid = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getppid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是子进程，pid =%d，ppid =%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getppid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我是父进程，pid = %d，ppid = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nf">getppid&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果如下：子进程的状态由S+ &amp;ndash;&amp;gt; Z+， Z即处于僵尸状态&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/a67747920f70f6aabf6712cac48bde5b.png"
width="2201"
height="913"
srcset="https://sfw003.github.io/p/linux-process/image/a67747920f70f6aabf6712cac48bde5b_hu_b9ad2643e4cc1121.png 480w, https://sfw003.github.io/p/linux-process/image/a67747920f70f6aabf6712cac48bde5b_hu_c493505028f33825.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="578px"
>&lt;/p>
&lt;p>僵尸进程虽然不会直接对系统造成严重影响，但长时间存在的僵尸进程会对系统的正常运行产生一些间接的危害，包括：可能导致资源耗尽，影响进程管理，降低系统稳定性，因此需要父进程处理僵尸进程。
父进程通常需要调用类似于wait()或waitpid()的系统调用来等待子进程的退出，并获取其退出状态。&lt;/p>
&lt;p>&lt;strong>当然如果父进程也结束，系统会自动把子进程释放。&lt;/strong>&lt;/p>
&lt;h4 id="孤儿进程">孤儿进程
&lt;/h4>&lt;p>僵尸进程是子进程结束，但父进程未结束。如何父进程先结束，子进程后结束呢？那么子进程便会变为孤儿进程，并被&lt;strong>托孤&lt;/strong>给1号进程，即操作系统。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/13689dfc900f45c81ca9d116a4d55c2b.png"
width="2426"
height="779"
srcset="https://sfw003.github.io/p/linux-process/image/13689dfc900f45c81ca9d116a4d55c2b_hu_dd4aaa17e13875a5.png 480w, https://sfw003.github.io/p/linux-process/image/13689dfc900f45c81ca9d116a4d55c2b_hu_62ec059c2a70d62e.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="311"
data-flex-basis="747px"
>&lt;/p>
&lt;h3 id="进程优先级">进程优先级
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/de81281fa20b148bfabb0f27df8892cb.png"
width="1050"
height="311"
srcset="https://sfw003.github.io/p/linux-process/image/de81281fa20b148bfabb0f27df8892cb_hu_67425e7cac0b994f.png 480w, https://sfw003.github.io/p/linux-process/image/de81281fa20b148bfabb0f27df8892cb_hu_8686293bd529bf14.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="337"
data-flex-basis="810px"
>
PRI（Priority）：PRI 表示进程的静态优先级或调度优先级。俗点说就是程序被CPU执行的先后顺序，&lt;strong>此值越小,进程的优先级别越高。&lt;/strong>
NI（Nice Value）：NI 表示进程的 Nice 值，是一个表示进程调度优先级的数值。它的作用是改变PRI的值。&lt;/p>
&lt;p>通过PRI和NI可以调整进程的优先级，计算公式如下：&lt;/p>
&lt;p>&lt;code>PRI(new)=PRI(old)+nice&lt;/code> '&lt;/p>
&lt;p>这样，当nice值为负值的时候，那么该程序将会优先级值将变小，即其优先级会变高，则其越快被执行所以，调整进程优先级，在Linux下，就是调整进程nice值&lt;/p>
&lt;p>注意：nice 的范围在 【-20， 19】
PRI(old) 最小是80，如果原来的PRI &amp;lt; 80， 则会直接从80开始算：
因此：PRI 范围【60， 99】，但在计算新的PRI时，最小从80开始
举例：原来 ： PRI = 60 NI = 0;
更改：令PRI = 100
结果：PRI = 99 NI = 19&lt;/p>
&lt;p>那如何更改nice值呢？&lt;/p>
&lt;p>在Linux系统中，&lt;code>nice&lt;/code>命令用于启动一个新的进程，并设置其优先级。而&lt;code>renice&lt;/code>命令用于修改已经运行的进程的优先级。&lt;/p>
&lt;p>&lt;code>nice&lt;/code>命令的使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nice &lt;span class="o">[&lt;/span>OPTION&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>COMMAND &lt;span class="o">[&lt;/span>ARG&lt;span class="o">]&lt;/span>...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>nice&lt;/code>命令通过改变进程的优先级来影响其调度。数值越大，优先级越低。默认情况下，优先级是0。&lt;/p>
&lt;p>例如，运行一个命令并设置其优先级：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nice -n &amp;lt;优先级&amp;gt; &amp;lt;命令&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例如，将&lt;code>ls&lt;/code>命令的优先级降低为10：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nice -n &lt;span class="m">10&lt;/span> ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>renice&lt;/code>命令的使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">renice &lt;span class="o">[&lt;/span>优先级&lt;span class="o">]&lt;/span> -p &amp;lt;进程ID&amp;gt; &lt;span class="o">[&lt;/span>&amp;lt;进程ID&amp;gt;...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>renice&lt;/code>命令用于修改已经运行的进程的优先级。可以指定一个或多个进程ID来修改它们的优先级。&lt;/p>
&lt;p>例如，将进程ID为1234的进程的优先级设置为10：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">renice &lt;span class="m">10&lt;/span> -p &lt;span class="m">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="进程地址空间">进程地址空间
&lt;/h2>&lt;p>进程地址空间是操作系统为每个进程分配的&lt;strong>虚拟内存&lt;/strong>区域，它让每个进程有独立的地址范围，隔离了物理内存，提高了安全性和管理效率。&lt;/p>
&lt;h3 id="进程地址空间分布">进程地址空间分布
&lt;/h3>&lt;p>linux下进程地址空间如下：内核空间和用户空间按1 : 3&lt;/p>
&lt;blockquote>
&lt;p>Linux系统与Windows系统在进程地址空间设计上存在显著差异，而不同编程语言的进程地址空间本质上是统一的（受操作系统管理）&lt;/p>
&lt;p>&lt;strong>Windows&lt;/strong>：默认采用 &lt;strong>2:2模式&lt;/strong>（用户空间和内核空间各占2GB）但可通过设置 &lt;code>Large-Address-Aware&lt;/code> 标志调整为 &lt;strong>3:1模式&lt;/strong>&lt;/p>
&lt;p>但是它们的用户空间都包含&lt;strong>代码段、数据段、堆、栈&lt;/strong>等&lt;/p>&lt;/blockquote>
&lt;img src="image/ff03787b23fd4675af25b9cfd03ac888-1744267679242-12.png" alt="在这里插入图片描述" style="zoom:67%;" />
&lt;p>验证一下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s_A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">m_C&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;字符常量：a : %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;静态变量：s_A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s_A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;全局变量：未初始化g_A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;全局变量：已初始化g_B : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_B&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;栈区：A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;栈区：B : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">B&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;栈区：C : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">C&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;堆区：m_A : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">m_A&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;堆区：m_B : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">m_B&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;堆区：m_C : &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">m_C&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ubuntu g++:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">字符常量：a : 0x5649d4534009
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">静态变量：s_A : 0x5649d4536014
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：未初始化g_A : 0x5649d4536154 未初始化地址 &amp;gt; 已初始化地址 符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：已初始化g_B : 0x5649d4536010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：A : 0x7ffc892fb3cc A到B栈区的地址是增长的, 不符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：B : 0x7ffc892fb3d0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：C : 0x7ffc892fb3d4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_A : 0x5649d5eadeb0 堆区的地址是增长的，符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_B : 0x5649d5eaded0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_C : 0x5649d5eadef0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里栈区的地址是增长的，不是应该是减少吗？我再测试一下windows下vs2019&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">windows vs2019
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">字符常量：a : 00639B30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">静态变量：s_A : 0063C004
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：未初始化g_A : 0063C3E0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">全局变量：已初始化g_B : 0063C000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：A : 004FFBA8 A到B栈区的地址是下降的, 符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：B : 004FFB9C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">栈区：C : 004FFB90
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_A : 0069FD68 堆区的地址是增长的，符合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_B : 0069FD98
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">堆区：m_C : 006A0118
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是什么情况？linux栈区是向高地址分配？windows的栈区是向低地址分配？这个问题我之前查阅的时候，得到答案是&lt;strong>局部变量按编译器自己方式进行分配&lt;/strong>。&lt;/p>
&lt;p>？？？&lt;/p>
&lt;p>我对此很懵逼，后来我才理解。这里需要引入一个概念：&lt;strong>函数栈帧&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>函数栈帧（stack frame）就是函数调用过程中在程序的调用栈（call stack）所开辟的空间，这些空间是用来存放：&lt;/p>
&lt;ul>
&lt;li>函数参数和函数返回值&lt;/li>
&lt;li>临时变量（包括函数的非静态的局部变量以及编译器自动生产的其他临时变量）&lt;/li>
&lt;li>保存上下文信息（包括在函数调用前后需要保持不变的寄存器）。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/image-20250410151621357.png"
width="629"
height="310"
srcset="https://sfw003.github.io/p/linux-process/image/image-20250410151621357_hu_e3f23c9aa3c8da97.png 480w, https://sfw003.github.io/p/linux-process/image/image-20250410151621357_hu_86eea16cdff95133.png 1024w"
loading="lazy"
alt="image-20250410151621357"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;h3 id="虚拟地址和页表">虚拟地址和页表
&lt;/h3>&lt;p>前面提到，进程地址空间是操作系统为每个进程分配的&lt;strong>虚拟内存&lt;/strong>区域，这么说，在进程中使用的地址都是虚拟地址，如何证明？来看下面一段代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;子进程：g_val = %d, &amp;amp;g_val = %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_val&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;父进程：g_val = %d, &amp;amp;g_val = %p&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_val&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">父进程：&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x55631bc26010&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">子进程：&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x55631bc26010&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>子进程更改数据后，会发生写时拷贝，因此子进程和父进程的g_val值不一样，符合预期，但是为什么发生了写时拷贝，父子进程的g_val地址还是相同？
&lt;strong>显然这里的地址一定不是真实的地址。&lt;/strong>&lt;/p>
&lt;p>那虚拟地址如何于物理地址联系呢？通过&lt;strong>页表&lt;/strong>与物理地址映射。
&lt;img src="https://sfw003.github.io/p/linux-process/image/eda7e0b75e26465fab9eff9a5dd59436.png"
width="2143"
height="853"
srcset="https://sfw003.github.io/p/linux-process/image/eda7e0b75e26465fab9eff9a5dd59436_hu_9e17fac47ca098f4.png 480w, https://sfw003.github.io/p/linux-process/image/eda7e0b75e26465fab9eff9a5dd59436_hu_90a3d99dc2c50dd5.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="602px"
>
回到fork里的问题：为什么父子进程不同的值有着相同的地址？因为这里的地址是虚拟地址。子进程只需更改子进程页表。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/555567ce5c0a4980a01cf811f77b86ef.png"
width="1109"
height="402"
srcset="https://sfw003.github.io/p/linux-process/image/555567ce5c0a4980a01cf811f77b86ef_hu_3e81e21566451f09.png 480w, https://sfw003.github.io/p/linux-process/image/555567ce5c0a4980a01cf811f77b86ef_hu_2b19323ebfafc9e8.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="275"
data-flex-basis="662px"
>&lt;/p>
&lt;h2 id="进程控制">进程控制
&lt;/h2>&lt;p>前文提到linux下进程有7种状态，如果从进程控制的角度，我们关心&lt;/p>
&lt;ol>
&lt;li>进程如何创建&lt;/li>
&lt;li>进程运行结束，结果是否正确？&lt;/li>
&lt;li>进程异常，如何终止？&lt;/li>
&lt;/ol>
&lt;h3 id="创建进程">创建进程
&lt;/h3>&lt;p>系统创建进程的流程如下：&lt;/p>
&lt;ol>
&lt;li>申请一个空白的PCB，初始化PCB；&lt;/li>
&lt;li>为进程分配运行时所必需的资源；&lt;/li>
&lt;li>将PCB 插入到就绪队列，等待进程调度；&lt;/li>
&lt;/ol>
&lt;p>用户如何创建进程？&lt;/p>
&lt;ul>
&lt;li>运行一个可执行程序&lt;/li>
&lt;li>fork创建子进程&lt;/li>
&lt;/ul>
&lt;h3 id="进程等待">进程等待
&lt;/h3>&lt;p>当一个进程（子进程）完成执行后，它的退出状态需要被父进程获取。如果父进程没有主动获取子进程的退出状态，那么子进程就会变成僵尸进程。&lt;strong>僵尸进程无法被信号 kill -9 杀死，如果放着不管，就会造成内存泄漏&lt;/strong>。
如何解决呢？此时需要父进程通过进程等待的方式，回收子进程资源，获取子进程退出信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;sys/types.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;sys/wait.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pid_t&lt;/span> &lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">返回值：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">成功返回被等待进程&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="err">，失败返回&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">输出型参数，获取子进程退出状态&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">不关心则可以设置成为&lt;/span>&lt;span class="nb">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pid_&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="n">waitpid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">返回值：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">当正常返回的时候&lt;/span>&lt;span class="n">waitpid返回收集到的子进程的进程ID&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">如果设置了选项&lt;/span>&lt;span class="n">WNOHANG&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">而调用中&lt;/span>&lt;span class="n">waitpid发现没有已退出的子进程可收集&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">则返回&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">如果调用中出错&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">则返回&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">这时&lt;/span>&lt;span class="n">errno会被设置成相应的值以指示错误所在&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid&lt;/span>&lt;span class="err">：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pid&lt;/span>&lt;span class="o">=-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">等待任一个子进程。与&lt;/span>&lt;span class="n">wait等效&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pid&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mf">0.&lt;/span>&lt;span class="err">等待其进程&lt;/span>&lt;span class="n">ID与pid相等的子进程&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">status&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WIFEXITED&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若为正常终止子进程返回的状态，则为真。（查看进程是否是正常退出）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WEXITSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若&lt;/span>&lt;span class="n">WIFEXITED非零&lt;/span>&lt;span class="err">，提取子进程退出码。（查看进程的退出码）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">WNOHANG&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">若&lt;/span>&lt;span class="n">pid指定的子进程没有结束&lt;/span>&lt;span class="err">，则&lt;/span>&lt;span class="n">waitpid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">函数返回&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">，不予以等待。若正常结束，则返回该子进&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">程的&lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/wait.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;create a child process, pid = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">getpid&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//经过3秒后，wait子进程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;wait a process pid = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; status = &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230665&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230667&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230668&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230669&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">create&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">512&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">768&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wait&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>while :; do ps ajx | head -1 &amp;amp;&amp;amp; ps ajx | grep t1; sleep 1; done&lt;/code>来监控
发现5个僵尸进程，被wait回收了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="n">ps&lt;/span> &lt;span class="n">ajx&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">head&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ps&lt;/span> &lt;span class="n">ajx&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">sleep&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230652&lt;/span> &lt;span class="mi">230651&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230651&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230657&lt;/span> &lt;span class="mi">230656&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230656&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230662&lt;/span> &lt;span class="mi">230661&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230661&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229863&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230673&lt;/span> &lt;span class="mi">230672&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230672&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229863&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230678&lt;/span> &lt;span class="mi">230677&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230677&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229863&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230665&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230666&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230667&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230668&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">230669&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="mi">229863&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">230664&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">defunct&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230683&lt;/span> &lt;span class="mi">230682&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230682&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230688&lt;/span> &lt;span class="mi">230687&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230687&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPID&lt;/span> &lt;span class="n">PID&lt;/span> &lt;span class="n">PGID&lt;/span> &lt;span class="n">SID&lt;/span> &lt;span class="n">TTY&lt;/span> &lt;span class="n">TPGID&lt;/span> &lt;span class="n">STAT&lt;/span> &lt;span class="n">UID&lt;/span> &lt;span class="n">TIME&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">229980&lt;/span> &lt;span class="mi">230693&lt;/span> &lt;span class="mi">230692&lt;/span> &lt;span class="mi">229980&lt;/span> &lt;span class="n">pts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">230692&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mo">00&lt;/span> &lt;span class="n">grep&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="进程退出信息">进程退出信息
&lt;/h4>&lt;p>wait和waitpid，都有一个status参数，该参数是一个输出型参数，由操作系统填充。&lt;/p>
&lt;ul>
&lt;li>如果传递NULL，表示不关心子进程的退出状态信息。&lt;/li>
&lt;li>否则，操作系统会根据该参数，将子进程的退出信息反馈给父进程。&lt;/li>
&lt;/ul>
&lt;p>status不能简单的当作整形来看待，可以当作位图来看待，具体细节如下图（只研究status低16比特位）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process/image/f7fdad997b8c4ea2b447c1da47509574.png"
width="572"
height="173"
srcset="https://sfw003.github.io/p/linux-process/image/f7fdad997b8c4ea2b447c1da47509574_hu_45e7345645b5e0bd.png 480w, https://sfw003.github.io/p/linux-process/image/f7fdad997b8c4ea2b447c1da47509574_hu_6409d2ee8488c9c6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="793px"
>&lt;/p>
&lt;p>正常退出看退出码，异常退出看信号。status作为子进程的退出信息，通过位图的方式将退出码和信号的信息存储在比特位中。&lt;/p>
&lt;p>你可以通过status的值来分析它的退出信息，如果你嫌麻烦，可以使用2个宏&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WIFEXITED&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若为正常终止子进程返回的状态，则为真。（查看进程是否是正常退出）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WEXITSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">若&lt;/span>&lt;span class="n">WIFEXITED非零&lt;/span>&lt;span class="err">，提取子进程退出码。（查看进程的退出码）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="进程替换">进程替换
&lt;/h3>&lt;p>当进程调用一种exec函数时,该进程的用户空间代码和数据完全被新程序替换,从新程序的启动进程程开始执行。调用exec并不创建新进程,所以调用exec前后该进程的id并未改变。
&lt;img src="https://sfw003.github.io/p/linux-process/image/beceee3e513e439a92bbe947a21a4ef5.png"
width="1075"
height="414"
srcset="https://sfw003.github.io/p/linux-process/image/beceee3e513e439a92bbe947a21a4ef5_hu_30eae4c798b0a663.png 480w, https://sfw003.github.io/p/linux-process/image/beceee3e513e439a92bbe947a21a4ef5_hu_2d881f97b7ea6c06.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="623px"
>&lt;/p>
&lt;p>函数关系：
事实上,只有execve是真正的系统调用,其它五个函数最终都调用 execve,所以execve在man手册 第2节,其它函数在man手册第3节。这些函数之间的关系如下图所示
&lt;img src="https://sfw003.github.io/p/linux-process/image/43aaece3d5db4ea288b061cb78c2edad.png"
width="972"
height="468"
srcset="https://sfw003.github.io/p/linux-process/image/43aaece3d5db4ea288b061cb78c2edad_hu_25bfe1cf88231b84.png 480w, https://sfw003.github.io/p/linux-process/image/43aaece3d5db4ea288b061cb78c2edad_hu_1b06b07f30c2b3b1.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p></description></item><item><title>Linux 进程间通信</title><link>https://sfw003.github.io/p/linux-process-communication/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-process-communication/</guid><description>&lt;p>绘图文件，在&lt;a class="link" href="https://sfw003.github.io/p/linux-series/#linux进程管理" >linux系列文章:进程管理&lt;/a>&lt;/p>
&lt;h2 id="进程间通信">进程间通信
&lt;/h2>&lt;blockquote>
&lt;p>进程间通信（Inter-Process Communication，IPC）是指在操作系统中，不同的进程之间进行数据交换、信息传递和同步操作的机制。在多任务操作系统中，不同的进程可能同时运行，它们之间可能需要进行数据共享、协作完成某项任务等操作，这就需要进程间通信。
进程间通信目的：&lt;/p>
&lt;ol>
&lt;li>数据传输：一个进程需要将它的数据发送给另一个进程&lt;/li>
&lt;li>资源共享：多个进程之间共享同样的资源。&lt;/li>
&lt;li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。&lt;/li>
&lt;li>进程控制：有些进程希望完全控制另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>如何理解进程间通信：&lt;strong>本质是让不同的进程看到同一份资源&lt;/strong>。&lt;/p>
&lt;ol>
&lt;li>那如何让不同进程看到同一份资源呢？&lt;/li>
&lt;li>资源又是什么呢？&lt;/li>
&lt;/ol>
&lt;p>怀着这2个问题，我们来看看进程通信模块：
一般操作系统会有一个独立的通信模块，隶属于文件系统, 即IPC通信模块。
在linux内核刚被设计时，不支持通信，后来发现通信很重要，于是很多开发人员开始设计通信模块。当时的设计一个通信模块并不难，很多人提出了不同设计思路，谁也不服谁，为了统一，制定了标准。
最后落地了2套标准：system V &amp;amp;&amp;amp; posix&lt;/p>
&lt;p>进程间通信的分类：&lt;/p>
&lt;blockquote>
&lt;p>管道&lt;/p>
&lt;ol>
&lt;li>匿名管道pipe&lt;/li>
&lt;li>命名管道&lt;/li>
&lt;/ol>
&lt;p>System V IPC&lt;/p>
&lt;ol>
&lt;li>System V 消息队列&lt;/li>
&lt;li>System V 共享内存&lt;/li>
&lt;li>3 .System V 信号量&lt;/li>
&lt;/ol>
&lt;p>POSIX IPC&lt;/p>
&lt;ol>
&lt;li>消息队列&lt;/li>
&lt;li>共享内存&lt;/li>
&lt;li>信号量&lt;/li>
&lt;li>互斥量&lt;/li>
&lt;li>条件变量&lt;/li>
&lt;li>读写锁&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h2 id="管道">管道
&lt;/h2>&lt;p>在使用linux命令时，常常需要使用管道&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ps aux &lt;span class="p">|&lt;/span> grep name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的&lt;code>丨&lt;/code>竖线就是一个管道，它的功能是将前一个命令的输出，作为后一个命令的输入，采用FIFO（先进先出）的传输方式。&lt;/p>
&lt;p>这种管道没有名字，称为&lt;strong>匿名管道&lt;/strong>&lt;/p>
&lt;p>有了匿名管道，那肯定还有&lt;strong>命名管道&lt;/strong>。命名管道通过&lt;code>mkfifo&lt;/code>来创建&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mkfifo name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="匿名管道">匿名管道
&lt;/h3>&lt;p>匿名管道是如何创建的呢？这涉及到一个系统调用：pipe&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="err">功能&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">创建管道&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">原型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pipefd&lt;/span>&lt;span class="err">：文件描述符数组&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">输出型参数，其中&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">存放读端的文件描述符&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">存放读端的文件描述符&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">返回值&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="err">成功返回&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">，失败返回错误代码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>管道通常是&lt;strong>单向通信&lt;/strong>，主要是为了简化设计。如果要进行双向通信，那就创造两个管道。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91.png"
width="531"
height="638"
srcset="https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91_hu_966c08cf36ab7829.png 480w, https://sfw003.github.io/p/linux-process-communication/image/e7a92bfb9c5e2004ff90217301b04c91_hu_84a82c9a7f6451b2.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="199px"
>&lt;/p>
&lt;p>案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cassert&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建管道，让父进程写，子进程读
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//子进程 -- 读取管道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="c1">//关闭写端,留下读端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//……子进程接受数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//父进程 -- 写入管道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="c1">//关闭读端，留下写端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//……父进程写入数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipefd&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="命名管道">命名管道
&lt;/h3>&lt;h3 id="理解管道">理解管道
&lt;/h3>&lt;p>linux下一切皆文件，管道能读能写，肯定是一种文件。一般情况下，进程管理文件如下图。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723.png"
width="719"
height="256"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723_hu_6ecd350cf21aef45.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410161331723_hu_5bc3a31a3e4d0dfc.png 1024w"
loading="lazy"
alt="image-20250410161331723"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="674px"
>&lt;/p>
&lt;blockquote>
&lt;p>这里内核缓存区到外存，要通过页表，到物理内存，在通过DMA写入外存。&lt;/p>&lt;/blockquote>
&lt;p>管道不同于上面的形式，&lt;strong>它是一种内存级别的文件，本质就是内核里面的一串缓存&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338.png"
width="676"
height="481"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338_hu_f3a6e333b57a7ac2.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410161310338_hu_3ae4f80a2b888aab.png 1024w"
loading="lazy"
alt="image-20250410161310338"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;h2 id="共享内存">共享内存
&lt;/h2>&lt;p>听名字就懂了，具体原理：拿出一块虚拟地址空间来，映射到相同的物理内存中。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482.png"
width="551"
height="551"
srcset="https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482_hu_4ab6cbca5c590b6c.png 480w, https://sfw003.github.io/p/linux-process-communication/image/image-20250410163312482_hu_1186a27661ddb0d5.png 1024w"
loading="lazy"
alt="image-20250410163312482"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h2 id="套接字socket">套接字（socket）
&lt;/h2></description></item><item><title>Linux 网络命令</title><link>https://sfw003.github.io/p/linux-network-command/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-network-command/</guid><description>&lt;p>相关文章链接&lt;/p>
&lt;p>&lt;a class="link" href="https://sfw003.github.io/p/linux-file-command/" >Linux 文件操作命令&lt;/a>
Linux 网络命令 &amp;lt;== 本文&lt;/p>
&lt;p>网络操作命令：ifconfig、ip、ping、netstat、telnet、ftp、route、rlogin、rcp、finger、mail、 nslookup；&lt;/p>
&lt;h2 id="ifconfig">ifconfig
&lt;/h2>&lt;p>ifconfig用于查看和更改网络接口的地址和参数，包括IP地址、网络掩码、广播地址，使用权限是超级用户。&lt;/p>
&lt;p>命令参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ifconfig -interface [options] address
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">主要参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-interface：指定的网络接口名，如eth0和eth1。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">up：激活指定的网络接口卡。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">down：关闭指定的网络接口。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">broadcast address：设置接口的广播地址。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pointopoint：启用点对点方式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">address：设置指定接口设备的IP地址。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">netmask address：设置接口的子网掩码。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ifconfig是用来设置和配置网卡的命令行工具。&lt;/p>
&lt;p>为了手工配置网络，这是一个必须掌握的命令。&lt;/p>
&lt;p>使用该命令的好处是无须重新启动机器。&lt;/p>
&lt;p>要赋给eth0接口IP地址207.164.186.2，并且马上激活它，使用下面命令：
&lt;code>#fconfig eth0 210.34.6.89 netmask 255.255.255.128 broadcast 210.34.6.127&lt;/code>&lt;/p>
&lt;p>该命令的作用是设置网卡eth0的IP地址、网络掩码和网络的本地广播地址。&lt;/p>
&lt;p>若运行不带任何参数的ifconfig命令，这个命令将显示机器所有激活接口的信息。&lt;/p>
&lt;p>带有“-a”参数的命令则显示所有接口的信息，包括没有激活的接口。&lt;/p>
&lt;p>注意，用ifconfig命令配置的网络设备参数，机器重新启动以后将会丢失。&lt;/p>
&lt;p>如果要暂停某个网络接口的工作，可以使用down参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># ifconfig eth0 down
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ip">ip
&lt;/h2>&lt;p>ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具，例如ifconfig、route等，使用权限为超级用户。&lt;/p>
&lt;p>几乎所有的Linux发行版本都支持该命令。&lt;/p>
&lt;p>ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]]
主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">OPTIONS是修改ip行为或改变其输出的选项。所有的选项都是以-字符开头，分为长、短两种形式。目前，ip支持如表1所示选项。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OBJECT是要管理者获取信息的对象。目前ip认识的对象见表2所示。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">表1 ip支持的选项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-V,-Version 打印ip的版本并退出。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s,-stats,-statistics 输出更为详尽的信息。如果这个选项出现两次或多次，则输出的信息将更为详尽。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f,-family 这个选项后面接协议种类，包括inet、inet6或link，强调使用的协议种类。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">如果没有足够的信息告诉ip使用的协议种类，ip就会使用默认值inet或any。link比较特殊，它表示不涉及任何网络协议。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-4是-family inet的简写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-6 是-family inet6的简写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-0 是-family link的简写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-o,-oneline 对每行记录都使用单行输出，回行用字符代替。如果需要使用wc、grep等工具处理ip的输出，则会用到这个选项。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r,-resolve 查询域名解析系统，用获得的主机名代替主机IP地址
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应用实例&lt;/p>
&lt;p>添加IP地址192.168.2.2/24到eth0网卡上：
&lt;code>#ip addr add 192.168.1.1/24 dev eth0&lt;/code>
丢弃源地址属于192.168.2.0/24网络的所有数据报：
&lt;code>#ip rule add from 192.168.2.0/24 prio 32777 reject&lt;/code>&lt;/p>
&lt;h2 id="ping">ping
&lt;/h2>&lt;p>ping检测主机网络接口状态，使用权限是所有用户。&lt;/p>
&lt;p>主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ping [选项] 目标IP/域名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-d：使用Socket的SO_DEBUG功能。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c：设置完成要求回应的次数。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f：极限检测。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i：指定收发信息的间隔秒数。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-I：网络界面使用指定的网络界面送出数据包。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l：前置载入，设置在送出要求信息之前，先行发出的数据包。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n：只输出数值。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p：设置填满数据包的范本样式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-q：不显示指令执行过程，开头和结尾的相关信息除外。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r：忽略普通的Routing Table，直接将数据包送到远端主机上。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R：记录路由过程。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s：设置数据包的大小。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t：设置存活数值TTL的大小。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v：详细显示指令的执行过程。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ping命令是使用最多的网络指令，通常我们使用它检测网络是否连通，它使用ICMP协议。&lt;/p>
&lt;p>但是有时会有这样的情况，我们可以浏览器查看一个网页，但是却无法ping通，这是因为一些网站处于安全考虑安装了防火墙。&lt;/p>
&lt;p>另外，也可以在自己计算机上试一试，通过下面的方法使系统对ping没有反应：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># echo 1 &amp;gt; /proc/sys/net/ipv4/icmp_echo_ignore_all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="netstat">netstat
&lt;/h2>&lt;p>检查整个Linux网络状态。&lt;/p>
&lt;p>命令参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-a--all：显示所有连线中的Socket。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-A：列出该网络类型连线中的IP相关地址和网络类型。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c--continuous：持续列出网络状态。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-C--cache：显示路由器配置的快取信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-e--extend：显示网络其它相关信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-F--fib：显示FIB。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g--groups：显示多重广播功能群组组员名单。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-h--help：在线帮助。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i--interfaces：显示网络界面信息表单。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l--listening：显示监控中的服务器的Socket。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-M--masquerade：显示伪装的网络连线。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n--numeric：直接使用IP地址，而不通过域名服务器。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-N--netlink--symbolic：显示网络硬件外围设备的符号连接名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-o--timers：显示计时器。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p--programs：显示正在使用Socket的程序识别码和程序名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--route：显示Routing Table。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s--statistice：显示网络工作信息统计表。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t--tcp：显示TCP传输协议的连线状况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u--udp：显示UDP传输协议的连线状况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v--verbose：显示指令执行过程。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-V--version：显示版本信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-w--raw：显示RAW传输协议的连线状况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x--unix：和指定“-A unix”参数相同。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--ip--inet：和指定“-A inet”参数相同。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应用实例&lt;/p>
&lt;p>netstat
主要用于Linux察看自身的网络状况，如开启的端口、在为哪些用户服务，以及服务的状态等。此外，它还显示系统路由表、网络接口状态等。&lt;/p>
&lt;p>可以说，它是一个综合性的网络状态的察看工具。&lt;/p>
&lt;p>在默认情况下，netstat只显示已建立连接的端口。&lt;/p>
&lt;p>如果要显示处于监听状态的所有端口，使用-a参数即可：
#netstat -a
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address Foreign Address State
tcp 0 0 *:32768 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:32769 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:nfs &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:32770 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:868 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:617 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:mysql &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:netbios-ssn &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:sunrpc &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:10000 &lt;em>:&lt;/em> LISTEN
tcp 0 0 *:http &lt;em>:&lt;/em> LISTEN
&amp;hellip;&amp;hellip;
上面显示出，这台主机同时提供HTTP、FTP、NFS、MySQL等服务。&lt;/p>
&lt;h2 id="telnet">telnet
&lt;/h2>&lt;p>telnet表示开启终端机阶段作业，并登入远端主机。telnet是一个Linux命令，同时也是一个协议（远程登陆协议）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">telnet [option] [主机名称IP地址]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-8：允许使用8位字符资料，包括输入与输出。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a：尝试自动登入远端系统。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-b：使用别名指定远端主机名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c：不读取用户专属目录里的.telnetrc文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-d：启动排错模式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-e：设置脱离字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-E：滤除脱离字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f：此参数的效果和指定“-F”参数相同。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-K：不自动登入远端主机。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l：指定要登入远端主机的用户名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-L：允许输出8位字符资料。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n：指定文件记录相关信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r：使用类似rlogin指令的用户界面。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-S：服务类型，设置telnet连线所需的IP TOS信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x：假设主机有支持数据加密的功能，就使用它。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-X：关闭指定的认证形态。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用户使用telnet命令可以进行远程登录，并在远程计算机之间进行通信。&lt;/p>
&lt;p>用户通过网络在远程计算机上登录，就像登录到本地机上执行命令一样。&lt;/p>
&lt;p>为了通过telnet登录到远程计算机上，必须知道远程机上的合法用户名和口令。&lt;/p>
&lt;p>虽然有些系统确实为远程用户提供登录功能，但出于对安全的考虑，要限制来宾的操作权限，因此，这种情况下能使用的功能是很少的。&lt;/p>
&lt;p>telnet只为普通终端提供终端仿真，而不支持X-Window等图形环境。&lt;/p>
&lt;p>当允许远程用户登录时，系统通常把这些用户放在一个受限制的Shell中，以防系统被怀有恶意的或不小心的用户破坏。&lt;/p>
&lt;p>用户还可以使用telnet从远程站点登录到自己的计算机上，检查电子邮件、编辑文件和运行程序，就像在本地登录一样。&lt;/p>
&lt;h2 id="ftp">ftp
&lt;/h2>&lt;p>ftp命令进行远程文件传输。FTP是ARPANet的标准文件传输协议，该网络就是现今Internet的前身，所以ftp既是协议又是一个命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ftp [-dignv] [主机名称IP地址]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-d：详细显示指令执行过程，便于排错分析程序执行的情形。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i：关闭互动模式，不询问任何问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g：关闭本地主机文件名称支持特殊字符的扩充特性。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n：不使用自动登陆。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v：显示指令执行过程。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="应用说明">应用说明
&lt;/h3>&lt;p>ftp命令是标准的文件传输协议的用户接口，是在TCP/IP网络计算机之间传输文件简单有效的方法，它允许用户传输ASCⅡ文件和二进制文件。&lt;/p>
&lt;p>为了使用ftp来传输文件，用户必须知道远程计算机上的合法用户名和口令。&lt;/p>
&lt;p>这个用户名/口令的组合用来确认ftp会话，并用来确定用户对要传输的文件进行什么样的访问。
另外，用户需要知道对其进行ftp会话的计算机名字的IP地址。
用户可以通过使用ftp客户程序，连接到另一台计算机上；&lt;/p>
&lt;p>可以在目录中上下移动、列出目录内容；&lt;/p>
&lt;p>可以把文件从远程计算机机拷贝到本地机上；&lt;/p>
&lt;p>还可以把文件从本地机传输到远程系统中。&lt;/p>
&lt;p>ftp内部命令有72个，下面列出主要几个内部命令：&lt;/p>
&lt;p>ls：列出远程机的当前目录。
cd：在远程机上改变工作目录。
lcd：在本地机上改变工作目录。
close：终止当前的ftp会话。
hash：每次传输完数据缓冲区中的数据后就显示一个#号。
get（mget）：从远程机传送指定文件到本地机。
put（mput）：从本地机传送指定文件到远程机。
quit：断开与远程机的连接，并退出ftp。&lt;/p>
&lt;p>##route&lt;/p>
&lt;h3 id="作用">作用
&lt;/h3>&lt;p>route表示手工产生、修改和查看路由表。&lt;/p>
&lt;h3 id="格式">格式
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#route [-add][-net|-host] targetaddress [-netmask Nm][dev]If]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#route [－delete][-net|-host] targetaddress [gw Gw][-netmask Nm] [dev]If]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要参数
-add：增加路由。
-delete：删除路由。
-net：路由到达的是一个网络，而不是一台主机。
-host：路由到达的是一台主机。
-netmask Nm：指定路由的子网掩码。
gw：指定路由的网关。
[dev]If：强迫路由链指定接口。&lt;/p>
&lt;h3 id="应用实例">应用实例
&lt;/h3>&lt;p>route命令是用来查看和设置Linux系统的路由信息，以实现与其它网络的通信。&lt;/p>
&lt;p>要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。
在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。&lt;/p>
&lt;p>使用下面命令可以增加一个默认路由：
route add 0.0.0.0 192.168.1.1&lt;/p>
&lt;h2 id="rlogin">rlogin
&lt;/h2>&lt;h3 id="作用-1">作用
&lt;/h3>&lt;p>rlogin用来进行远程注册。&lt;/p>
&lt;h3 id="格式-1">格式
&lt;/h3>&lt;p>rlogin [ -8EKLdx ] [ -e char ] [-k realm ] [ - l username ] host
主要参数
-8：此选项始终允许8位输入数据通道。该选项允许发送格式化的ANSI字符和其它的特殊代码。如果不用这个选项，除非远端的不是终止和启动字符，否则就去掉奇偶校验位。
-E：停止把任何字符当作转义字符。当和-8选项一起使用时，它提供一个完全的透明连接。
-K：关闭所有的Kerberos确认。只有与使用Kerberos确认协议的主机连接时才使用这个选项。
-L：允许rlogin会话在litout模式中运行。要了解更多信息，请查阅tty联机帮助。
-d：打开与远程主机进行通信的TCP sockets的socket调试。要了解更多信息，请查阅setsockopt的联机帮助。
-e：为rlogin会话设置转义字符，默认的转义字符是“～”。
-k：请求rlogin获得在指定区域内远程主机的Kerberos许可，而不是获得由krb_realmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。
-x：为所有通过rlogin会话传送的数据打开DES加密。这会影响响应时间和CPU利用率，但是可以提高安全性。&lt;/p>
&lt;h3 id="使用说明">使用说明
&lt;/h3>&lt;p>如果在网络中的不同系统上都有账号，或者可以访问别人在另一个系统上的账号，那么要访问别的系统中的账号，首先就要注册到系统中，接着通过网络远程注册到账号所在的系统中。&lt;/p>
&lt;p>rlogin可以远程注册到别的系统中，它的参数应是一个系统名。&lt;/p>
&lt;h2 id="rcp">rcp
&lt;/h2>&lt;h3 id="作用-2">作用
&lt;/h3>&lt;p>rcp代表远程文件拷贝，用于计算机之间文件拷贝，使用权限是所有用户。&lt;/p>
&lt;h3 id="格式-2">格式
&lt;/h3>&lt;p>rcp [-px] [-k realm] file1 file2 rcp [-px] [-r] [-k realm] file
主要参数
-r：递归地把源目录中的所有内容拷贝到目的目录中。要使用这个选项，目的必须是一个目录。
-p：试图保留源文件的修改时间和模式，忽略umask。
-k：请求rcp获得在指定区域内的远程主机的Kerberos许可，而不是获得由krb_relmofhost(3)确定的远程主机区域内的远程主机的Kerberos许可。
-x：为传送的所有数据打开DES加密。&lt;/p>
&lt;h2 id="finger">finger
&lt;/h2>&lt;h3 id="作用-3">作用
&lt;/h3>&lt;p>finger用来查询一台主机上的登录账号的信息，通常会显示用户名、主目录、停滞时间、登录时间、登录Shell等信息，使用权限为所有用户。&lt;/p>
&lt;h3 id="格式-3">格式
&lt;/h3>&lt;p>finger [选项] [使用者] [用户@主机]
主要参数
-s：显示用户注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息。
-l：除了用-s选项显示的信息外，还显示用户主目录、登录Shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。
-p：除了不显示.plan文件和.project文件以外，与-l选项相同。&lt;/p>
&lt;h3 id="应用实例-1">应用实例
&lt;/h3>&lt;p>在计算机上使用finger：
[root@localhost root]# Finger
Login Name Tty Idle Login Time Office Office Phone
root root tty1 2 Dec 15 11
root root pts/0 1 Dec 15 11&lt;/p>
&lt;p>root root *pts/1 Dec 15 11&lt;/p>
&lt;h3 id="应用说明-1">应用说明
&lt;/h3>&lt;p>如果要查询远程机上的用户信息，需要在用户名后面接“@主机名”，采用[用户名@主机名]的格式，不过要查询的网络主机需要运行finger守护进程的支持。&lt;/p>
&lt;h2 id="mail">mail
&lt;/h2>&lt;h3 id="作用-4">作用
&lt;/h3>&lt;p>mail作用是发送电子邮件，使用权限是所有用户。此外，mail还是一个电子邮件程序。&lt;/p>
&lt;h3 id="格式-4">格式
&lt;/h3>&lt;p>mail [-s subject] [-c address] [-b address]
mail -f [mailbox]mail [-u user]
主要参数
-b address：表示输出信息的匿名收信人地址清单。
-c address：表示输出信息的抄送（）收信人地址清单。
-f [mailbox]：从收件箱者指定邮箱读取邮件。
-s subject：指定输出信息的主体行。
[-u user]：端口指定优化的收件箱读取邮件。&lt;/p>
&lt;h2 id="nslookup">nslookup
&lt;/h2>&lt;h3 id="作用-5">作用
&lt;/h3>&lt;p>nslookup命令的功能是查询一台机器的IP地址和其对应的域名。使用权限所有用户。&lt;/p>
&lt;p>它通常需要一台域名服务器来提供域名服务。如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的IP地址对应的域名。&lt;/p>
&lt;h3 id="格式-5">格式
&lt;/h3>&lt;p>nslookup［IP地址/域名］&lt;/p>
&lt;h3 id="应用实例-2">应用实例
&lt;/h3>&lt;p>（1）在本地计算机上使用nslookup命令
$ nslookup
Default Server: &lt;a class="link" href="http://name.cao.com.cn/" target="_blank" rel="noopener"
>name.cao.com.cn&lt;/a>
Address: 192.168.1.9&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;p>在符号“&amp;gt;”后面输入要查询的IP地址域名，并回车即可。如果要退出该命令，输入“exit”，并回车即可。
（2）使用nslookup命令测试named
输入下面命令：
nslookup
然后就进入交换式nslookup环境。&lt;/p>
&lt;p>如果named正常启动，则nslookup会显示当前DNS服务器的地址和域名，否则表示named没能正常启动。
下面简单介绍一些基本的DNS诊断。
◆检查正向DNS解析，在nslookup提示符下输入带域名的主机名，&lt;a class="link" href="http://xn--hp712-gv5i.my.com/" target="_blank" rel="noopener"
>如hp712.my.com&lt;/a>，nslookup应能显示该主机名对应的IP地址。&lt;/p>
&lt;p>如果只输入hp712，nslookup会根据/etc/resolv.conf的定义，自动添加my.com域名，并回答对应的IP地址。&lt;/p>
&lt;p>◆检查反向DNS解析，在nslookup提示符下输入某个IP地址，如192.22.33.20，nslookup应能回答该IP地址所对应的主机名。&lt;/p>
&lt;p>◆检查MX邮件地址记录在nslookup提示符下输入：
set q=mx
然后输入某个域名，&lt;a class="link" href="http://xn--my-cz4c617u.xn--commail-bs4l.my.com/" target="_blank" rel="noopener"
>输入my.com和mail.my.com&lt;/a>，nslookup应能够回答对应的邮件服务器地址，&lt;a class="link" href="http://xn--support-zx2l.my.xn--comsupport2-904s.my.com/" target="_blank" rel="noopener"
>即support.my.com和support2.my.com&lt;/a>。&lt;/p></description></item><item><title>Linux 文件操作命令</title><link>https://sfw003.github.io/p/linux-file-command/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-file-command/</guid><description>&lt;p>相关文章链接&lt;/p>
&lt;p>Linux 文件操作命令&amp;lt;== 本文
&lt;a class="link" href="https://sfw003.github.io/p/linux-network-command/" >Linux 网络命令&lt;/a>&lt;/p>
&lt;h2 id="more">more
&lt;/h2>&lt;p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+n 从笫 n 行开始显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n 定义屏幕大小为n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c 从顶部清屏，然后显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 忽略Ctrl+l（换页）字符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 把连续的多个空行显示为一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 把文件内容中的下画线去掉
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>操作命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Enter 向下 n 行，需要定义。默认为 1 行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ctrl+F 向下滚动一屏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">空格键 向下滚动一屏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ctrl+B 返回上一屏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">= 输出当前行的行号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:f 输出文件名和当前行的行号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">V 调用vi编辑器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!命令 调用Shell，并执行命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">q 退出more
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示文件中从第3行起的内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">more +3 text.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ls -l | more -5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>按空格显示下 5 行。&lt;/p>
&lt;h2 id="less">less
&lt;/h2>&lt;p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-i 忽略搜索时的大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-N 显示每行的行号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-o &amp;lt;文件名&amp;gt; 将less 输出的内容在指定文件中保存起来
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 显示连续空行为一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/字符串：向下搜索“字符串”的功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">?字符串：向上搜索“字符串”的功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n：重复前一个搜索（与 / 或 ? 有关）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">N：反向重复前一个搜索（与 / 或 ? 有关）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x &amp;lt;数字&amp;gt; 将“tab”键显示为规定的数字空格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">b 向后翻一页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">d 向后翻半页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">h 显示帮助界面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Q 退出less 命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">u 向前滚动半页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">y 向前滚动一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">空格键 滚动一行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">回车键 滚动一页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[pagedown]： 向下翻动一页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[pageup]： 向上翻动一页
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）ps 查看进程信息并通过 less 分页显示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -aux | less -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查看多个文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">less 1.log 2.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以使用 n 查看下一个，使用 p 查看前一个。&lt;/p>
&lt;h2 id="head-命令">head 命令
&lt;/h2>&lt;p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-n&amp;lt;行数&amp;gt; 显示的行数（行数为复数表示从最后向前数）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示 1.log 文件中前 20 行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">head 1.log -n 20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）显示 1.log 文件前 20 字节&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">head -c 20 log2014.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）显示 t.log最后 10 行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">head -n -10 t.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="tail-命令">tail 命令
&lt;/h2>&lt;p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-f 循环读取（常用于查看递增的日志文件）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n&amp;lt;行数&amp;gt; 显示行数（从后向前）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（1）循环读取逐渐增加的文件内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ping 127.0.0.1 &amp;gt; ping.log &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tail -f ping.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（查看日志）&lt;/p>
&lt;h2 id="which-命令">which 命令
&lt;/h2>&lt;p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which 查看可执行文件的位置。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">whereis 查看文件的位置。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locate 配合数据库查看文件位置。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">find 实际搜寻硬盘查询文件名称。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查看 ls 命令是否存在，执行哪个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查看 which&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which which
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查看 cd&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看当前 PATH 配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">echo $PATH
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或使用 env 查看所有环境变量及对应值&lt;/p>
&lt;h2 id="whereis-命令">whereis 命令
&lt;/h2>&lt;p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-b 定位可执行文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 定位帮助文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 定位源代码文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找 locate 程序相关文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">whereis locate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查找 locate 的源码文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">whereis -s locate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查找 lcoate 的帮助文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">whereis -m locate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="locate-命令">locate 命令
&lt;/h2>&lt;p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。&lt;/p>
&lt;p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-l num（要显示的行数）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f 将特定的档案系统排除在外，如将proc排除在外
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r 使用正则运算式做为寻找条件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">locate pwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）搜索 etc 目录下所有以 sh 开头的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">locate /etc/sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查找 /var 目录下，以 reason 结尾的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">locate&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="s1">&amp;#39;^/var.*reason$&amp;#39;&lt;/span>&lt;span class="err">（其中&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="err">表示一个字符，&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="err">表示任务多个；&lt;/span>&lt;span class="o">.*&lt;/span>&lt;span class="err">表示任意多个字符）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="chmod-命令">chmod 命令
&lt;/h2>&lt;p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。&lt;/p>
&lt;p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。&lt;/p>
&lt;p>以文件 log2012.log 为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。&lt;/p>
&lt;p>常用参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 当发生改变时，报告处理信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R 处理指定目录以及其子目录下所有文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>权限范围：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">u ：目录或者文件的当前的用户
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">g ：目录或者文件的当前的群组
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">o ：除了目录或者文件的当前用户或群组之外的用户或者群组
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a ：所有的用户及群组
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>权限代号：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">r ：读权限，用数字4表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">w ：写权限，用数字2表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x ：执行权限，用数字1表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- ：删除权限，用数字0表示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s ：特殊权限
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实例：&lt;/p>
&lt;p>（1）增加文件 t.log 所有用户可执行权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod a+x t.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod u=r t.log -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）将 test 目录及其子目录所有文件添加可读权限&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chmod u+r,g+r,o+r -R text/ -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>19、tar 命令&lt;/p>
&lt;p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。&lt;/p>
&lt;p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 建立新的压缩文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f 指定压缩文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r 添加文件到已经压缩文件包中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 添加改了和现有的文件到压缩包中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-x 从压缩包中抽取文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t 显示压缩文件中的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-z 支持gzip压缩
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-j 支持bzip2压缩
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-Z 支持compress解压文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v 显示操作过程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有关 gzip 及 bzip2 压缩:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gzip 实例：压缩 gzip fileName .tar.gz 和.tgz 解压：gunzip filename.gz 或 gzip -d filename.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 对应：tar zcvf filename.tar.gz tar zxvf filename.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 对应：tar jcvf filename.tar.gz 解压：tar jxvf filename.tar.bz2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）将文件全部打包成 tar 包&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar -cvf log.tar 1.log,2.log 或tar -cvf log.*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar -zcvf /tmp/etc.tar.gz /etc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar -ztvf /tmp/etc.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="chown-命令">chown 命令
&lt;/h2>&lt;p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 显示更改的部分的信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R 处理指定目录及子目录
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）改变拥有者和群组 并显示改变信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chown -c mail:mail log2012.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）改变文件群组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chown -c :mail t.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）改变文件夹及子文件目录属主及属组为 mail&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">chown -cR mail: test/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="df-命令">df 命令
&lt;/h2>&lt;p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-a 全部文件系统列表
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-h 以方便阅读的方式显示信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i 显示inode信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k 区块为1024字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 只显示本地磁盘
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-T 列出文件系统类型
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示磁盘使用情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">df -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）以易读方式列出所有文件系统及其类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">df -haT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="du-命令">du 命令
&lt;/h2>&lt;p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du [选项] [文件]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-a 显示目录中所有文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k 以KB为单位显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 以MB为单位显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g 以GB为单位显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-h 以易读方式显示文件大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 仅显示总计
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）以易读方式显示文件夹内及子文件夹大小&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -h scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）以易读方式显示文件夹内所有文件大小&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -ah scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -hc test/ scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）输出当前目录下各个子目录所使用的空间&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">du -hc --max-depth=1 scf/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="24date-命令">24、date 命令
&lt;/h3>&lt;p>显示或设定系统的日期与时间。&lt;/p>
&lt;p>命令参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-d&amp;lt;字符串&amp;gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s&amp;lt;字符串&amp;gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 　显示GMT。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%H 小时(00-23)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%I 小时(00-12)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%M 分钟(以00-59来表示)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%S 秒(以本地的惯用法来表示)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%a 星期的缩写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%A 星期的完整名称。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%d 日期(以01-31来表示)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%D 日期(含年月日)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%m 月份(以01-12来表示)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%y 年份(以00-99来表示)。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%Y 年份(以四位数来表示)。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示下一天&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">date +%Y%m%d --date=&amp;#34;+1 day&amp;#34; //显示下一天的日期
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）-d参数使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">date -d &amp;#34;nov 22&amp;#34; 今年的 11 月 22 日是星期三
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d &amp;#39;2 weeks&amp;#39; 2周后的日期
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d &amp;#39;next monday&amp;#39; (下周一的日期)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d last-month +%Y%m(上个月是几月)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date -d next-month +%Y%m(下个月是几月)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="25cal-命令">25、cal 命令
&lt;/h3>&lt;p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：&lt;/p>
&lt;p>常用参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-3 显示前一月，当前月，后一月三个月的日历
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 显示星期一为第一列
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-j 显示在当前年第几天
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-y [year]显示当前年[year]份的日历
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示指定年月日期&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cal 9 2012
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）显示2013年每个月日历&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cal -y 2013
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）将星期一做为第一列,显示前中后三月&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cal -3m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="grep-命令">grep 命令
&lt;/h2>&lt;p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。&lt;/p>
&lt;p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep [option] pattern file|dir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>常用参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-A n --after-context显示匹配字符后n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-B n --before-context显示匹配字符前n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-C n --context 显示匹配字符前后n行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c --count 计算符合样式的列数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i 忽略大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 只列出文件内容符合指定的样式的文件名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f 从文件中读取关键词
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n 显示匹配内容的所在文件中行数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-R 递归查找文件夹
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>grep 的规则表达式:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">^ #锚定行的开始 如：&amp;#39;^grep&amp;#39;匹配所有以grep开头的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ #锚定行的结束 如：&amp;#39;grep$&amp;#39;匹配所有以grep结尾的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">. #匹配一个非换行符的字符 如：&amp;#39;gr.p&amp;#39;匹配gr后接一个任意字符，然后是p。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* #匹配零个或多个先前字符 如：&amp;#39;*grep&amp;#39;匹配所有一个或多个空格后紧跟grep的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.* #一起用代表任意字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[] #匹配一个指定范围内的字符，如&amp;#39;[Gg]rep&amp;#39;匹配Grep和grep。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[^] #匹配一个不在指定范围内的字符，如：&amp;#39;[^A-FH-Z]rep&amp;#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\(..\) #标记匹配字符，如&amp;#39;\(love\)&amp;#39;，love被标记为1。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\&amp;lt; #锚定单词的开始，如:&amp;#39;\&amp;lt;grep&amp;#39;匹配包含以grep开头的单词的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\&amp;gt; #锚定单词的结束，如&amp;#39;grep\&amp;gt;&amp;#39;匹配包含以grep结尾的单词的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x\{m\} #重复字符x，m次，如：&amp;#39;0\{5\}&amp;#39;匹配包含5个o的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x\{m,\} #重复字符x,至少m次，如：&amp;#39;o\{5,\}&amp;#39;匹配至少有5个o的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x\{m,n\} #重复字符x，至少m次，不多于n次，如：&amp;#39;o\{5,10\}&amp;#39;匹配5--10个o的行。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\w #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&amp;#39;G\w*p&amp;#39;匹配以G后跟零个或多个文字或数字字符，然后是p。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\W #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">\b #单词锁定符，如: &amp;#39;\bgrep\b&amp;#39;只匹配grep。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找指定进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -ef | grep svn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）查找指定进程个数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -ef | grep svn -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）从文件中读取关键词&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cat test1.txt | grep -f key.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）从文件夹中递归查找以grep开头的行，并只列出文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep -lR &amp;#39;^grep&amp;#39; /tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（5）查找非x开关的行内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep &amp;#39;^[^x]&amp;#39; test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（6）显示包含 ed 或者 at 字符的内容行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grep -E &amp;#39;ed|at&amp;#39; test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="27wc-命令">27、wc 命令
&lt;/h3>&lt;p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wc [option] file..
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>命令参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 统计字节数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-l 统计行数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 统计字符数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找文件的 行数 单词数 字节数 文件名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wc text.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">7 8 70 test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）统计输出结果的行数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cat test.txt | wc -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ps-命令">ps 命令
&lt;/h2>&lt;p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top&lt;/p>
&lt;p>linux上进程有5种状态:&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>运行(正在运行或在运行队列中等待)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="5">
&lt;li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>ps 工具标识进程的5种状态码:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">D 不可中断 uninterruptible sleep (usually IO)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">R 运行 runnable (on run queue)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">S 中断 sleeping
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">T 停止 traced or stopped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Z 僵死 a defunct (”zombie”) process
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>命令参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-A 显示所有进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a 显示所有进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a 显示同一终端下所有进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">c 显示进程真实名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">e 显示环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f 显示进程间的关系
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">r 显示当前终端运行的进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-aux 显示所有包含其它使用的进程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示当前所有进程环境变量及进程间关系&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -ef
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）显示当前所有进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）与grep联用查找某进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps -aux | grep apache
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ps aux | grep &amp;#39;(cron|syslog)&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>29、top 命令&lt;/p>
&lt;p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-c 显示完整的进程命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 保密模式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p &amp;lt;进程号&amp;gt; 指定进程显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n &amp;lt;次数&amp;gt;循环显示次数
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实例：&lt;/p>
&lt;p>&lt;strong>（1）&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">top&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">06&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">23&lt;/span> &lt;span class="n">up&lt;/span> &lt;span class="mi">70&lt;/span> &lt;span class="n">days&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">44&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">load&lt;/span> &lt;span class="n">average&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.32&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.35&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Tasks&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">206&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">running&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">205&lt;/span> &lt;span class="n">sleeping&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">stopped&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">zombie&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Cpu&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="mf">5.9&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.4&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">sy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">ni&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">90.4&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">wa&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">hi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.2&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">si&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">st&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Mem&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">32949016&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14411180&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">used&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18537836&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">free&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">169884&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">buffers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Swap&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">32764556&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">used&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32764556&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">free&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3612636&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="n">cached&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">PID&lt;/span> &lt;span class="n">USER&lt;/span> &lt;span class="n">PR&lt;/span> &lt;span class="n">NI&lt;/span> &lt;span class="n">VIRT&lt;/span> &lt;span class="n">RES&lt;/span> &lt;span class="n">SHR&lt;/span> &lt;span class="n">S&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">CPU&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">MEM&lt;/span> &lt;span class="n">TIME&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="n">COMMAND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">28894&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="mi">22&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">1501&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="mi">405&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="n">S&lt;/span> &lt;span class="mf">52.2&lt;/span> &lt;span class="mf">1.3&lt;/span> &lt;span class="mi">2534&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="n">java&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前五行是当前系统情况整体的统计信息区。&lt;/p>
&lt;p>&lt;strong>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：&lt;/strong>&lt;/p>
&lt;p>14:06:23 — 当前系统时间&lt;/p>
&lt;p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）&lt;/p>
&lt;p>2 users — 当前有2个用户登录系统&lt;/p>
&lt;p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。&lt;/p>
&lt;p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。&lt;/p>
&lt;p>&lt;strong>第二行，Tasks — 任务（进程），具体信息说明如下：&lt;/strong>&lt;/p>
&lt;p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。&lt;/p>
&lt;p>&lt;strong>第三行，cpu状态信息，具体属性说明如下：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">5.9%us — 用户空间占用CPU的百分比。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.4% sy — 内核空间占用CPU的百分比。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.0% ni — 改变过优先级的进程占用CPU的百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">90.4% id — 空闲CPU百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.0% wa — IO等待占用CPU的百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0.2% si — 软中断（Software Interrupts）占用CPU的百分比
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>**备注：**在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！&lt;/p>
&lt;p>第四行，内存状态，具体信息如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">32949016k total — 物理内存总量（32GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14411180k used — 使用中的内存总量（14GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18537836k free — 空闲内存总量（18GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">169884k buffers — 缓存的内存量 （169M）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>第五行，swap交换分区信息，具体信息说明如下：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">32764556k total — 交换区总量（32GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0k used — 使用的交换区总量（0K）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">32764556k free — 空闲交换区总量（32GB）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3612636k cached — 缓冲的交换区总量（3.6GB）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>第六行，空行。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">PID — 进程id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER — 进程所有者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PR — 进程优先级
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NI — nice值。负值表示高优先级，正值表示低优先级
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SHR — 共享内存大小，单位kb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%CPU — 上次更新到现在的CPU时间占用百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%MEM — 进程使用的物理内存百分比
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TIME+ — 进程使用的CPU时间总计，单位1/100秒
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COMMAND — 进程名称（命令名/命令行）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>top 交互命令&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">h 显示top交互命令帮助信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">c 切换显示命令名称和完整命令行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">m 以内存使用率排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">P 根据CPU使用百分比大小进行排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">T 根据时间/累计时间进行排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">W 将当前设置写入~/.toprc文件中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">o或者O 改变显示项目的顺序
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="30kill-命令">30、kill 命令
&lt;/h3>&lt;p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用&amp;quot;-KILL&amp;quot; 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。&lt;/p>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a 当处理当前进程时，不限制命令名和进程号的对应关系
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 指定kill 命令只打印相关进程的进程号，而不发送任何信号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 指定发送信号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-u 指定用户
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）先使用ps查找进程pro1，然后用kill杀掉&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kill -9 $(ps -ef | grep pro1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="31free-命令">31、free 命令
&lt;/h3>&lt;p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。&lt;/p>
&lt;p>&lt;strong>命令参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-b 以Byte显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-k 以kb为单位显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-m 以mb为单位显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-g 以gb为单位显示内存使用情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s&amp;lt;间隔秒数&amp;gt; 持续显示内存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-t 显示内存使用总合
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）显示内存使用情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">free
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">free -k
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">free -m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）以总和的形式显示内存的使用信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">free -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）周期性查询内存使用情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">free -s 10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="文件处理命令">文件处理命令
&lt;/h1>&lt;p>文件处理命令：file、mkdir、grep、dd、find、mv、ls、diff、cat、ln；&lt;/p>
&lt;h2 id="find-命令">find 命令
&lt;/h2>&lt;p>用于在文件树中查找文件，并作出相应的处理。&lt;/p>
&lt;p>命令格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find pathname -options [-print -exec -ok ...]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>命令参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-print： find命令将匹配的文件输出到标准输出。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&amp;#39;command&amp;#39; { } \;，注意{ }和\；之间的空格。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>命令选项：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-name 按照文件名查找文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-perm 按文件权限查找文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-user 按文件属主查找文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-group 按照文件所属的组来查找文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-type 查找某一类型的文件，诸如：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> b - 块设备文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d - 目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c - 字符设备文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l - 符号链接文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> p - 管道文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> f - 普通文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-amin n 查找系统中最后N分钟访问的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-atime n 查找系统中最后n*24小时访问的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-cmin n 查找系统中最后N分钟被改变文件状态的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-ctime n 查找系统中最后n*24小时被改变文件状态的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-mmin n 查找系统中最后N分钟被改变文件数据的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-mtime n 查找系统中最后n*24小时被改变文件数据的文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-maxdepth n 最大查找目录深度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）查找 48 小时内修改过的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -atime -2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）在当前目录查找 以 .log 结尾的文件。 &lt;strong>.&lt;/strong> 代表当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find ./ -name &amp;#39;*.log&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）查找 /opt 目录下 权限为 777 的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find /opt -perm 777
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（4）查找大于 1K 的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -size +1000c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查找等于 1000 字符的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -size 1000c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。&lt;/p>
&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -type f -mtime +10 -exec rm -f {} \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#39;*.log&amp;#39; mtime +5 -ok -exec rm {} \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（7）当前目录下查找文件名以 passwd 开头，内容包含 &amp;ldquo;pkg&amp;rdquo; 字符的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -f -name &amp;#39;passwd*&amp;#39; -exec grep &amp;#34;pkg&amp;#34; {} \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（8）用 exec 选项执行 cp 命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#39;*.log&amp;#39; -exec cp {} test3 \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。&lt;/p>
&lt;p>实例：&lt;/p>
&lt;p>（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -type f -print | xargs file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（10）查找当前目录下所有以 js 结尾的并且其中包含 &amp;rsquo;editor&amp;rsquo; 字符的普通文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -type f -name &amp;#34;*.js&amp;#34; -exec grep -lF &amp;#39;ueditor&amp;#39; {} \;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">find -type f -name &amp;#39;*.js&amp;#39; | xargs grep -lF &amp;#39;editor&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（11）利用 xargs 执行 mv 命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#34;*.log&amp;#34; | xargs -i mv {} test4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name \*(转义） -type f -print | xargs grep -n &amp;#39;hostnames&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find . -name &amp;#39;[a-z]*[4-9].log&amp;#39; -print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（14）在 test 目录查找不在 test4 子目录查找&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find test -path &amp;#39;test/test4&amp;#39; -prune -o -print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find -newer log2012.log ! -newer log2017.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>使用 depth 选项：&lt;/strong>&lt;/p>
&lt;p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。&lt;/p>
&lt;p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">find / -name &amp;#34;CON.FILE&amp;#34; -depth -print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ln-命令">ln 命令
&lt;/h2>&lt;p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。&lt;/p>
&lt;p>链接分类：软件链接及硬链接&lt;/p>
&lt;p>软链接：&lt;/p>
&lt;ul>
&lt;li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式&lt;/li>
&lt;li>2.软链接可以 跨文件系统 ，硬链接不可以&lt;/li>
&lt;li>3.软链接可以对一个不存在的文件名进行链接&lt;/li>
&lt;li>4.软链接可以对目录进行链接&lt;/li>
&lt;/ul>
&lt;p>硬链接:&lt;/p>
&lt;ul>
&lt;li>1.硬链接，以文件副本的形式存在。但不占用实际空间。&lt;/li>
&lt;li>2.不允许给目录创建硬链接&lt;/li>
&lt;li>3.硬链接只有在同一个文件系统中才能创建&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>需要注意：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；&lt;/li>
&lt;li>第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。&lt;/li>
&lt;li>第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>常用参数：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-b 删除，覆盖以前建立的链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s 软链接（符号链接）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-v 显示详细处理过程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>实例：&lt;/strong>&lt;/p>
&lt;p>（1）给文件创建软链接，并显示操作信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ln -sv source.log link.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）给文件创建硬链接，并显示操作信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ln -v source.log link1.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）给目录创建软链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ln -sv /opt/soft/test/test3 /opt/soft/test/test5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Linux 文件系统</title><link>https://sfw003.github.io/p/linux-file-system/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-file-system/</guid><description>&lt;h2 id="文件">文件
&lt;/h2>&lt;p>在谈文件系统前，首先谈谈什么是文件？&lt;/p>
&lt;h3 id="文件结构体">文件结构体
&lt;/h3>&lt;p>文件 = 属性 + 内容
同进程PCB，linux也有管理文件属性的结构体&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>struct file&lt;/strong>：描述文件的打开状态，每次打开文件都会创建一个 file 结构，主要记录与进程操作文件相关的信息（如文件指针位置、打开模式等）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>struct inode&lt;/strong>：描述文件在磁盘或文件系统中的元数据，无论文件是否被打开，inode 都存在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>struct stat&lt;/strong>：用于在&lt;strong>用户空间&lt;/strong>访问文件的属性信息，系统调用通过从 inode 获取属性并填充到 struct stat 中&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>本文重点在前2个&lt;/p>
&lt;h3 id="文件的权限">文件的权限
&lt;/h3>&lt;p>文件权限
每个文件和目录在 Linux 中都有三类权限，分别是：&lt;/p>
&lt;ul>
&lt;li>所有者（Owner）&lt;/li>
&lt;li>所属组（Group）&lt;/li>
&lt;li>其他用户（Others）&lt;/li>
&lt;/ul>
&lt;p>每类权限又分为三种操作权限：&lt;/p>
&lt;ul>
&lt;li>读（r，read）：允许查看文件内容或列出目录内容。&lt;/li>
&lt;li>写（w，write）：允许修改文件内容或在目录中创建、删除文件。&lt;/li>
&lt;li>执行（x，execute）：允许执行文件（如果是可执行程序）或访问目录中的文件。&lt;/li>
&lt;/ul>
&lt;p>这些权限被表示为一个 9 位的二进制组合，如下：&lt;/p>
&lt;p>&lt;code>rwxrwxrwx&lt;/code>&lt;/p>
&lt;ul>
&lt;li>前三个字符表示文件的所有者权限。&lt;/li>
&lt;li>中间三个字符表示文件的所属组权限。&lt;/li>
&lt;li>最后三个字符表示其他用户的权限。&lt;/li>
&lt;/ul>
&lt;p>有权限则对应的二进制位为1
例如，文件权限 755 表示：&lt;code>rwxr-xr-x&lt;/code>&lt;/p>
&lt;p>&lt;strong>文件掩码&lt;/strong>（umask）用于决定在创建文件或目录时默认权限会被如何设置。它是一个权限的反向屏蔽值，掩码中的位会关闭（去除）文件或目录的默认权限。&lt;/p>
&lt;ul>
&lt;li>对于文件，默认权限为 666（即只有读和写权限，没有执行权限）。&lt;/li>
&lt;li>对于目录，默认权限为 777（即读、写、执行权限全部开放）。
码会从这些默认权限中减去相应的权限。例如：&lt;/li>
&lt;/ul>
&lt;p>一个常见的掩码值为 022。这意味着从默认权限中去掉组和其他用户的写权限：&lt;/p>
&lt;ul>
&lt;li>文件权限：666 - 022 = 644（所有者有读写权限，组和其他用户只有读权限）&lt;/li>
&lt;li>目录权限：777 - 022 = 755（所有者有全部权限，组和其他用户有读和执行权限）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="err">查看当前掩码：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">umask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">临时设置&lt;/span> &lt;span class="n">umask&lt;/span>&lt;span class="err">（只对当前会话有效）：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">umask&lt;/span> &lt;span class="mo">002&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">永久更改&lt;/span> &lt;span class="n">umask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">将&lt;/span> &lt;span class="n">umask&lt;/span> &lt;span class="err">命令添加到你的&lt;/span> &lt;span class="n">shell&lt;/span> &lt;span class="err">启动文件中（例如&lt;/span> &lt;span class="o">~/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">bashrc&lt;/span> &lt;span class="err">或&lt;/span> &lt;span class="o">~/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">profile&lt;/span>&lt;span class="err">）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="文件的状态">文件的状态
&lt;/h3>&lt;p>文件有2种状态：打开和未打开
对于一个打开的文件，我们重点关注谁打开？谁进行维护？进程！因此要研究进程和文件的关系
对于一个未打开的文件，我们重点关注放在哪里？如何分门别类的放置好？因此我们需要研究linux的文件系统。&lt;/p>
&lt;h2 id="打开的文件">打开的文件
&lt;/h2>&lt;p>对于打开的文件，我们要研究进程和文件的关系。下面按照如下顺序来讲解：&lt;/p>
&lt;ol>
&lt;li>进程如何操作文件？研究linux下的文件系统调用&lt;/li>
&lt;li>底层是如何将进程和打开的文件联系在一起？研究struct task_struct和struct file&lt;/li>
&lt;/ol>
&lt;h3 id="linux下文件的系统调用">Linux下文件的系统调用
&lt;/h3>&lt;blockquote>
&lt;p>linux系统提供的常见文件接口：
&lt;strong>open&lt;/strong>
&lt;strong>write&lt;/strong>
&lt;strong>read&lt;/strong>
&lt;strong>close&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h4 id="open--close">open &amp;amp;&amp;amp; close
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pathname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pathname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode_t&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">参数介绍&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pathname&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">文件路径&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flags&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">文件打开方式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mode&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">文件掩码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>flags参数是标志位，告诉open函数是要以读还是以写的方式打开文件。传参内容如下：
O_WRONLY：以写的方式打开文件
O_RDONLY：以读的方式打开文件
O_RDWR：以读写的方式打开文件
O_CREAT：当文件不存在时，创建文件
O_APPEND：在文件末尾追加&lt;/p>
&lt;blockquote>
&lt;p>疑问：如何传递多个标志位？
原理如下图，通过位图的方式,每个标志（如 O_RDWR、O_CREAT、O_TRUNC 等）都是一个特定的整数值，其中每个标志都使用一个或多个二进制位来表示。因为这些标志的二进制表示互不重叠（即它们的值在二进制上不冲突），可以通过按位或运算符（|）将它们组合在一起。
如：&lt;code>int fd = open(&amp;quot;example.txt&amp;quot;, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);&lt;/code>
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/ed8c61c3979d621f3cc5fa6629a9c8e6.png"
width="999"
height="641"
srcset="https://sfw003.github.io/p/linux-file-system/image/ed8c61c3979d621f3cc5fa6629a9c8e6_hu_e033e4ffa148c0d6.png 480w, https://sfw003.github.io/p/linux-file-system/image/ed8c61c3979d621f3cc5fa6629a9c8e6_hu_d64d5414bd05aff3.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="374px"
>&lt;/p>&lt;/blockquote>
&lt;p>mode参数： 新建文件的权限
使用: int fd = open(&amp;ldquo;sfw.txt&amp;rdquo;, O_WRONLY|O_CREAT, 0666);
最后文件的权限是664，这是由于&lt;strong>权限掩码&lt;/strong>的影响&lt;/p>
&lt;p>返回值：&lt;strong>文件描述符&lt;/strong>
后文会详细介绍，这里就简单认为是为open的文件分配一个id，将这个id作为read和write的参数可以对open的文件进行读写。&lt;/p>
&lt;h4 id="read--write">read &amp;amp;&amp;amp; write
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">ssize_t&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssize_t&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;6666&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">ls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="n">t1&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="文件描述符fd和struct-file">文件描述符fd和struct file
&lt;/h3>&lt;p>在Linux系统中用来描述一个打开的文件的结构体是struct file&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">file&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">list_head&lt;/span> &lt;span class="n">f_list&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件对象的链表，用于内核维护打开文件的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">vfsmount&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">f_path&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件路径及挂载点信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">dentry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">f_dentry&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件的目录项
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">file_operations&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">f_op&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件操作函数指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">atomic_long_t&lt;/span> &lt;span class="n">f_count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 引用计数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">f_flags&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件状态标志（读写、非阻塞等）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">loff_t&lt;/span> &lt;span class="n">f_pos&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件当前的读写位置（文件指针）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">private_data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 文件私有数据（特定文件系统或设备的私有数据）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进程打开文件的本质即是 task_struct和 file 建立联系。如何联系？如下图
task_struct 有一个成员 struct file_struct* files, 它指向结构体 struct files_struct。在struct files_struct 有个指针数组struct file* fd_array[]，该数组存储struct file* 指针。由次 task_struct 与 file 建立了联系。所谓的文件描述符就是struct file* fd_array[]数组的下标。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/e9a50b77b067473587474524351dad8c.png"
width="1920"
height="1023"
srcset="https://sfw003.github.io/p/linux-file-system/image/e9a50b77b067473587474524351dad8c_hu_9e217d6392a2fbfa.png 480w, https://sfw003.github.io/p/linux-file-system/image/e9a50b77b067473587474524351dad8c_hu_7284975f49612cd6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>
内核源代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">files_struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">atomic_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">spinlock_t&lt;/span> &lt;span class="n">file_lock&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Protects all the below members. Nests inside tsk-&amp;gt;alloc_lock */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">max_fds&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">max_fdset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">next_fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">file&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* current fd array */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">close_on_exec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">open_fds&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="n">close_on_exec_init&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd_set&lt;/span> &lt;span class="n">open_fds_init&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">file&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">fd_array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NR_OPEN_DEFAULT&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那现在打印文件描述符看看：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd1 = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd2 = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;log.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd3 = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fd1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fd3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么是从3开始？&lt;/p>
&lt;p>我们在学习C语言的文件操作时，应该会了解：C语言默认打开3个文件流：stdin, stdout, stderr
stdin &amp;ndash; 标准输入 &amp;ndash; 对应键盘
stdout &amp;ndash; 标准输出 &amp;ndash; 对应显示器
stderr &amp;ndash; 标准错误输出 &amp;ndash; 对应显示器
其他语言类似。&lt;/p>
&lt;p>实际，这并不是语言的特性，而是操作系统的特性。&lt;strong>操作系统默认会打开3个文件描述符&lt;/strong>
0 &amp;ndash; 标准输入 &amp;ndash; 对应键盘
1 &amp;ndash; 标准输出 &amp;ndash; 对应显示器
2 &amp;ndash; 标准错误输出 &amp;ndash; 对应显示器&lt;/p>
&lt;p>验证：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;sfsfsf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sfsfsf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sfsfsf&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>文件描述符的分配规则：在files_struct数组当中，找到当前没有被使用的最小的一个下标，作为新的文件描述符。&lt;/strong>
所以，除去系统默认打开文件，打开的文件的文件描述符默认从3开始。&lt;/p>
&lt;p>小知识：&lt;/p>
&lt;ol>
&lt;li>文件描述符1，2都指向显示器，那关闭1，2会受影响吗？不会，&lt;strong>类比智能指针shared_ptr的引用计数&lt;/strong>&lt;/li>
&lt;li>可以推测，不同语言的文件结构体或者文件类中，一定包含一个成员，文件描述符&lt;/li>
&lt;/ol>
&lt;h3 id="重定向">重定向
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;myfile&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_WRONLY&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">00644&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fd: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fflush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时，我们发现，本来应该输出到显示器上的内容，输出到了文件 myfile 当中，其中，fd＝1。这种现象叫做输出重定向。原理如下。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/f139464d829d4c88b0883224e2f15feb.png"
width="1274"
height="551"
srcset="https://sfw003.github.io/p/linux-file-system/image/f139464d829d4c88b0883224e2f15feb_hu_9a8d4a534a73ade3.png 480w, https://sfw003.github.io/p/linux-file-system/image/f139464d829d4c88b0883224e2f15feb_hu_3f9658cb9b8e1f49.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="554px"
>&lt;/p>
&lt;h4 id="重定向方法">重定向方法
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>重定向符号&lt;/strong>&lt;/th>
&lt;th>&lt;strong>说明&lt;/strong>&lt;/th>
&lt;th>&lt;strong>示例&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
&lt;td>将文件内容作为命令的标准输入&lt;/td>
&lt;td>&lt;code>command &amp;lt; input_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
&lt;td>将命令的标准输出重定向到文件（覆盖原文件）&lt;/td>
&lt;td>&lt;code>command &amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将命令的标准输出追加到文件末尾&lt;/td>
&lt;td>&lt;code>command &amp;gt;&amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>2&amp;gt;&lt;/code>&lt;/td>
&lt;td>将命令的标准错误输出重定向到文件&lt;/td>
&lt;td>&lt;code>command 2&amp;gt; error_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>2&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将标准错误追加到文件末尾&lt;/td>
&lt;td>&lt;code>command 2&amp;gt;&amp;gt; error_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将标准输出和标准错误同时重定向到文件&lt;/td>
&lt;td>&lt;code>command &amp;amp;&amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;&amp;gt;&amp;gt;&lt;/code>&lt;/td>
&lt;td>将标准输出和标准错误追加重定向到文件末尾&lt;/td>
&lt;td>&lt;code>command &amp;amp;&amp;gt;&amp;gt; output_file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>2&amp;gt;&amp;amp;1&lt;/code>&lt;/td>
&lt;td>将标准错误重定向到标准输出&lt;/td>
&lt;td>&lt;code>command &amp;gt; output_file 2&amp;gt;&amp;amp;1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`&lt;/td>
&lt;td>tee`&lt;/td>
&lt;td>将标准输出显示在终端并写入文件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">ls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myfile&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;5555&amp;#34;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span> &lt;span class="err">将打印到显示器的信息重定向到&lt;/span>&lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5555&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;6666&amp;#34;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span> &lt;span class="err">重定向会清空文件原有的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;7777&amp;#34;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span> &lt;span class="err">追加重定向不会清空原有内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">6666&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">7777&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些操作本质都是通过系统调用dup来实现的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NAME&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dup&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dup2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dup3&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">duplicate&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="n">descriptor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SYNOPSIS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">oldfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">dup2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">oldfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#define _GNU_SOURCE &lt;/span>&lt;span class="cm">/* See feature_test_macros(7) */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp"> &lt;/span>&lt;span class="cm">/* Obtain O_* constant definitions */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">dup3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">oldfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">newfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>dup系统调用接口中，最常用的是dup2。
注意它的含义：让newfd对应文件替换为oldfd指向的文件。
简单理解：&lt;strong>最后oldfd和newfd都指向oldfd对应的文件&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;./log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_CREAT&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">O_RDWR&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">perror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;open&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dup2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ssize_t&lt;/span> &lt;span class="n">read_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">read_size&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">perror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fflush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="用户缓冲区">用户缓冲区
&lt;/h3>&lt;p>看下面一段代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">msg0&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello printf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">msg1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello fwrite&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">msg2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hello write&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fwrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">printf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">fwrite&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">write&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t1&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">iZbp1inz4ol3gjahpjal9qZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">~/&lt;/span>&lt;span class="n">study&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="n">myfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">write&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">printf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">fwrite&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">printf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hello&lt;/span> &lt;span class="n">fwrite&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么打印屏幕上和重定向到文件的结果不一样？&lt;/p>
&lt;p>我们发现 printf 和 fwrite （库函数）都输出了2次，而 write 只输出了一次（系统调用）。为什么呢？肯定和
fork有关！&lt;strong>一般C库函数写入文件时是全缓冲的，而写入显示器是行缓冲&lt;/strong>。printf fwrite 库函数会自带缓冲区，当发生重定向到普通文件时，数据的缓冲方式由行缓冲变成了全缓冲。
而我们放在缓冲区中的数据，就不会被立即刷新，当进程退出之后，会统一刷新，写入文件当中。
但是fork的时候，父子数据会发生写时拷贝，所以当你父进程准备刷新的时候，子进程也就有了同样的
一份数据，随即产生两份数据。write 没有变化，说明没有所谓的缓冲区。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/19c312ceaf19437f85bd475101a91464.png"
width="1040"
height="439"
srcset="https://sfw003.github.io/p/linux-file-system/image/19c312ceaf19437f85bd475101a91464_hu_50489855c0f66fec.png 480w, https://sfw003.github.io/p/linux-file-system/image/19c312ceaf19437f85bd475101a91464_hu_591cbd7ae84d3371.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/p>
&lt;h2 id="未打开的文件">未打开的文件
&lt;/h2>&lt;h3 id="linux的文件系统">linux的文件系统
&lt;/h3>&lt;p>假设现在linux的文件系统要管理一个1000GB的磁盘。
它的第一步便是要对1000GB进行划分，因为太大了，这一过程便是&lt;strong>分区&lt;/strong>。如何分？随便分。对于操作系统，定义一个结构体，里面定义start，end,便可以很容易的记录各个区的起始于结尾，因此分区对于操作系统来说非常简单。此时系统便将管理1000GB的任务 &amp;ndash;&amp;gt; 管理200GB的任务。只要系统将200GB的空间管理好，后面的150GB，120GB同理即可。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/588070d9796db19a6827c2550f11a3f3.png"
width="765"
height="103"
srcset="https://sfw003.github.io/p/linux-file-system/image/588070d9796db19a6827c2550f11a3f3_hu_c5337237c34a1b60.png 480w, https://sfw003.github.io/p/linux-file-system/image/588070d9796db19a6827c2550f11a3f3_hu_f4ddb6bb3151b858.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="742"
data-flex-basis="1782px"
>
200GB对于操作系统还是太大，于是系统可以继续分。直到最后分成一个基本块（block）。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/53697afc57cce28aa2182894eb2c0b62.png"
width="557"
height="173"
srcset="https://sfw003.github.io/p/linux-file-system/image/53697afc57cce28aa2182894eb2c0b62_hu_473f02df198ceffb.png 480w, https://sfw003.github.io/p/linux-file-system/image/53697afc57cce28aa2182894eb2c0b62_hu_7bf991beb87543e6.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="321"
data-flex-basis="772px"
>
Linux ext2文件系统，上图为磁盘文件系统图（内核内存映像肯定有所不同），磁盘是典型的块设备，硬盘分区被划分为一个个的block。一个block的大小是由格式化的时候确定的，并且不可以更改。例如mke2fs的-b选项可以设定block大小为1024、2048或4096字节。而上图中启动块（Boot Block)的大小是确定的，&lt;/p>
&lt;ul>
&lt;li>Block Group：ext2文件系统会根据分区的大小划分为数个Block Group。而每个Block Group都有着相
同的结构组成。政府管理各区的例子&lt;/li>
&lt;li>Super Block：存放文件系统本身的结构信息。记录的信息主要有：bolck 和 inode的总量，未使用的block和inode的数量，一个block和inode的大小，最近一次挂载的时间，最近一次写入数据的时间，最近一次检验磁盘的时间等其他文件系统的相关信息。Super Block的信息被破坏，可以说整个文件系统结构就被破坏了&lt;/li>
&lt;li>Group Descriptor Table：块组描述符，描述块组属性信息。&lt;/li>
&lt;li>Block Bitmap：Block Bitmap中记录着Data Block中哪个数据块已经被占用，哪个数据块没有被占用&lt;/li>
&lt;li>inode Bitmap：每个bit表示一个inode是否空闲可用。&lt;/li>
&lt;li>inode Table：&lt;strong>存放struct inode，存储文件属性&lt;/strong>。每个inode带有编号&lt;/li>
&lt;li>Data blocks：存放Data block，每一个Data block带有编号&lt;/li>
&lt;/ul>
&lt;p>介绍一下它们之间的关系：
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/69bf8d767dae4570a28e72a0c5617df5.png"
width="2187"
height="858"
srcset="https://sfw003.github.io/p/linux-file-system/image/69bf8d767dae4570a28e72a0c5617df5_hu_449c80849e9713f3.png 480w, https://sfw003.github.io/p/linux-file-system/image/69bf8d767dae4570a28e72a0c5617df5_hu_72db999c25ad591f.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>
当我们创建一个新文件时：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">localhost&lt;/span> &lt;span class="n">linux&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">touch&lt;/span> &lt;span class="n">abc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">localhost&lt;/span> &lt;span class="n">linux&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">ls&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="n">abc&lt;/span> &lt;span class="c1">//-i 查看该文件的inode编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">263466&lt;/span> &lt;span class="n">abc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-file-system/image/39c9a93e7b22444892e9355e926ac86e.png"
width="807"
height="331"
srcset="https://sfw003.github.io/p/linux-file-system/image/39c9a93e7b22444892e9355e926ac86e_hu_4e509c093d705e41.png 480w, https://sfw003.github.io/p/linux-file-system/image/39c9a93e7b22444892e9355e926ac86e_hu_375e8cf376e09fde.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="585px"
>&lt;/p>
&lt;hr>
&lt;p>疑问：&lt;/p>
&lt;p>3种情况：&lt;/p>
&lt;ol>
&lt;li>新建一个文件，系统所做如上&lt;/li>
&lt;li>删除一个文件，系统只需要把 block bitmap和inode bitmap中对应位图置0&lt;/li>
&lt;li>查找和修改
用户并不知道inode编号，只知道文件名，那系统如何通过文件名找到inode呢？
目录也是一个文件，它存储的内容是文件名和inode的对应关系。
那目录本身呢？谁存储目的的文件名和inode的对应关系？上一级目录。最后所有目录都会指向一个目录：根目录。因此查找一文件，对系统来说是从根目录递归向下查找。这是不是太慢了？当然，因此要不断访问磁盘。为此，Linux 系统会缓存多种数据以提高性能，包括文件系统的元数据、文件内容以及目录结构。当你访问文件时，系统会将这些数据存储在内存中，以便快速访问，减少磁盘读写操作。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="软硬链接">软硬链接
&lt;/h3>&lt;p>linux下通过&lt;code>ln&lt;/code>命令可以为文件创建软硬链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">文件 test.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">创建硬链接 ln 目标文件（不能是目录） 硬链接名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln test.txt hard_link
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">创建软链接 ln -s 目标文件 软链接名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln -s test.txt soft_link
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-file-system/image/d5376ec1581cef29add0ea8ff264dffe.png"
width="923"
height="148"
srcset="https://sfw003.github.io/p/linux-file-system/image/d5376ec1581cef29add0ea8ff264dffe_hu_94b1d684275edb14.png 480w, https://sfw003.github.io/p/linux-file-system/image/d5376ec1581cef29add0ea8ff264dffe_hu_6b3d3e96b34e1ce8.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="623"
data-flex-basis="1496px"
>
问题1：软硬链接是干什么的？
答：&lt;strong>用于建立文件之间的联系&lt;/strong>
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/9597bda6507aeaf11359306ef827a7c8.png"
width="917"
height="318"
srcset="https://sfw003.github.io/p/linux-file-system/image/9597bda6507aeaf11359306ef827a7c8_hu_1cb23b3da1c0c3c5.png 480w, https://sfw003.github.io/p/linux-file-system/image/9597bda6507aeaf11359306ef827a7c8_hu_509b11e3e189831d.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="288"
data-flex-basis="692px"
>&lt;/p>
&lt;p>问题2：软硬链接有什么区别？
&lt;strong>软链接是一个独立的文件，因为它有独立的inode,
硬链接不是一个独立的文件，因为它没有独立的inode.&lt;/strong>&lt;/p>
&lt;p>通过上面的例子可以看出：test.txt的inode(1050440)与hard_link的inode(1050440)相同，而我们知道，每个文件的inode是唯一的，因此可以推断hard_link不是一个独立的文件，反之，soft_link是一个独立的文件，因为它有独立的inode.&lt;/p>
&lt;p>我们应该如何去理解软硬链接呢？&lt;/p>
&lt;p>对于软链接：它完全等同于windows下创建软件的&lt;strong>快捷方式&lt;/strong>。&lt;strong>它存储指向文件的存储路径（地址）&lt;/strong>&lt;/p>
&lt;p>对于硬链接：硬链接本质是&lt;strong>在特定的目录数据块中新增 文件名 和 指向文件的inode编号 的映射关系&lt;/strong>，就像c++里的&lt;strong>引用&lt;/strong>一样。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/b52f69d6c5b8b246cd7626586da90adb.png"
width="432"
height="132"
srcset="https://sfw003.github.io/p/linux-file-system/image/b52f69d6c5b8b246cd7626586da90adb_hu_a5d9fb693df9c545.png 480w, https://sfw003.github.io/p/linux-file-system/image/b52f69d6c5b8b246cd7626586da90adb_hu_37335449d47df0a5.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="785px"
>
通过ls -l命令可以看到文件的硬链接数，如下图红框处。如果你了解&lt;strong>引用计数&lt;/strong>的概念，这个理解起来就很轻松。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/f562fe68e3adf8520902cf9544dfb8ee.png"
width="922"
height="155"
srcset="https://sfw003.github.io/p/linux-file-system/image/f562fe68e3adf8520902cf9544dfb8ee_hu_8637e6184cac7d8e.png 480w, https://sfw003.github.io/p/linux-file-system/image/f562fe68e3adf8520902cf9544dfb8ee_hu_e177ec8ed783e837.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="594"
data-flex-basis="1427px"
>
假如我们删去test.txt，与文件inode:105040的文件名减少一个，因此引用计数减1，由2变为1，因此下方hard_link前面的数字变为1。而soft_link存储的是test.txt的路径（地址），test.txt文件没了，显然soft_link就失效了，
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/879259ff0d1151d1465b90d9cc50fb5b.png"
width="938"
height="159"
srcset="https://sfw003.github.io/p/linux-file-system/image/879259ff0d1151d1465b90d9cc50fb5b_hu_736ad38774f53f80.png 480w, https://sfw003.github.io/p/linux-file-system/image/879259ff0d1151d1465b90d9cc50fb5b_hu_985dcca96e6e0f03.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="589"
data-flex-basis="1415px"
>&lt;/p>
&lt;p>问题3：软硬链接有哪些应用场景？
答：软链接就不用说了。硬链接的经典的应用场景便是&lt;strong>目录&lt;/strong>。linux创建一个目录，你会发现它的引用计数是2，说明有一个硬链接指向它，那这个硬链接在哪里呢？
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/08382e414c2414d764f1639f576d286c.png"
width="728"
height="121"
srcset="https://sfw003.github.io/p/linux-file-system/image/08382e414c2414d764f1639f576d286c_hu_7866b1c5408dede4.png 480w, https://sfw003.github.io/p/linux-file-system/image/08382e414c2414d764f1639f576d286c_hu_275d0fc36595b354.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="601"
data-flex-basis="1443px"
>
每个目录创建时，会自动创建两个隐藏文件&lt;code>.&lt;/code>和&lt;code>..&lt;/code>，它们都是硬链接。
&lt;img src="https://sfw003.github.io/p/linux-file-system/image/534b79a02b74b1427dcbe3914a956ad4.png"
width="704"
height="125"
srcset="https://sfw003.github.io/p/linux-file-system/image/534b79a02b74b1427dcbe3914a956ad4_hu_f6f92c726eb222a2.png 480w, https://sfw003.github.io/p/linux-file-system/image/534b79a02b74b1427dcbe3914a956ad4_hu_4b9a32a99d2419b0.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="563"
data-flex-basis="1351px"
>&lt;/p>
&lt;p>问题4：为什么用户不能给目录设置硬链接？
循环引用问题：如果允许用户给目录创建硬链接，那么用户可以创建一个目录结构的循环，比如目录A指向目录B，目录B又指向目录A，最终导致无限循环。这种情况会破坏文件系统的层次结构，并使得一些文件系统操作（如遍历文件树）变得复杂和无法实现。&lt;/p></description></item><item><title>Linux 线程</title><link>https://sfw003.github.io/p/linux-thread/</link><pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/linux-thread/</guid><description>&lt;p>绘图文件，在&lt;a class="link" href="https://sfw003.github.io/p/linux-series/#linux进程管理" >linux系列文章:进程管理&lt;/a>&lt;/p>
&lt;h2 id="线程与tcb">线程与TCB
&lt;/h2>&lt;blockquote>
&lt;p>线程（Thread）是进程内的一个执行分支，线程的执行粒度，要比进程更细。&lt;/p>&lt;/blockquote>
&lt;p>如何理解？&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410164313828.png"
width="461"
height="551"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410164313828_hu_66d962c4dc9bb428.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410164313828_hu_fd636f545b34d674.png 1024w"
loading="lazy"
alt="image-20250410164313828"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="200px"
>&lt;/p>
&lt;h3 id="linux下的线程与pthread库">linux下的线程与pthread库
&lt;/h3>&lt;p>&lt;strong>linux没有真正意义的线程&lt;/strong>，这在很多教材都提过的观点。究其原因，就如上图所示，让n个PCB来管理一个进程地址空间不就有了线程了。区别windows系统专门设置了TCB结构体，linux选择用PCB来模拟TCB，因此linux可以说没有真正意义的线程，而是叫做&lt;strong>轻量级进程&lt;/strong>。&lt;/p>
&lt;p>你linux搞特殊是吧？我想使用线程，你告诉我说让我使用轻量级进程。这让用户满意吗？于是linux封装了一个库 &lt;strong>pthread&lt;/strong>，让用户可以使用到&lt;strong>用户级线程&lt;/strong>，并不能叫做&lt;strong>内核级线程&lt;/strong>，因为在linux内核中只有轻量级进程。可以通过下图来理解：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/f99a74ee3b55fc2c2ab61eae415b29a7.png"
width="1106"
height="768"
srcset="https://sfw003.github.io/p/linux-thread/image/f99a74ee3b55fc2c2ab61eae415b29a7_hu_4c75f0ddc73b0b86.png 480w, https://sfw003.github.io/p/linux-thread/image/f99a74ee3b55fc2c2ab61eae415b29a7_hu_a872263aa6e0f674.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="345px"
>&lt;/p>
&lt;p>注：&lt;/p>
&lt;ul>
&lt;li>轻量级进程:用户级线程 = 1:1&lt;/li>
&lt;li>用户使用到的TCB结构体并不在内核空间中。&lt;/li>
&lt;/ul>
&lt;p>上图中出现了2个名词：线程栈和线程局部存储&lt;/p>
&lt;h4 id="线程栈">线程栈
&lt;/h4>&lt;p>每一个线程都有自己的调用链，注定了每个线程都要有调用链对应的栈帧结构，用来存储线程函数中的局部变量、函数参数以及函数调用的返回地址等信息。这一点类似进程的main函数的函数栈帧。这里的线程栈由pthread来维护，有了线程栈，才能在内核里创建执行流，有了新的执行流，才是一个真正的线程。&lt;/p>
&lt;blockquote>
&lt;p>pthread是如何创建线程栈？&lt;/p>
&lt;p>inux下只有轻量级进程的概念，自然linux会提供轻量级进程的接口，pthread库正是对轻量级进程的接口进行了封装，才在用户层创建了线程的概念。&lt;/p>
&lt;p>linux下创建轻量级进程的系统接口是clone&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/4172bee3ea61ac55cc7cf5ad25794b62.png"
width="1046"
height="348"
srcset="https://sfw003.github.io/p/linux-thread/image/4172bee3ea61ac55cc7cf5ad25794b62_hu_2ae41c3c3347bb0.png 480w, https://sfw003.github.io/p/linux-thread/image/4172bee3ea61ac55cc7cf5ad25794b62_hu_2220ad0128af24e7.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="721px"
>&lt;/p>&lt;/blockquote>
&lt;p>如何验证？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">thread_routine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;thread-&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, j=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, &amp;amp;j=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, g_val=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">g_val&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, &amp;amp;g_val=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">g_val&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_val&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">std&lt;/span>&lt;span class="p">:;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pthread_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tids&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_routine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tids&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/b752d85cc384361884d16c1771508fba.png"
width="837"
height="608"
srcset="https://sfw003.github.io/p/linux-thread/image/b752d85cc384361884d16c1771508fba_hu_80c65b96be950cfd.png 480w, https://sfw003.github.io/p/linux-thread/image/b752d85cc384361884d16c1771508fba_hu_83dde00b95c6e81.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>不同的线程，都执行的同一个函数thread_routine，但函数内部的临时变量j，不是共享的，如果是共享的，那么不同的线程的j的地址应该一样。但结果表明，j的地址都不同。这也表明线程有自己独立的栈结构。&lt;/p>
&lt;p>对于全局变量g_val，不同线程是共享的。&lt;/p>
&lt;p>插入一个问题：线程栈由多大？&lt;/p>
&lt;p>在linux系统中使用 &lt;code>ulimit -a&lt;/code>可以查看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">hcss&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ecs&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">f8b5&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">blog&lt;/span>&lt;span class="c1"># ulimit -a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">real&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">time&lt;/span> &lt;span class="n">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">blocking&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">microseconds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">core&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">blocks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="n">seg&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">scheduling&lt;/span> &lt;span class="n">priority&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">file&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">blocks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pending&lt;/span> &lt;span class="n">signals&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">6628&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">max&lt;/span> &lt;span class="n">locked&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">226728&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">max&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">open&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">65535&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pipe&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">512&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">POSIX&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="n">queues&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">819200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">real&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">time&lt;/span> &lt;span class="n">priority&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">8192&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cpu&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">max&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="n">processes&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">6628&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">virtual&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">kbytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">file&lt;/span> &lt;span class="n">locks&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">unlimited&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>stack size (kbytes, -s) 8192 约为8M&lt;/p>
&lt;h4 id="线程的局部存储">线程的局部存储
&lt;/h4>&lt;p>如果我想线程拥有私有的全局变量呢？这就要使用线程的局部存储。
&lt;code>int g_val = 0 改为 __thread in g_val = 0&lt;/code>
此时不同的线程的变量g_val，都是不同的
&lt;img src="https://sfw003.github.io/p/linux-thread/image/82808e1010e8844a562705b983fe0c6c.png"
width="1068"
height="645"
srcset="https://sfw003.github.io/p/linux-thread/image/82808e1010e8844a562705b983fe0c6c_hu_93ca0ec558de0ec7.png 480w, https://sfw003.github.io/p/linux-thread/image/82808e1010e8844a562705b983fe0c6c_hu_6c8faee95482b335.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>
在变量前加上 &lt;code>__thread&lt;/code>， 就可以将该变量改为局部存储。除了这个关键字之外，pthread库中也有一些函数可以实现局部存储。&lt;/p>
&lt;p>__thread 是 GCC 中用于实现线程局部存储（Thread Local Storage，TLS）的关键字。它可以用来声明线程局部变量，这些变量对于每个线程是唯一的，不同线程之间的变量不会相互影响。&lt;strong>但是它只能声明内置类型，无法声明自定义类型。&lt;/strong>
需要注意的是，__thread 关键字是 GCC 的扩展语法，虽然在大多数情况下可以正常工作，但并不是 C 标准的一部分，因此在一些不支持 GCC 扩展语法的编译器中可能无法使用。在 C11 标准中引入了 _Thread_local 关键字，用于实现线程局部存储，具有类似的功能，而且是标准化的语法。&lt;/p>
&lt;h2 id="线程的竞争与协作">线程的竞争与协作
&lt;/h2>&lt;p>进程地址空间存在的意义是什么？扩大地址空间，内存保护、进程隔离。这中间最重要一点的就是进程隔离，它可以放在数据被随意修改。现在多个线程共享一个进程地址空间，不可避免的就会出现数据竞争的问题。&lt;/p>
&lt;p>看下面这段代码：4个线程同时访问全局变量tickets&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">tickets&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">getTickets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//票大于0才抢
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tickets&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">usleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;thread-%d, get a ticket: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tickets&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tickets&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pthread_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tids&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_t&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">getTickets&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tids&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tids&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/220d95bc9366db5f9a606c2a70d4e3e2.png"
width="636"
height="184"
srcset="https://sfw003.github.io/p/linux-thread/image/220d95bc9366db5f9a606c2a70d4e3e2_hu_a207777bef057b84.png 480w, https://sfw003.github.io/p/linux-thread/image/220d95bc9366db5f9a606c2a70d4e3e2_hu_f8b019caa092df75.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="345"
data-flex-basis="829px"
>&lt;/p>
&lt;p>按照抢票的逻辑，票&amp;gt;0才抢，&amp;lt;=0就退出，怎么会出现负数呢？一张票应该属于一个线程，怎么出现了相同数字？问题就出在多线程并发访问。&lt;/p>
&lt;img src="image/1263aed2829689f36df7f566e583c72e.png" alt="在这里插入图片描述" style="zoom:67%;" />
&lt;p>多线程执行操作共享变量会导致竞争状态，在执行过程中发生了上下文切换，得到了错误的结果。每次运行都可能得到不同的结果，存在不确定性，为了解决这类问题，我们需要引入同步和互斥&lt;/p>
&lt;h3 id="同步和互斥相关概念">同步和互斥相关概念
&lt;/h3>&lt;p>首先了解以下几个概念&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>并发&lt;/strong>：指的是多个事情，在同一时间段内同时发生了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>并行&lt;/strong>：指的是多个事情，在同一时间点上同时发生了。只有在多CPU的情况中，才会出现&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>共享资源&lt;/strong>：多个线程之间可以&lt;strong>并发&lt;/strong>访问的资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>临界资源&lt;/strong>：多个线程&lt;strong>互斥&lt;/strong>访问的共享资源。（共享资源 且 同一时间只能由一个线程访问 即为临界资源）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>临界区&lt;/strong>：每个线程内部，访问临界资源的代码，就叫做临界区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>互斥&lt;/strong>：任何时刻，互斥保证有且只有一个执行流进入临界区，访问临界资源，通常对临界资源起保护作用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>同步&lt;/strong>：就是并发进程/线程在一些关键点上可能需要互相等待与互通消息，这种相互制约的等待与互通信息称为进程/线程同步。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子性&lt;/strong>：不会被任何调度机制打断的操作，该操作只有两态，要么完成，要么未完成&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>了解完概念，下面的问题是如何实现线程的同步和互斥？&lt;/p>
&lt;h3 id="同步和互斥的实现">同步和互斥的实现
&lt;/h3>&lt;p>操作系统提供实现线程协作的措施和方法，主要的方法有两种：&lt;/p>
&lt;ul>
&lt;li>锁&lt;/li>
&lt;li>POSIX信号量&lt;/li>
&lt;/ul>
&lt;h4 id="互斥锁和条件变量">互斥锁和条件变量
&lt;/h4>&lt;p>一个线程进入临界区之前，需要&lt;strong>申请锁&lt;/strong>，只有拿了锁，才能执行临界区的代码。锁只有一把，故当一个线程拿了锁后，其他线程在申请锁时就会被阻塞，只有当持有锁的线程执行完临界区代码、进行&lt;strong>解锁&lt;/strong>后，其他线程才可以申请锁。此时便实现了多个线程互斥的访问共享资源。&lt;/p>
&lt;blockquote>
&lt;p>锁有2中基本类型：互斥锁（互斥量）和自旋锁，下面以互斥锁为例。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410225111994.png"
width="229"
height="304"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410225111994_hu_822ecc6cef004450.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410225111994_hu_17180de5793b002b.png 1024w"
loading="lazy"
alt="image-20250410225111994"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/p>
&lt;p>单纯加锁已经解决了数据资源竞争问题，但是又引出了锁资源竞争的问题。不同线程对锁的竞争能力是不同，这可能导致大部分时间，锁都在某一个线程上，这将导致线程的&lt;strong>饥饿问题&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410225938165.png"
width="347"
height="246"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410225938165_hu_860a5ba7b2cb2c20.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410225938165_hu_cb1119741f277377.png 1024w"
loading="lazy"
alt="image-20250410225938165"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;p>为此，我们需要引入一个同步机制，比如条件变量&lt;/p>
&lt;blockquote>
&lt;p>条件变量（Condition Variable）是一种线程同步机制，需要与互斥锁（Mutex）结合使用，用于在线程间传递某个条件的状态并实现线程的等待和唤醒。条件变量允许一个或多个线程在满足特定条件之前进入等待状态，并在条件被满足时被唤醒。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250410230214278.png"
width="453"
height="231"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250410230214278_hu_3fc4e65f01aa9427.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250410230214278_hu_76e5a27f3b1117a5.png 1024w"
loading="lazy"
alt="image-20250410230214278"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;h5 id="互斥锁和条件变量的使用以下采用linux原生api">互斥锁和条件变量的使用（以下采用linux原生API)
&lt;/h5>&lt;h5 id="互斥锁的原理">互斥锁的原理
&lt;/h5>&lt;p>锁可以保护临界区被线程互斥访问。但锁同时也是所有线程共享，属于共享资源，那锁自身的互斥问题呢？那必须将申请锁设计成&lt;strong>原子的&lt;/strong>。（不会被任何调度机制打断的操作，该操作只有两态，要么完成，要么未完成）
首先我们要有一个共识：&lt;strong>一条汇编语句是原子的&lt;/strong>。
但加锁的过程不可能仅仅只是一条汇编语句。那是如何实现加锁过程是原子的呢？&lt;/p>
&lt;p>为了实现互斥锁操作,大多数体系结构都提供了swap或exchange指令,该指令的作用是把寄存器和内存单元的数据相交换,由于只有一条指令,保证了原子性,即使是多处理器平台,访问内存的 总线周期也有先后,一个处理器上的交换指令执行时另一个处理器的交换指令只能等待总线周期。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">lock:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movb $0, %al
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xchgb %al, mutex
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(al寄存器的内容〉0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 挂起等待;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto lock;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">unlock:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movb $l,mutex
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 唤醒等待Mutex的线程；
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;img src="image/efdc12726f6487bd1c677f9e9ae7e1c1.gif" alt="请添加图片描述" style="zoom:150%;" />
&lt;h4 id="posix信号量">POSIX信号量
&lt;/h4>&lt;p>POSIX信号量和SystemV信号量（进程间通信）作用相同，都是用于同步操作，达到无冲突的访问共享资源目的。 但POSIX可以用于线程间同步。&lt;/p>
&lt;p>信号量是什么？信号量本质是个&lt;strong>计数器&lt;/strong>。类似但是&lt;strong>绝不等于&lt;/strong> &lt;code>int cnt;&lt;/code>(这里的绝不等于体现在信号量的++和&amp;ndash;是原子的，但整形变量的++和&amp;ndash;不是原子的）&lt;/p>
&lt;p>那这个计数器记忆什么数据呢？&lt;strong>临界资源的数量&lt;/strong>&lt;/p>
&lt;p>当申请时，信号量会预定临界资源给你。就像电影院买票，只要你买了票，不管你是否去看，电影院一定有你的位置。信号量同理，&lt;strong>只要你向信号量申请了临界资源，就一定有可以使用的临界资源&lt;/strong>（不用担心临界资源是否就绪、是否存在等问题）&lt;/p>
&lt;p>正是这一特性，我们使用信号量就不用像互斥锁一样，加了锁还要用条件变量。&lt;/p>
&lt;p>信号量有2个操作P和V，P表示申请，V表示释放。
使用时的顺序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">P(信号量)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">使用临界资源
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">V(信号量）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="经典同步问题">经典同步问题
&lt;/h2>&lt;h3 id="生产者消费者模型">生产者消费者模型
&lt;/h3>&lt;p>生成者消费者模型是一种用于解决多线程或多进程间数据交换与同步的经典问题。
在该模型中，生产者负责生产数据并将其放入共享的缓冲区，而消费者则负责从缓冲区中获取数据并进行处理。这种模型通常用于解决生产者与消费者之间速度不匹配的情况，以及避免因为生产者和消费者之间的竞争条件而导致的数据丢失或不一致的问题。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411092358400.png"
width="694"
height="217"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411092358400_hu_66426eaa42c8851e.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411092358400_hu_b5c587edb6588e66.png 1024w"
loading="lazy"
alt="image-20250411092358400"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;blockquote>
&lt;p>这里共享资源准确说是临界资源&lt;/p>&lt;/blockquote>
&lt;p>生产者消费者模型的组成：&lt;/p>
&lt;ul>
&lt;li>3种关系：生产者和生产者，消费者和消费者，生产者和消费者&lt;/li>
&lt;li>2种角色：生产者、消费者&lt;/li>
&lt;li>1个场所：特定结构的内存空间&lt;/li>
&lt;/ul>
&lt;p>从记忆的角度，我们可以简记为“321”原则。&lt;/p>
&lt;p>3种关系：&lt;/p>
&lt;ol>
&lt;li>生产者与生产者：当一个生产者进行生产时，其他生产者不能生产 &amp;ndash; &lt;strong>互斥&lt;/strong>（避免争夺同一空间）&lt;/li>
&lt;li>消费者与消费者：当一个消费者进行消费时，其他消费者不能消费 &amp;ndash; &lt;strong>互斥&lt;/strong> （避免争夺同一资源）&lt;/li>
&lt;li>消费者与生产者：当一个生产者进行生产时，消费者不能进行消费 &amp;ndash; &lt;strong>互斥&lt;/strong>（原因：假如生产者正在生产，消费者这时要进行消费，刚好消费这个生产者生产的资源，哪你怎么知道生产者此时生产好了吗？消费者拿到完整的资源了吗？因此要互斥）。避免生产者向已满的缓冲区中放入数据，或消费者从空的缓冲区中获取数据的情况发生。&amp;ndash; &lt;strong>同步&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>这个模型的优势在哪？&lt;/strong>
一般的结论：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>解耦生产者和消费者&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持并发&lt;/strong>：由于生产者与消费者是两个独立的并发体，他们之间是用缓冲区作为桥梁连接，生产者只需要往缓冲区里丢数据，就可以继续生产下一个数据，而消费者只需要从缓冲区了拿数据即可，这样就不会因为彼此的处理速度而发生阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持忙闲不均&lt;/strong>：当数据制造快的时候，消费者来不及处理，未处理的数据可以暂时存在缓冲区中。 等生产者的制造速度慢下来，消费者再慢慢处理掉。这平衡了生产和消费速率&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>高效&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里重点说说&lt;strong>高效&lt;/strong>，生产者消费者模型高效在哪？注意：前面提到3种关系都包含&lt;strong>互斥&lt;/strong>，互斥决定了在共享资源中是串行访问，串行访问一点也不高效。&lt;/p>
&lt;p>这里高效体现在非临界区上：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于生产者：我们仅仅提到了它生产数据，它能凭空产生吗？一定需要它去获取“原材料”。因此在&lt;strong>生产数据&lt;/strong>前，还有&lt;strong>获取数据&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于消费者：前文我们指的消费，仅仅表示它把数据拿走了，但它拿走之后呢？一定要进行数据的加工和处理。因此在&lt;strong>消费数据&lt;/strong>后，还有&lt;strong>数据的加工和处理&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411093644199.png"
width="377"
height="190"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411093644199_hu_b40d74e9c5dcc53.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411093644199_hu_184c94b08b8377f7.png 1024w"
loading="lazy"
alt="image-20250411093644199"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>临界区的代码是串行的，谈不上高效，但是生产者和消费者的非临界区是可以&lt;strong>并发&lt;/strong>访问。而&lt;strong>非临界区的并发访问&lt;/strong>才是生产者消费者模型高效的部分。&lt;/p>
&lt;h4 id="基于阻塞队列的生产消费模型">基于阻塞队列的生产消费模型
&lt;/h4>&lt;p>在多线程编程中阻塞队列(Blocking Queue)是一种常用于实现生产者和消费者模型的数据结构。其与普通的队列区别：当队列为空时，从队列获取元素的操作将会被阻塞，直到队列中被放入了元素；当队列满时，往队列里存放元素的操作也会被阻塞，直到有元素被从队列中取出(以上的操作都是基于不同的线程来说的，线程在对阻塞队列进程操作时会被阻塞)&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411101039386.png"
width="701"
height="191"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411101039386_hu_68405d3793983161.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411101039386_hu_b5f4315d6f9b25ad.png 1024w"
loading="lazy"
alt="image-20250411101039386"
class="gallery-image"
data-flex-grow="367"
data-flex-basis="880px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;queue&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">blockqueue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">defaultnum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 加锁 - 等待 - 唤醒 - 解锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">blockqueue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">maxcap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">defaultnum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">maxcap_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maxcap&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">blockqueue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_destroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="nf">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">//为什么不用if来判断？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 消费后，唤醒生产者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">maxcap_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p_cond_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c_cond_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 生产后，唤醒消费者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxcap_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_t&lt;/span> &lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_t&lt;/span> &lt;span class="n">c_cond_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_t&lt;/span> &lt;span class="n">p_cond_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>细节：为什么在判断条件时，用while循环？
&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411095123482.png"
width="372"
height="98"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411095123482_hu_1d73dabe59f159dc.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411095123482_hu_f079c942e3cc0a6e.png 1024w"
loading="lazy"
alt="image-20250411095123482"
class="gallery-image"
data-flex-grow="379"
data-flex-basis="911px"
>&lt;/p>
&lt;p>操作系统层面的条件变量（如 &lt;code>pthread_cond_wait&lt;/code>）在实现上可能因某些原因（如信号中断或内核调度）导致线程被&lt;strong>意外唤醒&lt;/strong>，即使没有其他线程显式调用 &lt;code> pthread_cond_signal&lt;/code>。即 &lt;strong>伪唤醒&lt;/strong>&lt;/p>
&lt;p>在上面代码就会导致一个问题，同时唤醒的生产者/消费者线程可能不止一个。&lt;/p>
&lt;p>如下图：假设a是被正常唤醒，b，c是伪唤醒&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/linux-thread/image/image-20250411100504333.png"
width="1231"
height="649"
srcset="https://sfw003.github.io/p/linux-thread/image/image-20250411100504333_hu_b9967a1cf72da41e.png 480w, https://sfw003.github.io/p/linux-thread/image/image-20250411100504333_hu_1c2e3a2abe153c49.png 1024w"
loading="lazy"
alt="image-20250411100504333"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>使用while循环后，伪唤醒的b还会先判断以下&lt;code> q_.size() == maxcap_&lt;/code>&lt;/p>
&lt;h2 id="锁-">锁 *
&lt;/h2>&lt;h3 id="锁的种类">锁的种类
&lt;/h3>&lt;h4 id="互斥锁和自旋锁">互斥锁和自旋锁
&lt;/h4>&lt;p>&lt;strong>互斥锁和自旋锁是并发编程中最基础的两种锁&lt;/strong>，其核心区别在于&lt;strong>等待锁时的行为&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>互斥锁&lt;/strong>：通过&lt;strong>休眠&lt;/strong>让出CPU，减少资源占用，但引入上下文切换开销&lt;/li>
&lt;li>&lt;strong>自旋锁&lt;/strong>：通过&lt;strong>忙等待&lt;/strong>避免切换，适合短临界区，但可能浪费CPU周期&lt;/li>
&lt;/ul>
&lt;p>互斥锁加锁失败时，会从用户态陷入到内核态，让内核帮我们切换线程，虽然简化了使用锁的难
度，但是存在一定的性能开销成本。
那这个开销成本是什么呢？会有两次线程上下文切换的成本：
·当线程加锁失败时，内核会把线程的状态从「运行」状态设置为「睡眠」状态，然后把CPU切换给其
他线程运行；
·接着，当锁被释放时，之前「睡眠」状态的线程会变为「就绪」状态，然后内核会在合适的时间，把
CPU 切换给该线程运行。&lt;/p>
&lt;h4 id="读写锁">读写锁
&lt;/h4>&lt;p>读写锁由两把锁组成，读锁和写锁。它的应用场景：&lt;strong>能明确区分读操作和写操作，且读操作 多于 写操作&lt;/strong>。&lt;/p>
&lt;h3 id="死锁-">死锁 *
&lt;/h3>&lt;p>什么是死锁？比如当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成两个线程都在等待对方释放锁，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了死锁。&lt;/p>
&lt;p>&lt;strong>死锁有四个必要条件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>互斥条件&lt;/strong>：多个线程不能同时使用同一个资源。&lt;/li>
&lt;li>&lt;strong>请求与保持条件&lt;/strong>：线程因请求资源而阻塞时，对已获得的资源保持不放&lt;/li>
&lt;li>&lt;strong>不剥夺条件&lt;/strong>：线程已获得的资源，在末使用完之前，不能强行剥夺&lt;/li>
&lt;li>&lt;strong>循环等待条件&lt;/strong>：多个线程之间形成一种头尾相接的循环等待资源的关系&lt;/li>
&lt;/ul>
&lt;p>如何破坏死锁？打破4个条件的其中一个就行，最常见的就是打破&lt;strong>循环等待条件&lt;/strong>，核心就是理清&lt;strong>资源的获取和释放顺序&lt;/strong>。&lt;/p></description></item><item><title>【Qt Core 02】容器类和算法</title><link>https://sfw003.github.io/p/qt-core_02_container_and_algorithm/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-core_02_container_and_algorithm/</guid><description>&lt;blockquote>
&lt;p>以下内容基于Qt 5.15 LTS 官方文档整理&lt;/p>&lt;/blockquote>
&lt;p>Qt Core 提供多种容器类，满足不同的数据存储和操作需求。&lt;/p>
&lt;h2 id="字符串">字符串
&lt;/h2>&lt;p>Qt中与字符的核心类&lt;/p>
&lt;ul>
&lt;li>QChar：存放文本数据&lt;/li>
&lt;li>QByteArray：这个用来存放原始数据（图片、文件的二进制）&lt;/li>
&lt;li>QString：&lt;/li>
&lt;/ul>
&lt;p>QString存储一串16 位QChar，其中每个QChar对应一个&lt;strong>UTF-16&lt;/strong> 代码单元。（代码值大于65535的Unicode字符使用代理项对存储，即两个连续的QChar。&lt;/p>
&lt;p>Unicode是一种国际标准，支持当今使用的大多数书写系统。它是US-ASCIl（ANSIX3.4-1986）和Latin-1（IS08859-1）的超集，所有US-
ASCll/Latin-1字符都可以在相同的代码位置使用。&lt;/p>
&lt;p>在幕后，QString 使用隐式共享（写时复制）来减少内存使用并避免不必要的数据复制。这也有助于减少存储16 位字符而不是8 位字符的固有开销。&lt;/p>
&lt;p>除了QString之外，Qt还提供了QByteArray类来存储原始字节和传统的8位以\0&amp;rsquo;结尾的字符串。在大多数情况下，QString 是您要使用的类。它在整个QtAPI 中使用，如果您想在某个时候扩大应用程序的市场，Unicode支持可确保您的应用程序易于翻译。QByteArray适用的两种突出情况是需要存储原始二进制数据时，以及内存节省至关重要时（如在嵌入式系统中），&lt;/p>
&lt;h3 id="初始化">初始化
&lt;/h3>&lt;p>初始化QString的一种方法是将const char *传递给其构造函数。例如，以下代码创建了一个包含数据 “Hello”、大小为 5 的QString：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>QString会使用&lt;code>fromUtf8()&lt;/code>函数将const char * 数据转换为 Unicode。
在所有接受const char * 参数的QString函数中，const char * 被解释为经典的 C 风格以&amp;rsquo;\0&amp;rsquo;结尾的字符串。除非函数名明确表明采用其他编码，否则这类const char *参数都假定为 UTF-8 编码。
你也可以将字符串数据作为QChar数组提供：&lt;/p>
&lt;p>可以将字符串数据作为QChar数组提供：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QChar&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mh">0x0055&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x006e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x10e3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x03a3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="nf">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>QString会对QChar数据进行深拷贝，所以你之后修改原数据不会产生副作用。如果不想对字符数据进行深拷贝，可以使用QStringView或QString::fromRawData()。&lt;/p>
&lt;p>此时会采用原始数据，如果你仍然修改了数据，它在修改时自动创建副本（深拷贝）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QRegularExpression&lt;/span> &lt;span class="nf">pattern&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\u00A4&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">QChar&lt;/span> &lt;span class="n">unicode&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x005A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x007F&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x00A4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0060&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x1009&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0020&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0020&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qsizetype&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unicode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QChar&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QString&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fromRawData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unicode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他访问QString的数据，可以使用 operator&lt;a class="link" href="" >&lt;/a>和at()，这和c++的string使用方式一样。&lt;/p>
&lt;p>QString可以嵌入&amp;rsquo;\0&amp;rsquo;字符（QChar::Null）。size()函数始终返回整个字符串的大小，包括嵌入的&amp;rsquo;\0&amp;rsquo;字符。调用resize()函数后，新分配的字符具有未定义的值。要将字符串中的所有字符设置为特定值，可以使用fill()函数。&lt;/p>
&lt;p>你也可以将字符串字面量传递给接受QString作为参数的函数，这会调用QString(const char * )构造函数。类似地，你可以使用&lt;code>qPrintable()&lt;/code>宏将QString传递给接受const char * 参数的函数，该宏会将给定的QString作为const char *返回，这等效于调用&lt;code>&amp;lt;QString&amp;gt;.toLocal8Bit().constData()&lt;/code>。&lt;/p>
&lt;h3 id="操作字符串数据">操作字符串数据
&lt;/h3>&lt;p>QString 提供了以下用于修改字符数据的基本函数：append()（追加）、prepend()（前置添加）、insert()（插入）、replace()（替换）和remove()（删除）等等
如果你逐步构建一个 QString，并且事先大致知道该 QString 会包含多少字符，可以调用reserve()函数，让 QString 预先分配一定量的内存。你还可以调用capacity()函数来查看 QString 实际分配了多少内存。
replace()和remove()函数的前两个参数分别是开始删除的位置和应删除的字符数。如果你想将某个子字符串的所有出现都替换为另一个子字符串，可以使用带有两个参数的replace()重载函数。&lt;/p>
&lt;p>一个常见的需求是从字符串中删除空白字符（如&amp;rsquo;\n&amp;rsquo;、&amp;rsquo;\t&amp;rsquo;、&amp;rsquo; &amp;lsquo;等）。如果你想删除 QString 两端的空白字符，可以使用trimmed()函数。如果你想删除两端的空白字符，并且将字符串中多个连续的空白字符替换为单个空格字符，可以使用&lt;code>simplified()&lt;/code>函数。&lt;/p>
&lt;p>如果你想在 QString 中查找某个特定字符或子字符串的所有出现位置，可以使用indexOf()或lastIndexOf()函数。前者从给定的索引位置开始向前搜索，后者向后搜索。如果找到字符或子字符串，这两个函数都会返回其索引位置；否则，返回 -1。例如，下面是一个典型的循环，用于查找某个特定子字符串的所有出现位置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;We must be &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;, very &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;lt;b&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">qDebug&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Found &amp;lt;b&amp;gt; tag at index position&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>QString 提供了许多用于将数字转换为字符串以及将字符串转换为数字的函数。例如arg()函数、setNum()函数、number()静态函数，以及toInt()、toDouble()等类似函数。
要获取字符串的大写或小写版本，可以使用toUpper()或toLower()函数。
字符串列表由QStringList类处理。你可以使用split()函数将一个字符串拆分为字符串列表，并使用QStringList::join()函数通过一个可选的分隔符将字符串列表合并为一个字符串。你还可以使用QStringList::filter()函数从字符串列表中获取包含特定子字符串或匹配特定QRegExp（正则表达式）的字符串列表。&lt;/p>
&lt;h3 id="查询字符串数据">查询字符串数据
&lt;/h3>&lt;p>如果你想查看一个QString是否以某个特定子字符串开头或结尾，可以使用&lt;code>startsWith()&lt;/code>或&lt;code>endsWith()&lt;/code>函数。如果你只是想检查一个QString是否包含某个特定字符或子字符串，可以使用&lt;code>contains()&lt;/code>函数。如果你想知道某个特定字符或子字符串在字符串中出现的次数，可以使用&lt;code>count()&lt;/code>函数。&lt;/p>
&lt;p>要获取指向实际字符数据的指针，可以调用&lt;code>data()&lt;/code>或&lt;code>constData()&lt;/code>函数。这些函数返回一个指向QChar数据开头的指针。在对QString调用非const函数之前，该指针保证有效。&lt;/p>
&lt;h3 id="比较字符串">比较字符串
&lt;/h3>&lt;p>QStrings可以使用诸如&lt;code>operator&amp;lt;()&lt;/code>、&lt;code>operator&amp;lt;=()&lt;/code>、&lt;code>operator==()&lt;/code>、&lt;code>operator&amp;gt;=()&lt;/code>等重载运算符进行比较。请注意，这种比较完全基于字符的数字Unicode值。它速度非常快，但不符合人类的预期；在可用的情况下，&lt;code>QString::localeAwareCompare()&lt;/code>函数通常是对用户界面字符串进行排序的更好选择。&lt;/p>
&lt;p>在类Unix平台（包括Linux、macOS和iOS）上，当Qt与ICU库链接时（通常是这样），会使用其区域设置感知排序。否则，在macOS和iOS上，&lt;code>localeAwareCompare()&lt;/code>会根据“国际”偏好面板中的“排序列表顺序”设置进行比较。在没有ICU的其他类Unix系统上，比较会回退到系统库的&lt;code>strcoll()&lt;/code>函数，当&lt;code>strcoll()&lt;/code>认为字符串相等时，再回退到QString的（不区分区域设置的）比较，如上文所述。&lt;/p>
&lt;h3 id="在8位字符串和unicode字符串之间转换">在8位字符串和Unicode字符串之间转换
&lt;/h3>&lt;p>QString提供了以下三个函数，用于将字符串以QByteArray的形式返回为&lt;code>const char *&lt;/code>版本：&lt;code>toUtf8()&lt;/code>、&lt;code>toLatin1()&lt;/code>和&lt;code>toLocal8Bit()&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>&lt;code>toLatin1()&lt;/code>返回一个Latin - 1（ISO 8859 - 1）编码的8位字符串。&lt;/li>
&lt;li>&lt;code>toUtf8()&lt;/code>返回一个UTF - 8编码的8位字符串。UTF - 8是US - ASCII（ANSI X3.4 - 1986）的超集，通过多字节序列支持整个Unicode字符集。&lt;/li>
&lt;li>&lt;code>toLocal8Bit()&lt;/code>返回一个使用系统本地编码的8位字符串。&lt;/li>
&lt;/ul>
&lt;p>为了从这些编码之一进行转换，QString提供了&lt;code>fromLatin1()&lt;/code>、&lt;code>fromUtf8()&lt;/code>和&lt;code>fromLocal8Bit()&lt;/code>函数。其他编码可通过&lt;code>QTextCodec&lt;/code>类支持。&lt;/p>
&lt;p>如上文所述，QString提供了许多函数和运算符，使其与&lt;code>const char *&lt;/code>字符串的互操作变得容易。但这种功能是一把双刃剑：如果所有字符串都是US - ASCII或Latin - 1，它会使QString使用起来更方便，但始终存在从&lt;code>const char *&lt;/code>进行隐式转换或转换为&lt;code>const char *&lt;/code>时使用错误的8位编码的风险。为了最小化这些风险，你可以通过定义以下一些预处理器符号来关闭这些隐式转换：&lt;/p>
&lt;ul>
&lt;li>&lt;code>QT_NO_CAST_FROM_ASCII&lt;/code>禁用从C字符串字面量和指针到Unicode的自动转换。&lt;/li>
&lt;li>&lt;code>QT_RESTRICTED_CAST_FROM_ASCII&lt;/code>允许从C字符和字符数组进行自动转换，但禁用从字符指针到Unicode的自动转换。&lt;/li>
&lt;li>&lt;code>QT_NO_CAST_TO_ASCII&lt;/code>禁用从QString到C字符串的自动转换。&lt;/li>
&lt;/ul>
&lt;p>然后，你需要显式调用&lt;code>fromUtf8()&lt;/code>、&lt;code>fromLatin1()&lt;/code>或&lt;code>fromLocal8Bit()&lt;/code>从8位字符串构造QString，或者使用轻量级的&lt;code>QLatin1String&lt;/code>类，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QLatin1String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://www.unicode.org/&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样，你必须显式调用&lt;code>toLatin1()&lt;/code>、&lt;code>toUtf8()&lt;/code>或&lt;code>toLocal8Bit()&lt;/code>将QString转换为8位字符串。（其他编码可通过&lt;code>QTextCodec&lt;/code>类支持。）&lt;/p>
&lt;h3 id="给c程序员的注意事项">给C程序员的注意事项
&lt;/h3>&lt;p>由于C++的类型系统以及QString是隐式共享的这一事实，QStrings可能会被当作&lt;code>int&lt;/code>或其他基本类型来对待。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="n">Widget&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">boolToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;False&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>result&lt;/code>变量是一个在栈上分配的普通变量。当调用&lt;code>return&lt;/code>时，由于我们是按值返回，复制构造函数会被调用并返回字符串的一个副本。由于隐式共享，实际上并不会发生复制。&lt;/p>
&lt;h3 id="空字符串和null字符串的区别">空字符串和NULL字符串的区别
&lt;/h3>&lt;p>由于历史原因，QString区分空字符串和NULL字符串。NULL字符串是使用QString的默认构造函数或通过将&lt;code>(const char *)0&lt;/code>传递给构造函数初始化的字符串。空字符串是任何长度为0的字符串。NULL字符串总是空的，但空字符串不一定是NULL：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">isNull&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 返回true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 返回true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">isNull&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 返回false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 返回true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">isNull&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 返回false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">QString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 返回false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了&lt;code>isNull()&lt;/code>函数外，所有函数都将NULL字符串与空字符串同等对待。例如，&lt;code>toUtf8().constData()&lt;/code>会为NULL字符串返回一个指向&lt;code>'\0'&lt;/code>字符的有效指针（不是&lt;code>nullptr&lt;/code> ）。我们建议始终使用&lt;code>isEmpty()&lt;/code>函数并避免使用&lt;code>isNull()&lt;/code>。&lt;/p>
&lt;h3 id="参数格式">参数格式
&lt;/h3>&lt;p>在可以指定参数格式的成员函数（例如&lt;code>arg()&lt;/code>、&lt;code>number()&lt;/code> ）中，参数格式可以是以下之一：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>格式&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>e&lt;/code>&lt;/td>
&lt;td>格式化为`[-]9.9e[+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>E&lt;/code>&lt;/td>
&lt;td>格式化为`[-]9.9E[+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>f&lt;/code>&lt;/td>
&lt;td>格式化为&lt;code>[-]9.9&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>g&lt;/code>&lt;/td>
&lt;td>使用&lt;code>e&lt;/code>或&lt;code>f&lt;/code>格式，以更简洁者为准&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>G&lt;/code>&lt;/td>
&lt;td>使用&lt;code>E&lt;/code>或&lt;code>f&lt;/code>格式，以更简洁者为准&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>参数格式中还会指定精度。对于&lt;code>'e'&lt;/code>、&lt;code>'E'&lt;/code>和&lt;code>'f'&lt;/code>格式，精度表示小数点后的位数。对于&lt;code>'g'&lt;/code>和&lt;code>'G'&lt;/code>格式，精度表示最大有效位数（省略尾随零）。&lt;/p>
&lt;h3 id="更高效的字符串构建">更高效的字符串构建
&lt;/h3>&lt;p>许多字符串在编译时就已知。但是，简单的构造函数&lt;code>QString(&amp;quot;Hello&amp;quot;)&lt;/code>会将字符串内容视为Latin - 1并进行复制。为避免这种情况，可以使用&lt;code>QStringLiteral&lt;/code>宏在编译时直接创建所需的数据。这样，从字面量构造QString在运行时不会产生任何开销。&lt;/p>
&lt;p>一种效率稍低的方法是使用&lt;code>QLatin1String&lt;/code>。这个类包装一个C字符串字面量，在编译时预先计算其长度，因此与普通C字符串字面量相比，它可以更快地与QStrings进行比较并转换为QStrings。&lt;/p>
&lt;p>使用QString的&lt;code>+&lt;/code>运算符，可以轻松地从多个子字符串构造一个复杂的字符串。你可能经常编写这样的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">QString&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;long&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">foo&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QLatin1String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;vector&amp;lt;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">QLatin1String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;gt;::iterator&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;(&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;) 0x&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些字符串构造方式本身没有问题，但存在一些隐藏的低效之处。从Qt 4.6开始，可以消除这些问题。&lt;/p>
&lt;p>首先，多次使用&lt;code>+&lt;/code>运算符通常意味着多次内存分配。当连接n个子字符串（n &amp;gt; 2）时，可能会调用多达n - 1次内存分配器。&lt;/p>
&lt;p>在Qt 4.6中，添加了一个内部模板类&lt;code>QStringBuilder&lt;/code>以及一些辅助函数。这个类被标记为内部类，不会出现在文档中，因为不应该在代码中实例化它。它的使用是自动的，如下所述。如果你想查看它，可以在&lt;code>src/corelib/tools/qstringbuilder.cpp&lt;/code>中找到这个类。&lt;/p>
&lt;p>&lt;code>QStringBuilder&lt;/code>使用表达式模板并重新实现了&lt;code>%&lt;/code>运算符，因此当使用&lt;code>%&lt;/code>而不是&lt;code>+&lt;/code>进行字符串连接时，多个子字符串的连接将被推迟，直到最终结果即将分配给QString。此时，已知最终结果所需的内存量。然后调用一次内存分配器来获取所需的空间，并将子字符串逐个复制到其中。&lt;/p>
&lt;p>通过内联和减少引用计数（从&lt;code>QStringBuilder&lt;/code>创建的QString通常引用计数为1，而&lt;code>QString::append()&lt;/code>需要额外的测试），可以进一步提高效率。&lt;/p>
&lt;p>有两种方法可以使用这种改进的字符串构建方法。一种直接的方法是在需要使用的地方包含&lt;code>QStringBuilder&lt;/code>，并在连接字符串时使用&lt;code>%&lt;/code>运算符而不是&lt;code>+&lt;/code>运算符：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;QStringBuilder&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QStringRef&lt;/span> &lt;span class="nf">el&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QLatin1String&lt;/span> &lt;span class="nf">world&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QString&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hello&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">el&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">world&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">QChar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>QStringBuilder类则通过表达式模板和重新实现%操作符来解决这一问题。它推迟子字符串的拼接，直到确定最终结果所需内存量后，再一次性分配内存并完成拼接，同时通过内联和减少引用计数进一步提升效率。&lt;/p>
&lt;p>另一种更全局的方法，也是最方便但并非完全源兼容的方法，是在.pro文件中进行如下定义：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">DEFINES *= QT_USE_QSTRINGBUILDER
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，+操作符在任何地方都会自动像QStringBuilder的%操作符一样工作。&lt;/p>
&lt;p>如果采用cmake来管理的话则添加&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">启用 QStringBuilder 优化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">target_compile_definitions(my_app PRIVATE QT_USE_QSTRINGBUILDER)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字符串编码问题">字符串编码问题
&lt;/h3>&lt;p>在使用vs运行qt程序遇到这样的问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// vs2019 界面显示为乱码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// vs2022 直接在编译时报错：常量中有换行符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ui&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">setText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;森林是否是发顺丰砍伐&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>问题的根源：&lt;strong>纯文本文件却不会记录自己采用的编码&lt;/strong>
比如我采用UTF8编码保存文件，用某软件打开时，并不知道该用什么编码方式去打开，只能靠猜。
以 GBK 编码文件在不同软件中的表现为例：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Linux 下的 gedit：
默认仅支持 UTF-8，打开 GBK 文件会显示乱码。需通过修改 gedit 配置，将 GBK 添加到自动检测列表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Windows 记事本：
会优先尝试 UTF-8，失败后回退到本地编码（GBK），但此行为不稳定，可能误判为其他编码（如 ISO-8859-1）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>疑问：那如果我采用 UTF8 with BOM 呢？
BOM文件确实会通过文件头 EF BB BF 隐式声明编码，但此方式不被所有系统兼容。
VS编译器可以识别BOM文件，但是即使知道文件的编码方式，依然有问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">文件编码：&lt;/span>&lt;span class="n">UTF&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">BOM&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nb">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我是汉字&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">实际链路：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="mf">1.&lt;/span> &lt;span class="err">编译器按&lt;/span> &lt;span class="n">UTF&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="err">解析源码&lt;/span> &lt;span class="err">→&lt;/span> &lt;span class="s2">&amp;#34;我是汉字&amp;#34;&lt;/span> &lt;span class="err">的&lt;/span> &lt;span class="n">UTF&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="err">字节为&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xE6&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="mf">2.&lt;/span> &lt;span class="err">编译器将字符串隐式转码为本地编码（&lt;/span>&lt;span class="n">GBK&lt;/span>&lt;span class="err">）→&lt;/span> &lt;span class="err">字节变为&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">0xCE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xD2&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">结果：&lt;/span>&lt;span class="nb">str&lt;/span> &lt;span class="err">的内容是&lt;/span> &lt;span class="n">GBK&lt;/span> &lt;span class="err">编码，而非&lt;/span> &lt;span class="n">UTF&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>字符串常量会经过2次解析，原因在于 cl.exe 的 /execution-charset 默认值为本地代码页（如 GBK），导致 char* 字符串最终被转码为 GBK。&lt;/p>
&lt;p>GBK编码下的 const char * str = &amp;ldquo;我是汉字&amp;rdquo;
等价于
const char * str = &amp;ldquo;\xce\xd2\xca\xc7\xba\xba\xd7\xd6&amp;rdquo;;&lt;/p>
&lt;p>前文提到，QString 默认选择Latin-1，\xce\xd2\xca\xc7\xba\xba\xd7\xd6则会被当作Latin-1编码，再转为unicode，所以最后显示为乱码。&lt;/p>
&lt;p>&lt;strong>解决方式&lt;/strong>：核心是要告诉 QString 你的str是何种编码&lt;/p>
&lt;p>场景：UTF-8 with BOM文件，之前出错的原因是因为字符串常量会经过2次解析，我们可以使用QStringLiteral 跳过第2次解析。（这个适合静态字符串，即已经确定字符串的内容）
&lt;img src="https://sfw003.github.io/p/qt-core_02_container_and_algorithm/image/c2b2ca422f4c496f819f7a7917d1d18c.png"
width="816"
height="183"
srcset="https://sfw003.github.io/p/qt-core_02_container_and_algorithm/image/c2b2ca422f4c496f819f7a7917d1d18c_hu_2f7e5156029d3a2b.png 480w, https://sfw003.github.io/p/qt-core_02_container_and_algorithm/image/c2b2ca422f4c496f819f7a7917d1d18c_hu_da54049174d2bd38.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="445"
data-flex-basis="1070px"
>&lt;/p>
&lt;blockquote>
&lt;p>如果文件为UTF-8编码，没有BOM，上面操作则会出问题，因为没有bom，编译器不知道文件的编码方式，只能采用默认的。因此为了统一，可以开启vs编译器的 /utf8选项，此时编译器会默认采用utf-8来解码。
&lt;img src="https://sfw003.github.io/p/qt-core_02_container_and_algorithm/image/f977b34a5c044b1bb1ed9f3902b7e6e5.png"
width="818"
height="549"
srcset="https://sfw003.github.io/p/qt-core_02_container_and_algorithm/image/f977b34a5c044b1bb1ed9f3902b7e6e5_hu_d90e679978986967.png 480w, https://sfw003.github.io/p/qt-core_02_container_and_algorithm/image/f977b34a5c044b1bb1ed9f3902b7e6e5_hu_3806e7e177565f71.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>&lt;/blockquote>
&lt;p>如果需要动态转换，参考&lt;strong>在8位字符串和Unicode字符串之间转换&lt;/strong>章节&lt;/p>
&lt;h2 id="其他">其他
&lt;/h2>&lt;p>QList， QVector， QMap等等，这些去看一下成员函数，就知道如何使用了。&lt;/p>
&lt;h3 id="qvariant">QVariant
&lt;/h3>&lt;p>Qt 的容器类，我个人认为最重点的就是QString和QVariant。&lt;/p>
&lt;p>QVariant类类似于C++的联合（union）数据类型，它不仅能够保存很多Qt类型的值，包括QColor、QBrush、QFont、QPen、QRect、QString和QSize等，也能够存放Qt的容器类型的值。Qt的很多功能都是建立在QVariant基础上的，如Qt的对象属性及数据库功能等。&lt;/p>
&lt;p>之后再写&lt;/p></description></item><item><title>【Qt Core 03】事件机制</title><link>https://sfw003.github.io/p/qt-core_03_event_mechanism/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-core_03_event_mechanism/</guid><description>&lt;blockquote>
&lt;p>以下内容基于Qt 5.15 LTS 官方文档整理&lt;/p>&lt;/blockquote>
&lt;h2 id="事件驱动">事件驱动
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>事件&lt;/strong>：事件是用户和应用软件间产生的一个交互操作，由用户操作产生或者系统内部产生，通过事件循环对事件进行处理，事件也可以用来在对象间进行信息交互。&lt;/li>
&lt;li>&lt;strong>事件驱动架构&lt;/strong>(Event-Driven Architecture)是一种用于设计应用的软件架构和模型，程序的执行流由外部事件来决定
&lt;ul>
&lt;li>&lt;strong>事件队列&lt;/strong>(event queue)：接收事件的入口，存储待处理事件&lt;/li>
&lt;li>&lt;strong>分发器&lt;/strong>(event mediator)：将不同的事件分发到不同的业务逻辑单元&lt;/li>
&lt;li>&lt;strong>事件通道&lt;/strong>(event channel)：分发器与处理器之间的联系渠道&lt;/li>
&lt;li>&lt;strong>事件处理器&lt;/strong>(event processor)：实现业务逻辑，处理完成后会发出事件，触发下一步操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/bd25449331d44030a8f9dff0997be04d.png"
width="832"
height="620"
srcset="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/bd25449331d44030a8f9dff0997be04d_hu_db7c373c7b076c1e.png 480w, https://sfw003.github.io/p/qt-core_03_event_mechanism/image/bd25449331d44030a8f9dff0997be04d_hu_59adb75df97c02c3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>
事件驱动模型的特点:&lt;/p>
&lt;ul>
&lt;li>可维护性高：事件驱动模型使得应用程序的代码结构更加清晰，并且易于维护和调试。每个事件都有相应的处理函数，使得代码更加模块化&lt;/li>
&lt;li>可扩展性强：采用事件驱动模型可以方便地添加新的事件处理函数，并且可以轻松地扩展应用程序的功能。&lt;/li>
&lt;li>并发性好：事件驱动模型可以方便管理多个事件，并且可以在处理事件时执行异步操作,使得应用程序具有更好的并发性&lt;/li>
&lt;li>可移植性好：采用事件驱动模型可以使应用程序更容易地在不同的操作系统和平台上移植，从而提高了应用程序的可移植性。&lt;/li>
&lt;/ul>
&lt;h2 id="qt事件框架">Qt事件框架
&lt;/h2>&lt;p>&lt;img src="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/ad63b1a1f0f54603aaf7cf9777720e0f.png"
width="1112"
height="339"
srcset="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/ad63b1a1f0f54603aaf7cf9777720e0f_hu_6a54b5e5c5499332.png 480w, https://sfw003.github.io/p/qt-core_03_event_mechanism/image/ad63b1a1f0f54603aaf7cf9777720e0f_hu_df942e58c7580822.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="328"
data-flex-basis="787px"
>&lt;/p>
&lt;ul>
&lt;li>用户操作与 GUI 应用程序交互之后,系统内核获取用户动作，产生 OS 消息&lt;/li>
&lt;li>系统内核会将 OS 消息传递给 Qt 事件处理框架,会转换 事件对象 QEvent,并讲转换后的事件发送给QObject。&lt;/li>
&lt;li>QObject 调用 QObject::event 函数来接收事件，并分发，默认是在当前调用该事件的组件对象接收，若是该组件对象不做任何操作，则可以转给它的父对象来接收。最后会按照事件类型来调用不同的事件处理函数&lt;/li>
&lt;li>调用 事件处理函数,在事件处理函数中可进行信号的发送&lt;/li>
&lt;li>调用 槽函数(信号需要与槽函数进行关联)&lt;/li>
&lt;/ul>
&lt;h2 id="自定义事件处理">自定义事件处理
&lt;/h2>&lt;p>Qt 用户自定义处理事件方式&lt;/p>
&lt;p>按照 Qt 事件处理流程,用户自定义处理事件方式如下:&lt;/p>
&lt;ul>
&lt;li>重写特定事件函数mousePressEvent()，keyPressEvent()，paintEvent()&lt;/li>
&lt;li>重写实现 Q0bject::event0&lt;/li>
&lt;li>安装事件过滤器&lt;/li>
&lt;li>在 QApplication 上安装事件过滤器&lt;/li>
&lt;li>重新实现 QApplication 的 notify()方法&lt;/li>
&lt;/ul>
&lt;p>在实际应用的过程中,采用 重写特定事件函数 和 安装事件过滤器 的方式居多
&lt;img src="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/1866ba96870f4feb84a0b0fecf9beb8b.png"
width="1149"
height="184"
srcset="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/1866ba96870f4feb84a0b0fecf9beb8b_hu_8883731b8f9b4f58.png 480w, https://sfw003.github.io/p/qt-core_03_event_mechanism/image/1866ba96870f4feb84a0b0fecf9beb8b_hu_a7fccc7ba0325f28.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="624"
data-flex-basis="1498px"
>
其实还有一种方式：自定义事件（继承 QEvent 并发送）
原理：应用程序可通过QCoreApplication::sendEvent()和QCoreApplication::postEvent()发送自定义事件。sendEvent()会立即处理事件，返回时事件已被处理；postEvent()将事件放入队列，在 Qt 主事件循环下次运行时进行调度，且会对一些事件（如多个resize事件、paint事件）进行优化。在对象初始化期间常使用postEvent()，因为对象初始化完成后事件通常会很快被调度。创建自定义事件时，需定义大于QEvent::User的事件编号，可能还需子类化QEvent来传递特定信息。&lt;/p>
&lt;h3 id="重写特定事件函数">重写特定事件函数
&lt;/h3>&lt;p>重写特定事件函数是最常用的自定义事件处理方式，下面是案例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">CustomButton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mousePressEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QMouseEvent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 自定义处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">button&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Qt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">LeftButton&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// handle left mouse button here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">QPushButton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mousePressEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">// 调用父类的 mousePressEvent 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有1点注意：&lt;strong>在结束时需要调用父类的事件处理函数，如果是故意不写，也应该加上注释&lt;/strong>&lt;/p>
&lt;p>如果不加，会导致事件传播链中断：
Qt 的事件处理机制中，若子类重写事件函数后未调用父类实现，相当于隐式调用了 event-&amp;gt;accept()，事件将停止传播。这可能导致父组件或上层逻辑无法响应事件。
示例：若按钮被放置在父窗口的特定区域，父窗口可能依赖于事件传播实现拖拽等功能，但事件被截断后这些功能将失效。&lt;/p>
&lt;p>&lt;strong>qt的事件忽略&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">QEvent&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ignore&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 表示当前对象忽略事件，该事件会继续传递给父对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">QEvent&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">accept&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 表示事件在当前对象中已经处理，不会继续传递到父对象
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/e218c3f678d04129a71485d7e06e6d49.png"
width="662"
height="318"
srcset="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/e218c3f678d04129a71485d7e06e6d49_hu_45a95566262ea11f.png 480w, https://sfw003.github.io/p/qt-core_03_event_mechanism/image/e218c3f678d04129a71485d7e06e6d49_hu_35e352203f1ece67.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="208"
data-flex-basis="499px"
>&lt;/p>
&lt;h3 id="qt的事件过滤器">Qt的事件过滤器
&lt;/h3>&lt;ul>
&lt;li>Qt事件过滤器是一种机制，用于在Qt应用程序中拦截、处理和转发事件。&lt;/li>
&lt;li>事件过滤器的作用是在 目标对象接收事件之前，对事件进行拦截和处理。&lt;/li>
&lt;li>通过安装事件过滤器，可以对目标对象的事件进行修改、过滤、转发或者记录，这样可以很方便地实现一些自定义的功能。&lt;/li>
&lt;li>事件过滤器的优点是可以在不修改目标对象的代码的情况下，对其进行功能扩充&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/d8a6ddf1d755433ab28f9ec047334b4a.png"
width="767"
height="240"
srcset="https://sfw003.github.io/p/qt-core_03_event_mechanism/image/d8a6ddf1d755433ab28f9ec047334b4a_hu_76da61c1baf04ad3.png 480w, https://sfw003.github.io/p/qt-core_03_event_mechanism/image/d8a6ddf1d755433ab28f9ec047334b4a_hu_abe63253d6f8c452.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;p>事件过滤器的使用&lt;/p>
&lt;ol>
&lt;li>给目标对象安装过滤器,这里调用 installEventFilter 函数&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ui&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">textEdit&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">installEventFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 在父窗口中监控textEdit的事件[1](@ref)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>在事件过滤器对象中实现事件过滤器逻辑，这里需要重写 eventFilter 函数&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">Widget&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">eventFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">QEvent&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ui&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">textEdit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">QEvent&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Wheel&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 拦截滚轮事件，阻止传递
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他事件交给默认处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">QWidget&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">eventFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//return true：事件被拦截，不再传递给目标对象。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//return false：事件继续传递至目标对象或其父类
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 自定义过滤器类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">KeyMouseFilter&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">QObject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">eventFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">QEvent&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">QEvent&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">KeyPress&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QKeyEvent&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">keyEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">QKeyEvent&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">qDebug&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Key pressed:&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">keyEvent&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 拦截按键
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">QEvent&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MouseButtonPress&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">qDebug&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Mouse clicked on&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">objectName&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 安装到控件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">KeyMouseFilter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">filter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">KeyMouseFilter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ui&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lineEdit&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">installEventFilter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>【Qt 环境搭建 01】cmake搭建Qt VS2019开发环境</title><link>https://sfw003.github.io/p/qt-env-setup-01/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/qt-env-setup-01/</guid><description>&lt;h2 id="准备">准备
&lt;/h2>&lt;p>编码：vscode
debug: vs2019 + Qt vs Tools 插件
c++包管理工具：vcpkg
项目构建：cmake&lt;/p>
&lt;p>安装好上述工具后。&lt;/p>
&lt;h3 id="第一步安装qt5-库">第一步：安装Qt5 库
&lt;/h3>&lt;p>使用vcpkg&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">PS D:&lt;span class="se">\c&lt;/span>ppsoft&lt;span class="se">\v&lt;/span>cpkg&amp;gt; .&lt;span class="se">\v&lt;/span>cpkg.exe install qt5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第二步编写cmakeliststxt">第二步：编写CMakeLists.txt
&lt;/h3>&lt;p>项目结构：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">PS D:\MyProject\qt-code\Qt5Demo&amp;gt; tree /F
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">卷 系统文件 的文件夹 PATH 列表
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">卷序列号为 67C3-157C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D:.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ CMakeLists.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ main.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ mainwindow.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ mainwindow.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ mainwindow.ui
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ resource.qrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└─resource
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └─image
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考下面的案例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">cmake_minimum_required&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VERSION&lt;/span> &lt;span class="mf">3.10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">cmake版本最低3&lt;/span>&lt;span class="mf">.10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 设置CMAKE工具链
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CMAKE_TOOLCHAIN_FILE&lt;/span> &lt;span class="s">&amp;#34;D:/cppsoft/vcpkg/scripts/buildsystems/vcpkg.cmake&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 获取当前子CMake文件所在目录的完整路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">get_filename_component&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CURRENT_DIR_PATH&lt;/span> &lt;span class="s">&amp;#34;${CMAKE_CURRENT_LIST_DIR}&amp;#34;&lt;/span> &lt;span class="n">ABSOLUTE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 从完整路径中提取目录名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">get_filename_component&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CURRENT_DIR_NAME&lt;/span> &lt;span class="s">&amp;#34;${CURRENT_DIR_PATH}&amp;#34;&lt;/span> &lt;span class="n">NAME&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 设置项目名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">CURRENT_DIR_NAME&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CMAKE_CXX_STANDARD&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MSVC&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">add_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nl">Zc&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">__cplusplus&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">endif&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 自动包含当前目录
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CMAKE_INCLUDE_CURRENT_DIR&lt;/span> &lt;span class="n">ON&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 自动生成moc文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CMAKE_AUTOMOC&lt;/span> &lt;span class="n">ON&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 自动生成rcc文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CMAKE_AUTORCC&lt;/span> &lt;span class="n">ON&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 自动生成uic文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">SET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CMAKE_AUTOUIC&lt;/span> &lt;span class="n">ON&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 查找Qt5库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Qt5&lt;/span> &lt;span class="n">COMPONENTS&lt;/span> &lt;span class="n">Core&lt;/span> &lt;span class="n">Widgets&lt;/span> &lt;span class="n">Gui&lt;/span> &lt;span class="n">REQUIRED&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GLOB&lt;/span> &lt;span class="n">UI_FILES&lt;/span> &lt;span class="s">&amp;#34;${CMAKE_CURRENT_SOURCE_DIR}/*.ui&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GLOB&lt;/span> &lt;span class="n">RCC_FILES&lt;/span> &lt;span class="s">&amp;#34;${CMAKE_CURRENT_SOURCE_DIR}/*qrc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GLOB&lt;/span> &lt;span class="n">HEADER_FILES&lt;/span> &lt;span class="s">&amp;#34;${CMAKE_CURRENT_SOURCE_DIR}/*.h&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;${CMAKE_CURRENT_BINARY_DIR}/*.h&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GLOB&lt;/span> &lt;span class="n">CPP_FILES&lt;/span> &lt;span class="s">&amp;#34;${CMAKE_CURRENT_SOURCE_DIR}/*.cpp&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">qt5_wrap_ui&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UI_HEADERS&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">UI_FILES&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">source_group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Form Files&amp;#34;&lt;/span> &lt;span class="n">FILES&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">UI_FILES&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">source_group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Resource Files&amp;#34;&lt;/span> &lt;span class="n">FILES&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">RCC_FILES&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># win32表示关闭控制台窗口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">PROJECT_NAME&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">WIN32&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">HEADER_FILES&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">CPP_FILES&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">UI_FILES&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">RCC_FILES&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 链接库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">PROJECT_NAME&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Qt5&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Widgets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Qt5&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Core&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Qt5&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Gui&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第三步编写批处理文件">第三步：编写批处理文件
&lt;/h3>&lt;p>编写好CMakeLists.txt后可以使用cmake构建，但为了更方便控制，我们可以再编写一个批处理文件来运行cmake命令
案例：这里call后需要改为你的vs2019的vcvarsamd64_x86.bat路径&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mkdir&lt;/span> &lt;span class="n">build&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">build&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">call&lt;/span> &lt;span class="s">&amp;#34;C:\Program Files (x86)\Microsoft Visual Studio&lt;/span>&lt;span class="se">\201&lt;/span>&lt;span class="s">9\Professional\VC\Auxiliary\Build&lt;/span>&lt;span class="se">\v&lt;/span>&lt;span class="s">cvarsamd64_x86.bat&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">G&lt;/span> &lt;span class="s">&amp;#34;Visual Studio 16 2019&amp;#34;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="n">x64&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">DCMAKE_BUILD_TYPE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Debug&lt;/span> &lt;span class="p">..&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="p">..&lt;/span>&lt;span class="o">/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pause&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行批处理文件后，便可以再build目录下找到 .sln （vs工程）
这里打开后可能还需要将项目设置为启动项。
&lt;img src="https://sfw003.github.io/p/qt-env-setup-01/image/36bc970b270a4a0eab3f2e0db7ee847b.png"
width="531"
height="513"
srcset="https://sfw003.github.io/p/qt-env-setup-01/image/36bc970b270a4a0eab3f2e0db7ee847b_hu_e277951e000b238c.png 480w, https://sfw003.github.io/p/qt-env-setup-01/image/36bc970b270a4a0eab3f2e0db7ee847b_hu_b6d20a577f36efc.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="248px"
>
到这里一个Qt 工程就创建好了。&lt;/p>
&lt;h2 id="其他">其他
&lt;/h2>&lt;h3 id="配置qt-vs-tools">配置Qt VS Tools
&lt;/h3>&lt;p>再vs2019扩展商店里搜索Qt，下载下面这个插件（如果没有魔法，连不上扩展商店，找其他方式下载）
&lt;img src="https://sfw003.github.io/p/qt-env-setup-01/image/1dc9b157a6c042d784e208ea7215077d.png"
width="940"
height="289"
srcset="https://sfw003.github.io/p/qt-env-setup-01/image/1dc9b157a6c042d784e208ea7215077d_hu_aea772e243b687e8.png 480w, https://sfw003.github.io/p/qt-env-setup-01/image/1dc9b157a6c042d784e208ea7215077d_hu_4927b4e18fa856cb.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="325"
data-flex-basis="780px"
>
点击Qt VS Tools的options
&lt;img src="https://sfw003.github.io/p/qt-env-setup-01/image/1f2993de38cf41748eb2663fc84fe4be.png"
width="527"
height="231"
srcset="https://sfw003.github.io/p/qt-env-setup-01/image/1f2993de38cf41748eb2663fc84fe4be_hu_b4d10cce438c5540.png 480w, https://sfw003.github.io/p/qt-env-setup-01/image/1f2993de38cf41748eb2663fc84fe4be_hu_841deb606fef185d.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="547px"
>
将这些选项设为true（如果你之后不想使用Qt Designer也可以不使用）
&lt;img src="https://sfw003.github.io/p/qt-env-setup-01/image/5e9716a4f6994fb6b3f79c18c11441fa.png"
width="455"
height="231"
srcset="https://sfw003.github.io/p/qt-env-setup-01/image/5e9716a4f6994fb6b3f79c18c11441fa_hu_17ca08be41836025.png 480w, https://sfw003.github.io/p/qt-env-setup-01/image/5e9716a4f6994fb6b3f79c18c11441fa_hu_e3a47116a8d1962c.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/p>
&lt;p>此时便可以使用Qt Designer打开 .ui 文件
（如果打开失败，原因估计是找不到Qt Desinger，右键 &amp;ndash;&amp;gt; 打开方式，自己配置一个Qt Desinger，这里是Qt Desinger需要自己去官网或其他地方下载）
&lt;img src="https://sfw003.github.io/p/qt-env-setup-01/image/07c4407f00a84a18b78219c8b19abd7a.png"
width="504"
height="98"
srcset="https://sfw003.github.io/p/qt-env-setup-01/image/07c4407f00a84a18b78219c8b19abd7a_hu_fb40d7e690ae6d6c.png 480w, https://sfw003.github.io/p/qt-env-setup-01/image/07c4407f00a84a18b78219c8b19abd7a_hu_2d27148e6ab03327.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="514"
data-flex-basis="1234px"
>&lt;/p>
&lt;h3 id="qt-源码调试配置">qt 源码调试配置
&lt;/h3>&lt;p>在开发过程中，如果想通过断点进入到 qt 源码中，我们可以配置pdb文件。&lt;/p>
&lt;blockquote>
&lt;p>PDB文件（Program Database File）是Microsoft Visual Studio编译生成的调试信息文件，主要用于存储程序的符号信息（如函数名、变量名、行号等），使调试器能将机器代码与源代码对应，从而辅助开发人员定位问题。&lt;/p>&lt;/blockquote>
&lt;p>右键点击vs 2019 解决方案 进入属性中,添加相应的源码路径&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-env-setup-01/image/254b47079ce04f22bcd8eda084006fd2.png"
width="1172"
height="803"
srcset="https://sfw003.github.io/p/qt-env-setup-01/image/254b47079ce04f22bcd8eda084006fd2_hu_307bf76f84dcd7ed.png 480w, https://sfw003.github.io/p/qt-env-setup-01/image/254b47079ce04f22bcd8eda084006fd2_hu_ee6c392abfa69ee3.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="350px"
>
然后设置pdb文件，pdb文件需要使用Debug编译生成。由于我们使用vcpkg安装了qt5，它已经生成了pdb文件&lt;/p>
&lt;p>路径：D:\cppsoft\vcpkg\installed\x64-windows\debug\bin
点击工具 &amp;ndash;&amp;gt; 选项 &amp;ndash;&amp;gt; 调试 &amp;mdash;&amp;gt; 符号&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/qt-env-setup-01/image/ef43e4f01c6f492db202d37232683393.png"
width="1302"
height="1067"
srcset="https://sfw003.github.io/p/qt-env-setup-01/image/ef43e4f01c6f492db202d37232683393_hu_176799270869bc66.png 480w, https://sfw003.github.io/p/qt-env-setup-01/image/ef43e4f01c6f492db202d37232683393_hu_e196a8d7162c8911.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="292px"
>&lt;/p>
&lt;p>到这里就可以通过断点进入源码。&lt;/p>
&lt;h2 id="疑问">疑问
&lt;/h2>&lt;h3 id="初始的ui-qrc文件如何生成">初始的.ui, .qrc文件如何生成？
&lt;/h3>&lt;p>Qt Creator 左上角新建 .ui文件，qrc同理使用 Qt Resource Editor&lt;/p>
&lt;p>当然可以自己手动编写ui文件&lt;/p></description></item><item><title>Hugo建站教程</title><link>https://sfw003.github.io/p/blog_hugo-series_part1/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/blog_hugo-series_part1/</guid><description>&lt;h2 id="设置github-action">设置github action
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>远程新建发布仓库，命名为：username.github.io。这里的username是github的用户名，必须保持一致！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置hugo.yaml&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">baseurl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://sfw003.github.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>one thread one loop reactor-server</title><link>https://sfw003.github.io/p/one-thread-one-loop-reactor-server/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/one-thread-one-loop-reactor-server/</guid><description>&lt;p>&lt;a class="link" href="https://gitee.com/sfw003/reactor-server" target="_blank" rel="noopener"
>one thread one loop reactor-server&lt;/a>&lt;/p></description></item><item><title>传输层</title><link>https://sfw003.github.io/p/transport-layer/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/transport-layer/</guid><description>&lt;h2 id="传输层">传输层
&lt;/h2>&lt;img src="image/image-20240527151114201.png" alt="image-20240527151114201" style="zoom: 67%;" />
&lt;h2 id="端口号">端口号
&lt;/h2>&lt;p>端口的由来：&lt;/p>
&lt;p>在操作系统中，不同的进程是通过进程标识符(pid)进行区分。不同的操作系统使用的pid的格式不尽相同，但在网络里我们需要采用统一的格式进行区分。因此端口号诞生了。它采用统一的格式来标识进程。&lt;/p>
&lt;p>端口号的格式：TCP/IP： 16bit位的正整数&lt;/p>
&lt;p>c++：&lt;code>uint16_t&lt;/code>&lt;/p>
&lt;p>在TCP/IP协议中, 用 &amp;ldquo;源IP&amp;rdquo;, &amp;ldquo;源端口号&amp;rdquo;, &amp;ldquo;目的IP&amp;rdquo;, &amp;ldquo;目的端口号&amp;rdquo;, &amp;ldquo;协议号&amp;rdquo; 这样一个五元组来标识一个通信。&lt;/p>
&lt;h3 id="端口的分类">端口的分类
&lt;/h3>&lt;p>服务端使用的端口号&lt;/p>
&lt;ul>
&lt;li>
&lt;p>熟知端口号: 里面一些端口固定绑定某些应用程序：1-1023&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">应用程序&lt;/th>
&lt;th style="text-align: center">HTTP&lt;/th>
&lt;th style="text-align: center">SSH&lt;/th>
&lt;th style="text-align: center">FTP&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">端口号&lt;/td>
&lt;td style="text-align: center">80&lt;/td>
&lt;td style="text-align: center">22&lt;/td>
&lt;td style="text-align: center">21&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>登记端口号：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端端口号：49152-65535，客户端运行时，操作系统动态绑定，通信时自动绑定，通信结束自动回收&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="端口号的理解">端口号的理解
&lt;/h3>&lt;p>传输层的协议由TCP/UDP，这里2个协议能公用一个端口号？&lt;strong>可以&lt;/strong>&lt;/p>
&lt;p>首先我们要理解端口号对于传输层的作用：区分同一个主机上不同应用程序的数据包&lt;/p>
&lt;p>当主机收到一个IP数据包，根据IP数据包里的协议号分辨是TCP还是UDP，然后根据这一信息，交给系统中的TCP或UDP模块进行处理，然后TCP或UDP模块再端口号转发给对应的应用程序。&lt;/p>
&lt;h2 id="udpuser-datagram-protocol">UDP(user datagram protocol)
&lt;/h2>&lt;p>用户数据报协议&lt;/p>
&lt;h3 id="udp特点">UDP特点：
&lt;/h3>&lt;ul>
&lt;li>无连接&lt;/li>
&lt;li>不可靠，尽最大努力交付，因此数据可能丢失、乱序&lt;/li>
&lt;li>面向&lt;strong>数据报&lt;/strong>，每次读取都是完整的报文，且发多少个数据报，就要收到多少个数据报&lt;/li>
&lt;li>&lt;strong>UDP没有拥塞控制&lt;/strong>，因此网络拥塞不会降低发送速率&lt;/li>
&lt;li>UDP支持一对一，一对多，多对一和多对多通信&lt;/li>
&lt;li>UDP首部开销小：8字节&lt;/li>
&lt;li>UDP是&lt;strong>全双工&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="udp缓存区">UDP缓存区
&lt;/h3>&lt;ul>
&lt;li>UDP没有真正意义上的 &lt;strong>发送缓冲区&lt;/strong>. 调用sendto会直接交给内核, 由内核将数据传给网络层协议进行后&lt;/li>
&lt;/ul>
&lt;p>续的传输动作;&lt;/p>
&lt;ul>
&lt;li>UDP具有接收缓冲区. 但是这个接收缓冲区不能保证收到的UDP报的顺序和发送UDP报的顺序一致; 如果&lt;/li>
&lt;/ul>
&lt;p>缓冲区满了, 再到达的UDP数据就会被丢弃，而且也不会通知你。&lt;/p>
&lt;h3 id="udp格式">UDP格式
&lt;/h3>&lt;ul>
&lt;li>源端口号（选用）：在需要对方回信时选用，不需要则全0&lt;/li>
&lt;li>目的端口号：终点交付报文时必用&lt;/li>
&lt;li>长度：整个报文长度(大小), 最小为8字节&lt;/li>
&lt;li>校验：检查报文传输中是否损坏&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/transport-layer/image/image-20240508195906910.png"
width="970"
height="364"
srcset="https://sfw003.github.io/p/transport-layer/image/image-20240508195906910_hu_a19907947e20e858.png 480w, https://sfw003.github.io/p/transport-layer/image/image-20240508195906910_hu_856ff1d29ad6056f.png 1024w"
loading="lazy"
alt="image-20240508195906910"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>如果我们需要传输的数据超过64K, 2^16bit, 则需要手动拆解数据。&lt;/p>
&lt;h3 id="udp的应用场景">UDP的应用场景
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>NFS: 网络文件系统&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TFTP: 简单文件传输协议&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DHCP: 动态主机配置协议&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BOOTP: 启动协议(用于无盘设备启动)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DNS: 域名解析协议&lt;/p>
&lt;/li>
&lt;li>
&lt;p>直播，视频&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="udp的使用">UDP的使用
&lt;/h3>&lt;p>在Linux系统中，对UDP头部的定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">udphdr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__be16&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 源端口 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__be16&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 目标端口 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__be16&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* UDP数据包长度 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__sum16&lt;/span> &lt;span class="n">check&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 校验和 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对UDP的缓存区的定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 下一个缓冲区 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 上一个缓冲区 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 缓冲区链表 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sk&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 相关的套接字 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 数据指针 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 数据长度 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 数据部分长度 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">truesize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* 真实大小 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">udphdr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">udp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* UDP头指针 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 其他成员 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="tcptransmission-control-protocol">TCP(Transmission Control Protocol)
&lt;/h2>&lt;p>传输控制协议&lt;/p>
&lt;h3 id="tcp的特点">TCP的特点
&lt;/h3>&lt;ul>
&lt;li>基于连接&lt;/li>
&lt;li>可靠交付（无差错，不丢失，不重复）&lt;/li>
&lt;li>面向字节流&lt;/li>
&lt;li>全双工&lt;/li>
&lt;li>一对一通信&lt;/li>
&lt;/ul>
&lt;h3 id="tcp的格式">TCP的格式
&lt;/h3>&lt;p>TCP的数据我们称为数据段（报文段）&lt;/p>
&lt;p>注：同一份数据，在传输层称为数据段，网络层称为数据包，数据链路层称为数据帧&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/transport-layer/image/image-20240510085136785.png"
width="1008"
height="644"
srcset="https://sfw003.github.io/p/transport-layer/image/image-20240510085136785_hu_cb687bae5397bcd1.png 480w, https://sfw003.github.io/p/transport-layer/image/image-20240510085136785_hu_39112993b0cc61b3.png 1024w"
loading="lazy"
alt="image-20240510085136785"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>源/目的端口号: 表示数据是从哪个进程来, 到哪个进程去;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>32位序号/32位确认号: 保障有序性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>4位TCP报头长度: 表示该TCP头部有多少个32位bit(有多少个4字节); 所以TCP头部最大长度是15 * 4 = 60&lt;/p>
&lt;/li>
&lt;li>
&lt;p>6位标志位:TCP报文是有类型的，比如一个TCP报文可能是通信报文，也可以是建立连接的报文，也可以是关闭连接的报文，因此需要用标志来区分。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​ URG: 紧急指针是否有效&lt;/p>
&lt;p>​ ACK: 确认号是否有效，当该报文是应答类型的报文，该标志置1&lt;/p>
&lt;p>​ PSH: 提示接收端应用程序立刻从TCP缓冲区把数据读走&lt;/p>
&lt;p>​ RST: 对方要求重新建立连接; 我们把携带RST标识的称为&lt;strong>复位报文段&lt;/strong>&lt;/p>
&lt;p>​ SYN: 请求建立连接; 我们把携带SYN标识的称为&lt;strong>同步报文段&lt;/strong>&lt;/p>
&lt;p>​ FIN: 通知对方, 本端要关闭了 , 我们称携带FIN标识的为&lt;strong>结束报文段&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>16位窗口大小: 16位窗口大小最大为2^16-1 = 65532 字节&lt;/li>
&lt;li>16位校验和: 发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP首部, 也包含TCP数据部分.&lt;/li>
&lt;li>16位紧急指针: 标识哪部分数据是紧急数据。只有当URG标志为1，才有效。紧急指针的本质是紧急数据在TCP报文里的偏移量。&lt;/li>
&lt;li>40字节头部选项: 暂时忽略;&lt;/li>
&lt;/ul>
&lt;h3 id="tcp的连接管理">TCP的连接管理
&lt;/h3>&lt;p>TCP建立连接，需要进行3次握手和4次挥手&lt;/p>
&lt;h4 id="3次握手和4次挥手">3次握手和4次挥手
&lt;/h4>&lt;img src="image/image-20240513184431231.png" alt="image-20240513184431231" style="zoom: 80%;" />
&lt;h4 id="为什么是3次握手1次2次为什么不行">为什么是3次握手？1次，2次为什么不行？
&lt;/h4>&lt;p>3次握手的目的：&lt;strong>确认双方的通信能力和可达性&lt;/strong>，&lt;strong>同步双方的序列号&lt;/strong>&lt;/p>
&lt;p>​ 第一次：客户端发送报文给服务器，服务器接受到报文：服务器知道客户端&lt;strong>发送&lt;/strong>能力正常&lt;/p>
&lt;p>​ 第二次：服务器做出应答，客户端接受到报文：客户端知道服务器的&lt;strong>接受&lt;/strong>和&lt;strong>发送&lt;/strong>能力正常&lt;/p>
&lt;p>​ 第三次：客户端做出应答，服务器接受到报文：服务器知道客户端的&lt;strong>接受&lt;/strong>能力正常&lt;/p>
&lt;p>但是这个回答是比较片面的，RFC 793：&lt;strong>首要原因是为了防止旧的重复连接初始化造成混乱。&lt;/strong>&lt;/p>
&lt;p>例：在网络拥堵情况下，客户端连续发送多次SYN建立连接的报文，3次握手可以防止历史连接的干扰。如下图：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/transport-layer/image/image-20250411143924451.png"
width="493"
height="631"
srcset="https://sfw003.github.io/p/transport-layer/image/image-20250411143924451_hu_b34de89c2fb528c5.png 480w, https://sfw003.github.io/p/transport-layer/image/image-20250411143924451_hu_489009027485fac.png 1024w"
loading="lazy"
alt="image-20250411143924451"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="187px"
>&lt;/p>
&lt;p>2次握手为什么解决不了上面的情况，原因在于：服务端没有中间状态（SYN RCVD）给客户端来阻止历史连接。
2次握手下，服务器收到SYN，就会进入ESTABUSHED.&lt;/p>
&lt;h4 id="4次挥手能合成为3次挥手">4次挥手能合成为3次挥手？
&lt;/h4>&lt;p>问题：为什么要4次挥手，第2次挥手和第3次挥手为什么不能采用捎带应答的方式合成一次？&lt;/p>
&lt;p>答：服务器收到FIN后，会发送ACK，进入CLOSE_WAIT，CLOSE_WAIT会处理一些未来得及处理的数据，处理完成后，再发送FIN.
如果缓冲区本身没有数据需要处理，那么可以将第2次和第3次合为捎带应答 ==&amp;gt; FIN + ACK&lt;/p>
&lt;p>因此4次挥手可以合成为3次挥手&lt;/p>
&lt;h3 id="tcp的可靠传输">TCP的可靠传输
&lt;/h3>&lt;p>TCP核心是可靠传输，而可靠传输体现在3个方面：无差错，无丢失，无重复&lt;/p>
&lt;p>无差错：16位校验号&lt;/p>
&lt;p>无丢失：自动重传机制（ARQ）, 超时重传机制（Retransmission Timeout)，滑动窗口&lt;/p>
&lt;p>无重复：序列号、确认号、确认应答机制&lt;/p>
&lt;p>下面一个一个介绍：&lt;/p>
&lt;h4 id="确认应答ack机制">确认应答(ACK)机制
&lt;/h4>&lt;p>要想确定一个报文是否有效，需要对方做出应答。但应答的有效性无法验证（验证应答的有效性会陷入循环），因此我们规定&lt;strong>不用对 应答 做出 应答。对方发出应答就默认我收到了应答。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>捎带应答&lt;/strong>：多数情况下，单纯发出应答效率不高，而且根据规定，对方发出应答就默认我收到了应答。因此为了提高效率，对方发出的报文 = 应答 + 数据。&lt;/p>
&lt;img src="image/image-20240513144431282.png" alt="image-20240513144431282" style="zoom:80%;" />
&lt;h4 id="序列号sequence-number">序列号（Sequence number）
&lt;/h4>&lt;p>TCP通信时，并不是发一个，应答一个。这样效率低下。而是一次发多个数据，发送多个数据存在乱序问题，而&lt;strong>乱序&lt;/strong>是不可靠的一种。&lt;/p>
&lt;p>TCP保证有序是通过序列号来实现（TCP报文里的32位序号）。每个报文都带有序号，对方收到多个报文，会根据序号进行排序。如何理解这个序号？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>TCP是面向字节流的，因此我们可以抽象的认为TCP的缓存区是一个 &lt;strong>char类型的数组&lt;/strong>，数组的元素天然带有一个编号（数组下标）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TCP 报文头中的 32 位序号字段用于标识 TCP 连接中每个数据包的顺序。**这个序号表示了数据包中的第一个字节在整个数据流中的位置。**序号的增长是根据发送的数据量而定的，每发送一个字节，序号就增加一个。这样，接收端就可以根据序号来确定接收到的数据包的顺序，并进行重组。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>如果发送方发送了第一个TCP段，包含100字节数据，且这个TCP段的序列号为1000。&lt;/li>
&lt;li>接下来发送第二个TCP段时，它的序列号将是1100（1000 + 100），因为第一个段包含了100个字节。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>初始的序列号如何生成？&lt;/strong>&lt;/p>
&lt;p>起始ISN是基于时钟的，每4微秒+1，转一圈要4.55个小时。
RFC793提到&lt;/p>
&lt;p>​ 初始化序列号ISN随机生成算法：ISN = M + F(localhost,localport,remotehost,remoteport)。&lt;/p>
&lt;p>M是一个计时器，这个计时器每隔4微秒加1。&lt;/p>
&lt;p>F是一个Hash 算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证 Hash 算法不能被外部轻易推算得出，用MD5算法是一个比较好的选择。
可以看到，随机数是会基于时钟计时器递增的，基本不可能会随机成一样的初始化序列号。&lt;/p>
&lt;h4 id="确认号">确认号
&lt;/h4>&lt;p>接受方收到一个序列号为&lt;strong>N&lt;/strong>报文后，需要应答。该应答需要告诉对方，自己接受到了序号为&lt;strong>N&lt;/strong>，因此要返回一个序号为&lt;strong>M&lt;/strong>确认序号，**规定：确认序号 = 最后一个已成功接收的数据字节的序列号 + 1， 即 M = N+1 **。通知发送方可以从M处开始发数据了。&lt;/p>
&lt;p>当发送方收到序号为&lt;strong>M&lt;/strong>的应答后，&lt;strong>规定：发送方可以认为小于序号M的所有报文，接受方全部收到&lt;/strong>。这样，我们可以允许少量应答丢失。&lt;/p>
&lt;img src="image/image-20240513152659063.png" alt="image-20240513152659063" style="zoom:67%;" />
&lt;p>那为什么一个报文同时带有确认号和序列号？确认号 &amp;ndash; 应答， 序列号 &amp;ndash; 数据，由于存在&lt;strong>捎带应答&lt;/strong>的情况，一个报文即是应答又是数据，因此需要同时带上确认号和序列号。&lt;/p>
&lt;h4 id="流量控制">流量控制
&lt;/h4>&lt;p>接收端处理数据的速度是有限的. 如果发送端发的太快, 导致接收端的缓冲区被打满, 这个时候如果发送端继续发送,就会造成丢包, 继而引起丢包重传等等一系列连锁反应. 因此TCP支持根据接收端的处理能力, 来决定发送端的发送速度. 这个机制就叫做&lt;strong>流量控制&lt;/strong>(Flow Control);&lt;/p>
&lt;p>流量控制是通过接收端抑制发送端发送数据的速率，以使接收端来得及接收。是点对点通信量的控制，是个端到端的问题。&lt;/p>
&lt;p>流量控制的手段：滑动窗口&lt;/p>
&lt;img src="image/image-20240515165815537.png" alt="image-20240515165815537" style="zoom:67%;" />
&lt;ul>
&lt;li>
&lt;p>接收端将自己可以接收的缓冲区大小放入 TCP 首部中的 &amp;ldquo;窗口大小&amp;rdquo; 字段, 通过ACK端通知发送端;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>窗口大小字段越大, 说明网络的吞吐量越高;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接收端一旦发现自己的缓冲区快满了, 就会将窗口大小设置成一个更小的值通知给发送端;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发送端接受到这个窗口之后, 就会减慢自己的发送速度;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果接收端缓冲区满了, 就会将窗口置为0; 这时发送方不再发送数据, 但是需要定期发送一个窗口探测数据段, 使接收端把窗口大小告诉发送端.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>滑动窗口&lt;/strong>&lt;/p>
&lt;p>刚才我们讨论了确认应答策略, 对每一个发送的数据段, 都要给一个ACK确认应答. 收到ACK后再发送下一个数据段.&lt;/p>
&lt;p>这样做有一个比较大的缺点, 就是性能较差. 尤其是数据往返的时间较长的时候。因此为了提高效率，我们需要一次发送多段报文，而TCP使用&lt;strong>滑动窗口&lt;/strong>来管理多段数据的发送。&lt;/p>
&lt;p>&lt;strong>窗口越大, 网络吞吐量就越大, 传输效率就越高.&lt;/strong>&lt;/p>
&lt;p>问题：滑动窗口在哪里？发送缓存区的一部分&lt;/p>
&lt;p>滑动窗口将发送缓存区分为了3部分：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/transport-layer/image/wps2.jpg"
width="805"
height="287"
srcset="https://sfw003.github.io/p/transport-layer/image/wps2_hu_cca9911ecb8ecac4.jpg 480w, https://sfw003.github.io/p/transport-layer/image/wps2_hu_18a72571f48f7460.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="673px"
>&lt;/p>
&lt;p>具体如下：&lt;/p>
&lt;img src="image/image-20240515155939215.png" alt="image-20240515155939215" style="zoom: 50%;" />
&lt;p>滑动窗口如何解决丢包问题？&lt;/p>
&lt;ol>
&lt;li>ACK丢了&lt;/li>
&lt;/ol>
&lt;img src="image/image-20240515163846423.png" alt="image-20240515163846423" style="zoom:67%;" />
&lt;p>根据确认序号的定义：该序号之前的数据已经全部接受。&lt;/p>
&lt;p>因此少量的丢包不会影响。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>数据包丢了&lt;/p>
&lt;img src="image/image-20240515164254088.png" alt="image-20240515164254088" style="zoom:67%;" />
&lt;/li>
&lt;/ol>
&lt;p>现在：发送方：1000 2000 3000 4000 其中2000丢了 接受方没有接受到2000，但接受到了3000 4000，但根据确认序列号的定义，接受方只能发送ACK = 1001&lt;/p>
&lt;h4 id="拥塞控制">&lt;strong>拥塞控制&lt;/strong>
&lt;/h4>&lt;p>虽然TCP有了滑动窗口这个大杀器, 能够高效可靠的发送大量的数据. 但是如果在刚开始阶段就发送大量的数据, 仍然可能引发问题. 因为网络上有很多的计算机, 可能当前的网络状态就已经比较拥堵. 在不清楚当前网络状态下, 贸然发送大量的数据,是很有可能引起雪上加霜的. 因此TCP引入了&lt;strong>拥塞控制&lt;/strong>。&lt;/p>
&lt;p>拥塞控制的目的是防止过多的数据注入到网络中，避免网络中的路由器或链路过载。是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。&lt;/p>
&lt;img src="image/image-20240515170711380.png" alt="image-20240515170711380" style="zoom:67%;" />
&lt;p>TCP 进行拥塞控制的算法有四种&lt;/p>
&lt;ul>
&lt;li>慢开始（slow-start)&lt;/li>
&lt;li>拥塞避免(congestion avoidance)&lt;/li>
&lt;li>快重传(fast retransmit)&lt;/li>
&lt;li>快恢复(fast recovery)&lt;/li>
&lt;/ul>
&lt;p>此外引入2个概念：&lt;strong>拥塞窗口&lt;/strong>(&lt;code>cwnd：congestion window&lt;/code>)和&lt;strong>慢开始门限&lt;/strong> (&lt;code>ssthresh&lt;/code>)&lt;/p>
&lt;p>拥塞窗口：初始为1，根据拥塞控制算法进行修改，它的作用：16位窗口大小 = min(cwnd, rwnd)&lt;/p>
&lt;p>慢开始门限：为了防止拥塞窗口 cwnd 增长过大引起网络拥塞，还需要设置一个慢开始门限。具体来说，它用来控制什么情况下执行哪一种拥塞控制算法。&lt;/p>
&lt;p>算法思想如下：cwnd 初始置1&lt;/p>
&lt;ol>
&lt;li>
&lt;p>刚开始执行&lt;strong>慢开始算法&lt;/strong>，cwnd成指数增长&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当cwnd &amp;gt; ssthresh，执行&lt;strong>拥塞避免算法&lt;/strong>（特殊情况：cwnd == ssthresh，执行慢开始、拥塞避免都可以），开始进行线性增长&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当出现下面2种情况：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>情况1：&lt;strong>超时&lt;/strong>，发送方长时间未收到接受方的ACK，判定为&lt;strong>网络拥塞&lt;/strong>。则cwnd置1，ssthresh变为超时时的cwnd的一半。进入慢开始阶段&lt;/p>
&lt;img src="image/image-20240618144123833.png" alt="image-20240618144123833" style="zoom: 67%;" />
&lt;/li>
&lt;li>
&lt;p>情况2：&lt;strong>快重传&lt;/strong>，发送方收到接受方3个相同的ACK。则cwnd == ssthresh == 快重传时cwnd的一半，&lt;strong>进入快恢复阶段&lt;/strong>&lt;/p>
&lt;img src="image/image-20240618144258465.png" alt="image-20240618144258465" style="zoom:67%;" />
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>理解：为什么分2种情况？&lt;/p>
&lt;p>答：有时，个别报文段会在网络中意外丢失，但实际上网络并未发生拥塞。如果发送方迟迟收不到确认，就会产生超时，并误认为网络发生了拥塞。这就导致发送方错误地启动慢开始，把拥塞窗口 cwnd 又设置为 1，因而不必要地降低了传输效率。因而引入快重传算法&lt;/p>
&lt;h4 id="快重传机制">快重传机制
&lt;/h4>&lt;p>快重传算法规定，发送力只要一连收到3个重复确认，就可知道现在并未出现网络拥塞，而只是接收方少收到一个报文段 M3 ，因而立即进行重传M3 (即“快重传”)。使用快重传可以使整个网络的吞吐坟提高约 20%.&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/transport-layer/image/image-20240618151505806.png"
width="867"
height="435"
srcset="https://sfw003.github.io/p/transport-layer/image/image-20240618151505806_hu_7d0d9e3ceac3357f.png 480w, https://sfw003.github.io/p/transport-layer/image/image-20240618151505806_hu_bce21558940c282c.png 1024w"
loading="lazy"
alt="image-20240618151505806"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;h4 id="超时重传机制">超时重传机制
&lt;/h4>&lt;p>主机A发送给主机B的数据可能因为网络问题而丢失，或者主机B由于某些原因，收到了报文，但没有应答。&lt;/p>
&lt;p>如果主机A在一定时间内没有收到主机B的应答，则会重发。&lt;/p>
&lt;p>问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>主机B可能收到多个相同的报文，如何去重？ &lt;strong>根据序列号&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>“超时时间”是如何规定的？当网络良好时，超时时间太长，会导致效率低下，同理当网络不好时，超时时间太小，也会导致效率低下。&lt;/p>
&lt;p>Linux中(BSD Unix和Windows也是如此), 超时以500ms为一个单位进行控制, 每次判定超时重发的超时&lt;/p>
&lt;p>时间都是500ms的整数倍.&lt;/p>
&lt;p>如果重发一次之后, 仍然得不到应答, 等待 2*500ms 后再进行重传.&lt;/p>
&lt;p>如果仍然得不到应答, 等待 4*500ms 进行重传. 依次类推, 以&lt;strong>指数形式&lt;/strong>递增.&lt;/p>
&lt;p>累计到一定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;img src="image/image-20240513141329940.png" alt="image-20240513141329940" style="zoom: 67%;" />
&lt;h3 id="tcp异常情况分析">TCP异常情况分析
&lt;/h3>&lt;h4 id="syn洪水">SYN洪水
&lt;/h4>&lt;p>.&lt;/p></description></item><item><title>高并发内存池</title><link>https://sfw003.github.io/p/high-concurrent-memory-pool/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/high-concurrent-memory-pool/</guid><description>&lt;p>&lt;a class="link" href="https://gitee.com/sfw003/high-concurrency-memory-pool" target="_blank" rel="noopener"
>高并发内存池&lt;/a>&lt;/p></description></item><item><title>归档</title><link>https://sfw003.github.io/archives/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/archives/</guid><description/></item><item><title>内网穿透</title><link>https://sfw003.github.io/p/intranet-penetration/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/intranet-penetration/</guid><description>&lt;h2 id="一内网穿透的基本原理">一、内网穿透的基本原理
&lt;/h2>&lt;p>内网穿透的核心目标是&lt;strong>让外网设备访问内网资源&lt;/strong>，而内网设备通常位于NAT（网络地址转换）或防火墙之后，无法直接被外网访问。其原理主要分为两类：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>端口映射（NAT转发）&lt;/strong>&lt;br>
通过路由器将内网设备的某个端口映射到公网IP的指定端口，外网用户通过公网IP+端口访问内网服务。例如，将内网服务器192.168.1.100的80端口映射到公网IP的8080端口，外网访问公网IP:8080即可访问内网服务。&lt;br>
• &lt;strong>适用场景&lt;/strong>：家庭网络、小型企业等&lt;strong>有公网IP&lt;/strong>的环境。
• &lt;strong>局限性&lt;/strong>：需手动配置路由器，且依赖公网IP，若运营商未分配公网IP则无法使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代理服务器中转&lt;/strong>&lt;br>
利用第三方服务器（如花生壳、frp）作为“桥梁”，内网设备主动连接服务器建立通道，外网请求通过服务器转发至内网。例如：内网设备向服务器发送心跳包保持连接，外网用户访问服务器时，数据通过已建立的通道传输。&lt;br>
• &lt;strong>适用场景&lt;/strong>：无公网IP、需动态域名解析（DDNS）或跨运营商访问。
• &lt;strong>优势&lt;/strong>：无需公网IP，支持动态IP环境；缺点是带宽受限于中转服务器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="二实现方式对比">二、实现方式对比
&lt;/h2>&lt;h3 id="1-端口转发的操作流程基础方案">1. 端口转发的操作流程（基础方案）
&lt;/h3>&lt;p>• &lt;strong>步骤&lt;/strong>：&lt;br>
① 登录路由器管理界面（如192.168.1.1）；&lt;br>
② 找到“端口转发”或“虚拟服务器”选项；&lt;br>
③ 配置规则：内网IP、内网端口、公网端口（如将公网8080映射到内网80端口）；&lt;br>
④ 保存并重启路由器。&lt;br>
• &lt;strong>适用性&lt;/strong>：适合有公网IP且路由器支持NAT转发的场景，例如家庭NAS对外共享文件。&lt;/p>
&lt;h3 id="2-第三方工具进阶方案">2. 第三方工具（进阶方案）
&lt;/h3>&lt;p>• &lt;strong>服务器中转工具（如frp、花生壳）&lt;/strong>：&lt;br>
在公网服务器部署服务端，内网设备运行客户端，建立隧道转发请求。例如frp通过配置&lt;code>frps.ini&lt;/code>（服务端）和&lt;code>frpc.ini&lt;/code>（客户端）实现HTTP/TCP穿透。&lt;br>
• &lt;strong>优势&lt;/strong>：支持无公网IP、跨网络穿透；&lt;br>
• &lt;strong>缺点&lt;/strong>：需额外服务器资源，配置复杂度较高。&lt;/p>
&lt;p>• &lt;strong>P2P穿透（如UDP打洞）&lt;/strong>：&lt;br>
通过中间服务器协助，让两个NAT后的设备直接通信。例如：客户端A和B通过服务器交换地址信息后，尝试直接发送UDP包穿透NAT网关。&lt;br>
• &lt;strong>适用场景&lt;/strong>：视频会议、P2P下载等低延迟需求场景；&lt;br>
• &lt;strong>限制&lt;/strong>：受NAT类型影响（对称型NAT穿透难度大）。&lt;/p>
&lt;hr>
&lt;h2 id="三端口转发的局限性">三、端口转发的局限性
&lt;/h2>&lt;p>虽然端口转发是基础手段，但实际应用中存在以下问题：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>依赖公网IP&lt;/strong>：多数家庭宽带无固定公网IP，需结合DDNS（动态域名解析）。&lt;/li>
&lt;li>&lt;strong>安全性风险&lt;/strong>：直接暴露端口可能被攻击，需配合防火墙规则（如仅允许特定IP访问）。&lt;/li>
&lt;li>&lt;strong>协议兼容性&lt;/strong>：某些协议（如FTP、VoIP）需要额外处理NAT穿透逻辑。&lt;/li>
&lt;/ol></description></item><item><title>数据链路层</title><link>https://sfw003.github.io/p/data-link-layer/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/data-link-layer/</guid><description>&lt;p>了解完网络层，我们知道了数据报是如何跨网络进行传输的，数据报通过一次又一次的”跳“，最后到达目的主机。但具体的一次”跳”是怎么完成的呢？由数据链路层完成，下面介绍数据链路层。&lt;/p>
&lt;img src="image/image-20240527140508236.png" alt="image-20240527140508236" style="zoom:67%;" />
&lt;h1 id="数据链路层">数据链路层
&lt;/h1>&lt;p>&lt;strong>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>链路：网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路。&lt;/li>
&lt;li>数据链路：网络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路。&lt;/li>
&lt;/ul>
&lt;p>数据链路层在物理层提供服务的基础上向网络层提供服务。&lt;/p>
&lt;ul>
&lt;li>对上：将源自网络层来的数据&lt;strong>可靠&lt;/strong>地传输到相邻节点的目标机网络层。&lt;/li>
&lt;li>对下：加强物理层传输原始比特流的功能，将物理层提供的&lt;strong>可能出错的物理连接&lt;/strong>改造成为&lt;strong>逻辑上无差错的数据链路&lt;/strong>，使之对网络层表现为一条&lt;strong>无差错&lt;/strong>的链路。&lt;/li>
&lt;/ul>
&lt;img src="image/image-20240527151104647.png" alt="image-20240527151104647" style="zoom:67%;" />
&lt;p>数据链路层负责两个设备(同一种数据链路节点)之间进行传递。通常情况下，同一数据链接即二者处于同一局域网内，因此首先要了解局域网内是如何通信的。&lt;/p>
&lt;p>注：局域网和数据链路的关系&lt;/p>
&lt;p>虽然在许多情况下，处于同一数据链路的设备确实位于同一个局域网内，但有些网络拓扑和配置可能导致例外情况：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>虚拟局域网（VLAN）&lt;/strong>：VLAN允许在同一个物理网络基础设施上创建多个逻辑隔离的网络。不同VLAN的设备尽管连接到同一个交换机，但处于不同的逻辑数据链路和广播域中。&lt;/li>
&lt;li>&lt;strong>网桥和交换机&lt;/strong>：现代交换机能够隔离冲突域，但不隔离广播域。因此，连接到同一交换机不同端口的设备可以认为在同一数据链路上，但仍处于同一局域网中。&lt;/li>
&lt;li>&lt;strong>子网划分和路由&lt;/strong>：在一些复杂网络中，可能会通过子网划分和路由策略，使得不同子网的设备在逻辑上看似处于不同数据链路，但实际上共享同一个物理介质。&lt;/li>
&lt;/ul>
&lt;h1 id="局域网通信">局域网通信
&lt;/h1>&lt;p>局域网通信的技术：以太网，令牌环网, 无线LAN等&lt;/p>
&lt;p>下面主要介绍以太网。&lt;/p>
&lt;h2 id="以太网">以太网
&lt;/h2>&lt;p>以太网（Ethernet）是一种广泛使用的局域网（LAN）技术，用于在局域网内设备之间进行数据通信。它定义了数据帧的格式、传输协议、物理连接标准和介质访问控制方法。以太网因其高效性、可靠性和易于实现而成为最常用的有线网络技术。&lt;/p>
&lt;p>&amp;ldquo;以太网&amp;rdquo; 不是一种具体的网络, 而是一种技术标准; 既包含了数据链路层的内容, 也包含了一些物理层的内容. 例如: 规定了网络拓扑结构, 访问控制方式, 传输速率等;例如以太网中的网线必须使用双绞线; 传输速率有10M, 100M, 1000M等;&lt;/p>
&lt;p>以太网是当前应用最广泛的局域网技术; 和以太网并列的还有令牌环网, 无线LAN等;&lt;/p>
&lt;p>以太网会将网络层的IP数据报封装为以太网帧，然后进行通信。那以太网帧的格式是什么呢？&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240527100944071.png"
width="901"
height="297"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240527100944071_hu_c58901566e7d1738.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240527100944071_hu_c3fe870eab3d1b63.png 1024w"
loading="lazy"
alt="image-20240527100944071"
class="gallery-image"
data-flex-grow="303"
data-flex-basis="728px"
>&lt;/p>
&lt;h1 id="数据帧">数据帧
&lt;/h1>&lt;h2 id="封装成帧">封装成帧
&lt;/h2>&lt;p>封装成帧就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。&lt;/p>
&lt;p>首部和尾部包含许多的控制信息，他们的一个重要作用:&lt;strong>定界(确定帧的界限)。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>帧同步&lt;/strong>:接收方应当能从接收到的二进制比特流中区分出帧的起始和终止。&lt;/p>
&lt;p>&lt;strong>组帧&lt;/strong>的四种方法:&lt;/p>
&lt;ol>
&lt;li>字符计数法，&lt;/li>
&lt;li>字符(节)填充法&lt;/li>
&lt;li>零比特填充法&lt;/li>
&lt;li>违规编码法。&lt;/li>
&lt;/ol>
&lt;h2 id="透明传输">透明传输
&lt;/h2>&lt;h2 id="差错检验">差错检验
&lt;/h2>&lt;p>&lt;strong>差错的来源&lt;/strong>：&lt;/p>
&lt;p>全局性 1.由于线路本身电气特性所产生的随机噪声(热噪声)，是信道固有的，随机存在的。
解决办法:提高信噪比来减少或避免干扰。(对传感器下手)
局部性 2.外界特定的短暂原因所造成的冲击噪声，是产生差错的主要原因。
解决办法:通常利用编码技术来解决。&lt;/p>
&lt;p>&lt;strong>差错体现的方面&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240614212445396.png"
width="732"
height="304"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240614212445396_hu_caf6357be5e2873c.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240614212445396_hu_9bd02947c8a50dc1.png 1024w"
loading="lazy"
alt="image-20240614212445396"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="577px"
>&lt;/p>
&lt;p>&lt;strong>差错的检测和解决&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240614212607552.png"
width="585"
height="304"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240614212607552_hu_a7f50ecb8e9ef2af.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240614212607552_hu_9c86a92366d1752d.png 1024w"
loading="lazy"
alt="image-20240614212607552"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>&lt;strong>奇偶检验码&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240614212758854.png"
width="792"
height="227"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240614212758854_hu_f24bc300de7b42ef.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240614212758854_hu_3ad21de08f4a6041.png 1024w"
loading="lazy"
alt="image-20240614212758854"
class="gallery-image"
data-flex-grow="348"
data-flex-basis="837px"
>&lt;/p>
&lt;p>局限：奇效验码只能检测奇数个1的错误，50%&lt;/p>
&lt;p>&lt;strong>循环冗余检验&lt;/strong> CRC (Cyclic Redundancy Check)&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240614213048249.png"
width="1620"
height="454"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240614213048249_hu_c3e3533d001dd16b.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240614213048249_hu_cf430bd831e2c59.png 1024w"
loading="lazy"
alt="image-20240614213048249"
class="gallery-image"
data-flex-grow="356"
data-flex-basis="856px"
>&lt;/p>
&lt;p>举例:&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240618200921386.png"
width="1373"
height="1008"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240618200921386_hu_fc037ebb642e2c99.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240618200921386_hu_1c80afc3205ef654.png 1024w"
loading="lazy"
alt="image-20240618200921386"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>在数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到对的无差错接收，即“凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”。接收端丢弃的帧虽然曾收到了，但是最终还是因为有差错被丢弃。“凡是接收端数据链路层接收的帧均无差错”&lt;/p>
&lt;p>注意：&lt;strong>无差错 &amp;lt; 可靠传输（无差错，不丢失，不重复）&lt;/strong>&lt;/p>
&lt;h1 id="数据链路层的流量控制">数据链路层的流量控制
&lt;/h1>&lt;p>它和TCP的流量控制的区别：&lt;/p>
&lt;blockquote>
&lt;p>传输层的流量控制是 &lt;strong>端到端&lt;/strong>&lt;/p>
&lt;p>数据链路层的流量控制是 &lt;strong>点到点&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>都是通过滑动窗口来控制，但是数据链路层的滑动窗口的大小是固定的，而传输层不是固定的。&lt;/strong>&lt;/p>
&lt;p>问题：由来传输层的流量控制，为什么还需要数据链路层的流量控制？&lt;/p>
&lt;p>答：早期网络并不完善，让数据链路层进行流量控制，但现在随着技术发展，现代网络中的流量控制和错误恢复功能主要由传输层（如 TCP）来处理，而数据链路层更多地专注于差错检测和基本的帧传输。但在一些特定的网络场景中，数据链路层仍然会实现一些流量控制机制，例如：以太网流量控制，无线局域网。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240614214251461.png"
width="1514"
height="703"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240614214251461_hu_524a8de848854370.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240614214251461_hu_b446ce17f4881795.png 1024w"
loading="lazy"
alt="image-20240614214251461"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="516px"
>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240614214258539.png"
width="992"
height="328"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240614214258539_hu_60dee5979a28bfb6.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240614214258539_hu_ede8e98a17139cee.png 1024w"
loading="lazy"
alt="image-20240614214258539"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="725px"
>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240614214322961.png"
width="939"
height="229"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240614214322961_hu_4c376e3d1499decc.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240614214322961_hu_5b108d7b030cb28f.png 1024w"
loading="lazy"
alt="image-20240614214322961"
class="gallery-image"
data-flex-grow="410"
data-flex-basis="984px"
>&lt;/p>
&lt;h1 id="以太网帧mac帧">以太网帧（MAC帧）
&lt;/h1>&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240526205126623.png"
width="1016"
height="524"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240526205126623_hu_535ec7bccd0f83e7.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240526205126623_hu_ee2a59e42ff3cb49.png 1024w"
loading="lazy"
alt="image-20240526205126623"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;h1 id="mac地址">MAC地址
&lt;/h1>&lt;p>MAC地址用来识别数据链路层中相连的节点;&lt;/p>
&lt;p>长度为48位, 及6个字节. 一般用16进制数字加上冒号的形式来表示(例如: 08:00:27:03:fb:19)&lt;/p>
&lt;p>在网卡出厂时就确定了, 不能修改. mac地址通常是唯一的(虚拟机中的mac地址不是真实的mac地址, 可能会冲突; 也有些网卡支持用户配置mac地址).&lt;/p>
&lt;p>它和IP地址有什么关系？&lt;/p>
&lt;h3 id="ip地址和mac地址">IP地址和MAC地址
&lt;/h3>&lt;p>IP地址&lt;/p>
&lt;ul>
&lt;li>描述路途总体的 起点 和 终点;&lt;/li>
&lt;li>它是逻辑层面的地址&lt;/li>
&lt;/ul>
&lt;p>MAC地址&lt;/p>
&lt;ul>
&lt;li>描述的是路途上的每一个区间的起点和终点;&lt;/li>
&lt;li>它是物理层的地址&lt;/li>
&lt;/ul>
&lt;p>问题：为什么要分别用IP地址和MAC地址来作为逻辑层面和物理层面的地址，不能用MAC地址作为统一的地址吗？&lt;/p>
&lt;p>答：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>基于分层设计和职责分离的原则&lt;/strong>：计算机网络协议栈采用分层设计，每层具有不同的功能。MAC地址用于数据链路层，负责在同一局域网内传输数据包；IP地址用于网络层，负责跨网络的路由和传输。分层设计使得每层可以独立发展和优化，增强了整个网络系统的灵活性和可扩展性。&lt;/li>
&lt;li>&lt;strong>兼容性&lt;/strong>：不同的网络技术（如以太网、Wi-Fi、光纤、卫星等）都有自己独特的物理层和数据链路层协议。通过在网络层使用统一的IP地址，可以在各种不同底层技术上实现互操作性和兼容性，促进不同网络之间的无缝通信。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>我们在IP报文如果太大需要分片，这里的“大”是相对数据链路层而言，具体来说是相对于MTU&lt;/p>
&lt;h1 id="mtu">MTU
&lt;/h1>&lt;p>网络链路上的最大传输单元（MTU，Maximum Transmission Unit）：&lt;strong>不同的网络类型有不同的MTU&lt;/strong>，最常用的以太网就规定其 MTU 值是 &lt;strong>1500 字节&lt;/strong>。如果一个数据包从以太网路由到拨号链路上,数据包长度大于拨号链路的MTU了,则需要对数据包进行分片(fragmentation。&lt;/p>
&lt;p>&lt;strong>以太网帧中的数据长度规定最小46字节,最大1500字节&lt;/strong>&lt;/p>
&lt;p>注：ARP数据包的长度不够46字节,要在后面补填充位;&lt;/p>
&lt;h3 id="mtu对ip层的影响">MTU对IP层的影响
&lt;/h3>&lt;p>由于数据链路层MTU的限制, 对于较大的IP数据包要进行分包.&lt;/p>
&lt;p>将较大的IP包分成多个小包, 并给每个小包打上标签;&lt;/p>
&lt;p>每个小包IP协议头的 16位标识(id) 都是相同的;&lt;/p>
&lt;p>每个小包的IP协议头的3位标志字段中, 第2位置为0, 表示允许分片, 第3位来表示结束标记(当前是否是最&lt;/p>
&lt;p>后一个小包, 是的话置为1, 否则置为0);&lt;/p>
&lt;p>到达对端时再将这些小包, 会按顺序重组, 拼装到一起返回给传输层;&lt;/p>
&lt;p>一旦这些小包中任意一个小包丢失, 接收端的重组就会失败. 但是IP层不会负责重新传输数据;&lt;/p>
&lt;h3 id="mtu对udp和tcp的影响">MTU对UDP和TCP的影响
&lt;/h3>&lt;p>让我们回顾一下UDP协议:&lt;/p>
&lt;p>一旦UDP携带的数据超过1472(1500 - 20(IP首部) - 8(UDP首部)), 那么就会在网络层分成多个IP数据报.&lt;/p>
&lt;p>这多个IP数据报有任意一个丢失, 都会引起接收端网络层重组失败. 那么这就意味着, 如果UDP数据报在&lt;/p>
&lt;p>网络层被分片, 整个数据被丢失的概率就大大增加了.&lt;/p>
&lt;p>让我们再回顾一下TCP协议:&lt;/p>
&lt;p>TCP的一个数据报也不能无限大, 还是受制于MTU. TCP的单个数据报的最大消息长度, 称为MSS(Max Segment Size);&lt;/p>
&lt;p>TCP在建立连接的过程中, 通信双方会进行MSS协商.&lt;/p>
&lt;p>最理想的情况下, MSS的值正好是在IP不会被分片处理的最大长度(这个长度仍然是受制于数据链路层的MTU), 双方在发送SYN的时候会在TCP头部写入自己能支持的MSS值.然后双方得知对方的MSS值之后, 选择较小的作为最终MSS.&lt;/p>
&lt;p>MSS的值就是在TCP首部的40字节变长选项中(kind=2);&lt;/p>
&lt;p>如果MTU = 1500, 则max有效载荷 = 1500-20((P)) - 20(TCP) = 1460&lt;/p>
&lt;ul>
&lt;li>源地址和目的地址是指网卡的硬件地址(也叫MAC地址), 长度是48位,是在网卡出厂时固化的;&lt;/li>
&lt;li>帧协议类型字段有三种值,分别对应IP、ARP、RARP;&lt;/li>
&lt;li>数据 = &lt;strong>网络层的数据报&lt;/strong>&lt;/li>
&lt;li>帧末尾是CRC校验码&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>介绍完MAC帧，下面具体看看MAC帧是如何进行局网络通信的。&lt;/p>
&lt;h2 id="mac帧在局域网通信">MAC帧在局域网通信
&lt;/h2>&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240527102109461.png"
width="874"
height="350"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240527102109461_hu_bf84118e658cdd71.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240527102109461_hu_5cfd002508675560.png 1024w"
loading="lazy"
alt="image-20240527102109461"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>场景：主机A想发送消息给主机D&lt;/p>
&lt;p>过程：&lt;/p>
&lt;ol>
&lt;li>主机A封装好MAC帧，在目的地址填入主机D的MAC地址&lt;/li>
&lt;li>主机A将消息发送到&lt;strong>广播信道&lt;/strong>（共享信道）里，于是所有主机都会收到消息&lt;/li>
&lt;li>然后主机会在数据链路层会检测MAC帧里的&lt;strong>目的地址&lt;/strong>，如果不符合则直接丢弃，符合则向上层传递。&lt;/li>
&lt;/ol>
&lt;h4 id="碰撞冲突">碰撞冲突
&lt;/h4>&lt;p>局域网通信，一台发送的消息，其他主机都会收到。如果多台主机同时发送消息，那么消息就会产生冲突。这就是&lt;strong>碰撞冲突&lt;/strong>。&lt;/p>
&lt;p>为了减少碰撞的发生，局域网通常会采用一些措施，如使用碰撞避免算法，交换机。&lt;/p>
&lt;p>碰撞避免算法是从软件层面上&lt;/p>
&lt;p>交换机则是从硬件层面上：&lt;/p>
&lt;p>在数据链路层，主要采用2种信道：&lt;strong>广播信道&lt;/strong>和&lt;strong>点对点信道&lt;/strong>&lt;/p>
&lt;p>(l) 点对点信道。这种信道使用一对一的点对点通信方式。&lt;/p>
&lt;p>(2) 广播信道。这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。&lt;/p>
&lt;p>广播信道存在碰撞冲突问题。&lt;/p>
&lt;p>交换机(switch)：支持点对点和广播&lt;/p>
&lt;h4 id="局域网瘫痪小知识">局域网瘫痪（小知识）
&lt;/h4>&lt;p>一台主机不断发送垃圾消息到局域网内。&lt;/p>
&lt;p>前文我们了解，具体某一跳在局域网是如何进行的，下面我们从局域网道广域网来整体看待这个过程。&lt;/p>
&lt;h1 id="从局域网到广域网">从局域网到广域网
&lt;/h1>&lt;h2 id="mac帧在广域网通信">MAC帧在广域网通信
&lt;/h2>&lt;p>在网络传输的过程，MAC帧不断解包、丢弃、封包，这样每一跳就和前文描述的一样。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240527102228614.png"
width="868"
height="297"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240527102228614_hu_cb341eb51f596480.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240527102228614_hu_ae83577e1861d806.png 1024w"
loading="lazy"
alt="image-20240527102228614"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/p>
&lt;p>但现在有个问题：前文提到的局域网通信地址都是MAC地址，但实际我们在通信过程使用的是IP地址，如何理解二者在数据传输过程的关系？&lt;/p>
&lt;h2 id="arp协议">ARP协议
&lt;/h2>&lt;p>虽然我们在这里介绍ARP协议, 但是需要强调, ARP不是一个单纯的数据链路层的协议, 而是一个介于数据链路层和网络层之间的协议;&lt;/p>
&lt;h3 id="arp协议的作用">ARP协议的作用
&lt;/h3>&lt;p>&lt;strong>ARP协议建立了主机 IP地址 和 MAC地址 的映射关系.&lt;/strong>&lt;/p>
&lt;p>在网络通讯时,源主机的应用程序知道目的主机的IP地址和端口号,却不知道目的主机的硬件地址;数据包首先是被网卡接收到再去处理上层协议的,如果接收到的数据包的硬件地址与本机不符,则直接丢弃;因此在通讯前必须获得目的主机的硬件地址;&lt;/p>
&lt;img src="image/image-20240527131432082.png" alt="image-20240527131432082" style="zoom:80%;" />
&lt;p>源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);&lt;/p>
&lt;p>主机1的ARP缓存表中不存在主机2的MAC地址，所以主机1会发送ARP Request来获取目的MAC地址。
•ARP Request报文封装在以太帧里。帧头中的源MAC地址为发送端主机1的MAC地址。此时，由于主机1不知道主机2的MAC地址，所以目的MAC地址为广播地址FF-FF-FF-FF-FF-FF。
•ARP Request报文中包含发送端MAC地址、发送端IP地址、目的端MAC地址（未知）、目的端IP地址（已知），其中目的端MAC地址的值为0。ARP Request报文会在整个网络上传播，该网络中所有主机包括网关都会接收到此ARP Request报文。并对报文进行泛洪操作。&lt;/p>
&lt;p>总结：以太帧帧头中目的地址为FF-FF-FF-FF-FF-FF（广播地址）则所有端口都会接受此报文。
以太帧里封装着的ARP Request报文中目的地址为00-00-00-00-00-00 那么网络中的所有主机和网关接收到这帧数据，都会检查它的目的端IP地址字段与自身的IP地址是否匹配。如果匹配，该主机会将ARP请求报文中的发送端MAC地址和发送端IP地址信息记录到自己的ARP缓存表中，然后通过ARP Reply报文进行响应。如果不匹配，主机将不会响应此报文。&lt;/p>
&lt;p>每台主机都维护一个ARP缓存表,可以用arp -a命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240529203411211.png"
width="772"
height="238"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240529203411211_hu_2e38fa65b835e66e.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240529203411211_hu_8ec6812b9c36ee3f.png 1024w"
loading="lazy"
alt="image-20240529203411211"
class="gallery-image"
data-flex-grow="324"
data-flex-basis="778px"
>&lt;/p>
&lt;h3 id="arp数据报格式">ARP数据报格式
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/image-20240527131458233.png"
width="982"
height="190"
srcset="https://sfw003.github.io/p/data-link-layer/image/image-20240527131458233_hu_4a6b37cce41262d4.png 480w, https://sfw003.github.io/p/data-link-layer/image/image-20240527131458233_hu_f9374f13bc7077fd.png 1024w"
loading="lazy"
alt="image-20240527131458233"
class="gallery-image"
data-flex-grow="516"
data-flex-basis="1240px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>注意到源MAC地址、目的MAC地址在以太网首部和ARP请求中各出现一次,对于链路层为以太网的情况是多余的,但如果链路层是其它类型的网络则有可能是必要的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>硬件类型指链路层网络类型,1为以太网;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协议类型指要转换的地址类型,0x0800为IP地址;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>硬件地址长度对于以太网地址为6字节;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协议地址长度对于和IP地址为4字节;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>op字段为1表示ARP请求,op字段为2表示ARP应答。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/data-link-layer/image/wps2-17192977261373.jpg"
width="1517"
height="521"
srcset="https://sfw003.github.io/p/data-link-layer/image/wps2-17192977261373_hu_67f22169352f9619.jpg 480w, https://sfw003.github.io/p/data-link-layer/image/wps2-17192977261373_hu_3e5295e39ff8cf9f.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="698px"
>&lt;/p>
&lt;p>ARP请求过程：&lt;/p>
&lt;ol>
&lt;li>主机A向信道内发送APR请求，其余主机都会收到&lt;/li>
&lt;li>非目的主机，如主机c：收到ARP请求后，进行有效载荷的分离。1. 检查&lt;strong>以太网目的地址&lt;/strong>，为全F，表明是广播地址，因此需要进行处理。2. 查看帧类型，为1，传到ARP层。3. 查看op字段，为1，表示为ARP请求。 4. 查看目的IP地址，为ipB, 与主机C的ipC不同, 因此丢弃&lt;/li>
&lt;li>目的主机，如主机B：经过2的流程后，主机B需要做出ARP应答，填充格式如图。&lt;/li>
&lt;/ol>
&lt;p>ARP应答过程：&lt;/p>
&lt;ol>
&lt;li>非目的主机收到ARP应答后，在数据链路层比对目的MAC地址时，就会丢弃。&lt;/li>
&lt;li>目的主机收到ARP应答后，会生成一组 IP:MAC 的映射关系&lt;/li>
&lt;/ol>
&lt;h3 id="arp协议相关的周边问题">ARP协议相关的周边问题
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>ARP缓存为什么要有时间限制？ip:mac的映射关系可能会更改，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多次ARP请求以最新一次为准&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ARP欺骗：ARP欺骗（ARP Spoofing），也称为ARP中毒（ARP Poisoning），是一种网络攻击技术，通过发送伪造的ARP（地址解析协议）消息，使目标设备更新其ARP缓存中的IP地址与MAC地址的对应关系，从而将流量误导到攻击者的设备上。这种攻击可以导致多种安全问题，如数据窃取、中间人攻击（Man-in-the-Middle Attack）、网络瘫痪等。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>网络层</title><link>https://sfw003.github.io/p/network-layer/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/network-layer/</guid><description>&lt;h2 id="网络层网际层">网络层（网际层）
&lt;/h2>&lt;p>作用：负责跨网络传输，并在传输过程中选择最合适的路径。&lt;/p>
&lt;p>设计方案：&lt;strong>网络层要设计得尽量简单，向其上层只提供简单灵活的无连接的、尽最大努力交付的数据报服务&lt;/strong>&lt;/p>
&lt;img src="image/image-20240527151114201-17192977940315.png" alt="image-20240527151114201" style="zoom: 67%;" />
&lt;p>网络层最重要的任务是&lt;strong>路由选择和分组转发&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240522192211783.png"
width="1249"
height="469"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240522192211783_hu_e725350697868553.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240522192211783_hu_7d80478dc6c54ccd.png 1024w"
loading="lazy"
alt="image-20240522192211783"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="639px"
>&lt;/p>
&lt;p>要想将数据送到网络世界的某一台主机，首先必须要用一个&lt;strong>唯一的标识符&lt;/strong>来标识主机。网络层给出的解决方式是用&lt;strong>IP地址&lt;/strong>来区别主机。&lt;/p>
&lt;h2 id="ip地址">IP地址
&lt;/h2>&lt;p>IP地址的设计可分为两个主要版本：IPv4和IPv6。&lt;/p>
&lt;h3 id="ipv4">IPv4
&lt;/h3>&lt;h4 id="格式">格式
&lt;/h4>&lt;ul>
&lt;li>IPv4地址是32位的二进制数，通常表示为四个十进制数，即点分十进制，每个数取值范围为0到255，用点号分隔（例如：192.168.0.1）。&lt;/li>
&lt;/ul>
&lt;p>问题1：为什么设计成这样？&lt;/p>
&lt;p>以一个生活中例子来讲解：有个计院的学生，他的学号为0101，现在他捡到了一个校园卡，校园卡上标注的学号为0202。他想将校园卡交给失主，该怎么做？&lt;/p>
&lt;ol>
&lt;li>学校人那么多，不可能自己慢慢找，于是他将校园卡交给了计院的学生会&lt;/li>
&lt;li>计院的学生会首先查看学号的前2位：02，而计院学生的学号开头统一为01，因此不可能为计院的学生。于是计院学生会在学校学生会群里询问。&lt;/li>
&lt;li>经院学生会发现，02与经院学号开头匹配，表明该校园卡属于经院的学生。于是拿走了校园卡&lt;/li>
&lt;li>然后经院学生会根据学号的后两位：02，找到了失主。&lt;/li>
&lt;/ol>
&lt;img src="image/image-20240525155528302.png" alt="image-20240525155528302" style="zoom: 67%;" />
&lt;p>网络查找主机的方式，类似于上面找失主的例子，只是网络的层次更多。&lt;/p>
&lt;p>IP地址相当于学号，众所周知，学号是被划分的，即前n位代表学院，后m位代表该学院的某个学生，IP地址有划分吗? 有！&lt;/p>
&lt;h4 id="ipv4地址的划分">IPv4地址的划分
&lt;/h4>&lt;h5 id="分类划分法">分类划分法
&lt;/h5>&lt;p>IP地址分为两个部分, 网络号和主机号&lt;/p>
&lt;p>网络号: 保证相互连接的两个网段具有不同的标识;&lt;/p>
&lt;p>主机号: 用于标识网络和网络中的具体设备，同一网段内, 主机之间具有相同的网络号, 但是必须有不同的主机号;&lt;/p>
&lt;p>不同的子网其实就是把网络号相同的主机放到一起.如果在子网中新增一台主机, 则这台主机的网络号和这个子网的网络号一致, 但是主机号必须不能和子网中的其他主机重复.&lt;/p>
&lt;img src="image/image-20240525095931247.png" alt="image-20240525095931247" style="zoom:67%;" />
&lt;p>初始设计中，地址被分为A、B、C、D和E类，以不同的方式划分网络和主机部分：&lt;/p>
&lt;img src="image/image-20240525161520938.png" alt="image-20240525161520938" style="zoom:67%;" />
&lt;p>这种划分称为&lt;strong>分类划分法&lt;/strong>。&lt;/p>
&lt;hr>
&lt;p>随着Internet的飞速发展,这种划分方案的局限性很快显现出来,大多数组织都申请B类网络地址, 导致B类地址很快就分配完了, 而A类却浪费了大量地址;例如, 申请了一个B类地址, 理论上一个子网内能允许6万5千多个主机. A类地址的子网内的主机数更多. 然而实际网络架设中, 不会存在一个子网内有这么多的情况. &lt;strong>因此大量的IP地址都被浪费掉了&lt;/strong>&lt;/p>
&lt;p>针对这种情况提出了新的划分方案, 称为&lt;strong>CIDR(Classless Interdomain Routing):无分类域间路由选择&lt;/strong>&lt;/p>
&lt;hr>
&lt;h5 id="无分类域间路由选择-cidr">无分类域间路由选择-CIDR
&lt;/h5>&lt;ul>
&lt;li>
&lt;p>引入一个额外的子网掩码(subnet mask)来区分网络号和主机号;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>子网掩码也是一个32位的正整数. 通常用一串 &amp;ldquo;0&amp;rdquo; 来结尾;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将IP地址和子网掩码进行 &amp;ldquo;&lt;strong>按位与&lt;/strong>&amp;rdquo; 操作, 得到的结果就是网络号;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网络号和主机号的划分与这个IP地址是A类、B类还是C类无关;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>此时IP地址 = {&amp;lt;网络前缀&amp;gt;，&amp;lt;主机号&amp;gt;}&lt;/p>
&lt;p>&lt;strong>子网掩码(地址掩码)&lt;/strong>：分类的IP地址划分的主要问题就是网络号和主机号的比例只有3类：7:24, 14:16, 21:8，我们想要的根据实际情况，动态更改网络号和主机号的比例。子网掩码可以解决这个问题。&lt;/p>
&lt;p>那如何求子网掩码呢？&lt;/p>
&lt;ol>
&lt;li>
&lt;p>定长子网掩码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不定长子网掩码&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>CIDR在一定程度上缓解了IP地址不够用的问题(提高了利用率, 减少了浪费, 但是IP地址的绝对上限并没有增加), 仍然&lt;/p>
&lt;p>不是很够用. 这时候有三种方式来解决:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>动态分配IP地址: 只给接入网络的设备分配IP地址. 因此同一个MAC地址的设备, 每次接入互联网中, 得到的IP地址不一定是相同的;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>NAT技术&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IPv6: IPv6并不是IPv4的简单升级版. 这是互不相干的两个协议, 彼此并不兼容; IPv6用16字节128位来表示一个IP地址; 但是目前IPv6还没有普及;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="特殊的ip地址">特殊的IP地址
&lt;/h4>&lt;h3 id="nat技术">NAT技术
&lt;/h3>&lt;h4 id="公网ip和私网ip">公网IP和私网IP
&lt;/h4>&lt;p>如果一个组织内部组建局域网,IP地址只用于局域网内的通信,而不直接连到Internet上,理论上 使用任意的IP地址都可以,但是RFC 1918规定了用于组建局域网的私有IP地址&lt;/p>
&lt;ul>
&lt;li>
&lt;p>10.*,前8位是网络号,共16,777,216个地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>172.16.* 到 172.31.*,前12位是网络号,共1,048,576个地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>192.168.*,前16位是网络号,共65,536个地址&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>包含在这个范围中的, 都成为私有IP, 其余的则称为全局IP(或公网IP);&lt;/p>
&lt;p>问题1:为什么要分公网和私网？公网IP和私网IP是如何工作的？&lt;/p>
&lt;p>主要是因为IPv4地址不够，因此我们需要复用一些IP地址，一台主机的IP地址不是唯一的吗？怎么还能复用。&lt;/p>
&lt;p>工作原理如下：&lt;/p>
&lt;p>一台主机的IP的地址是在联网时由路由器进行分配，为私有IP地址，在不同的局域网内，私有IP地址可能相同。主机发送请求到路由器，如果主机访问的IP不属于该路由器的局域网内，则路由器会更改数据报里的源IP地址，&lt;strong>更改为路由器的WAN口IP&lt;/strong>，向上一级转发。也就是说，数据报在传输过程，&lt;strong>源IP地址一直在变化&lt;/strong>。这样我们只需要给部分路由器赋予唯一的公网IP，而这些路由器下的子网使用私网IP进行管理。&lt;/p>
&lt;p>这种技术就是&lt;strong>NAT技术&lt;/strong>（网络地址转换）：私网IP地址通常在内部网络中使用，并通过网络地址转换（NAT）设备（如路由器）将私网IP映射到一个或多个公网IP地址。NAT允许多个设备共享一个公网IP地址访问互联网，有效地减少了对公网IP地址的需求。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240526114735516.png"
width="1490"
height="967"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240526114735516_hu_df3095e513e34673.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240526114735516_hu_292a6949452d3080.png 1024w"
loading="lazy"
alt="image-20240526114735516"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一个路由器可以配置两个IP地址, 一个是WAN口IP, 一个是LAN口IP(子网IP).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>路由器LAN口连接的主机, 都从属于当前这个路由器的子网中.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同的路由器, 子网IP其实都是一样的(通常都是192.168.1.1). 子网内的主机IP地址不能重复. 但是子网之间的IP地址就可以重复了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每一个家用路由器, 其实又作为运营商路由器的子网中的一个节点. 这样的运营商路由器可能会有很多级,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最外层的运营商路由器, WAN口IP就是一个公网IP了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>子网内的主机需要和外网进行通信时, 路由器将IP首部中的IP地址进行替换(替换成WAN口IP), 这样逐级替换, 最终数据包中的IP地址成为一个公网IP. 这种技术称为NAT(Network Address Translation，网络地址转换).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果希望我们自己实现的服务器程序, 能够在公网上被访问到, 就需要把程序部署在一台具有外网IP的服务器上. 这样的服务器可以在阿里云/腾讯云上进行购买.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>那现在有个问题：主机通过私有IP访问互联网时，路由器会不断更改源IP地址，那么目的主机，也就是服务器，服务器的响应该怎么返回呢？&lt;/p>
&lt;p>答：当设备在私有网络中访问互联网时，路由器使用NAT将设备的私有IP地址替换为路由器的公网IP地址，**并记录这个映射关系。**这样当服务器返回的响应到路由器后，会根据映射关系跳到下一级路由器，最后到主机。&lt;/p>
&lt;hr>
&lt;p>了解完IP地址，那有个问题：谁给主机设置IP地址？&lt;/p>
&lt;h3 id="ip地址的分配">IP地址的分配
&lt;/h3>&lt;h4 id="静态配置">静态配置
&lt;/h4>&lt;p>人手动配置&lt;/p>
&lt;h4 id="动态配置---dhcp应用层协议">动态配置 - DHCP（应用层协议）
&lt;/h4>&lt;p>动态主机配置协议DHCP是&lt;strong>应用层&lt;/strong>协议，使用客户/服务器方式，客户端和服务端通过广播方式进行交互，基于UDP。
DHCP提供即插即用联网的机制，主机可以从服务器动态获取IP地址、子网掩码、默认网关、DNS服务器名称与IP地址,
允许地址重用，支持移动用户加入网络，支持在用地址续租。&lt;/p>
&lt;p>1.主机广播DHCP发现报文
2.DHCP服务器广播DHCP提供报文
3.主机广播DHCP请求报文
4.DHCP服务器广播DHCP确认报文&lt;/p>
&lt;hr>
&lt;p>那IP地址与数据是如何包装的？&lt;/p>
&lt;h2 id="网际协议ip">网际协议IP
&lt;/h2>&lt;h3 id="ip报文格式">IP报文格式
&lt;/h3>&lt;img src="image/image-20240522192202291.png" alt="image-20240522192202291" style="zoom:80%;" />
&lt;ul>
&lt;li>4位版本号(version):指定IP协议的版本,对于IPv4来说,就是4.&lt;/li>
&lt;li>4位头部长度(header length): IP头部的长度是多少个32bit,也就是 length * 4 的字节数4bit表示最大的数字是15,因此IP头部最大长度是60字节.&lt;/li>
&lt;li>8位服务类型(Type of Service): 3位优先权字段(已经弃用),4位TOS字段 和1位保留字段(必须置为0).4位TOS分别表示: **最小延时,最大吞吐量,最高可靠性,最小成本,**这四者相互冲突,只能选择一个，需要根据不同的情况选择不同的对于ssh/telnet这样的应用程序,最小延时比较重要; 对于ftp这样的程序,最大吞吐量比较重要.&lt;/li>
&lt;li>16位总长度(totallength): IP数据报整体占多少个字节.&lt;/li>
&lt;li>16位标识(id): 唯一的标识主机发送的报文.如果IP报文在数据链路层被分片了,那么每一个片里面的这个id都是相同的.&lt;/li>
&lt;li>3位标志字段: 第一位保留(保留的意思是现在不用,但是还没想好说不定以后要用到)第二位置为1表示禁止分片,这时候如果报文长度超过MTU,IP模块就会丢弃报文,第三位表示&amp;quot;更多分片”,如果分片了的话最后一个分片置为1，其他是0.类似于一个结束标记.&lt;/li>
&lt;li>13位分片偏移(framegament offset): 是分片相对于原始IP报文开始处的偏移.其实就是在表示当前分片在原报文中处在哪个位置实际偏移的字节数是这个值*8 得到的.因此，除了最后一个报文之外,其他报文的长度必须是8的整数倍(否则报文就不连续了).&lt;/li>
&lt;li>8位生存时间(Time To Live, TTL): 数据报到达目的地的最大报文跳数,一般是64.每次经过一个路由,TTL-= 1，一直减到0还没到达,那么就丢弃了.这个字段主要是用来防止出现路由循环&lt;/li>
&lt;li>8位协议: 表示上层协议的类型&lt;/li>
&lt;li>16位头部校验和: 使用CRC进行校验,来鉴别头部是否损坏.&lt;/li>
&lt;li>32位源地址和32位目标地址: 表示发送端和接收端&lt;/li>
&lt;li>选项字段(不定长,最多40字节): 略&lt;/li>
&lt;/ul>
&lt;h3 id="ip层的分组转发">IP层的分组转发
&lt;/h3>&lt;p>IP（Internet Protocol）报文有时会由于其大小超过了数据链路层的最大传输单元（MTU，Maximum Transmission Unit）而需要进行分片（fragmentation）。&lt;/p>
&lt;p>控制分片的字段是IP报头里的3位标志和13位片偏移。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240527093950676.png"
width="532"
height="106"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240527093950676_hu_2fe7eb4a8b2d22f6.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240527093950676_hu_dde79ec519a4b416.png 1024w"
loading="lazy"
alt="image-20240527093950676"
class="gallery-image"
data-flex-grow="501"
data-flex-basis="1204px"
>&lt;/p>
&lt;p>3位标志&lt;/p>
&lt;ol>
&lt;li>&lt;strong>第0位（保留位，Reserved Bit，RB）&lt;/strong>：
&lt;ul>
&lt;li>始终为0，保留为将来使用。&lt;/li>
&lt;li>在处理IP报文时，应忽略这个位的值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>第1位（不分片位，Don&amp;rsquo;t Fragment，DF）&lt;/strong>：
&lt;ul>
&lt;li>如果设置为1，则表示不允许对该IP报文进行分片。如果报文大小超过MTU，则报文将被丢弃并返回ICMP错误消息。&lt;/li>
&lt;li>如果设置为0，则表示允许对该IP报文进行分片。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>第2位（更多分片位，More Fragments，MF）&lt;/strong>：
&lt;ul>
&lt;li>如果设置为1，则表示后面还有更多的分片。&lt;/li>
&lt;li>如果设置为0，则表示这是最后一个分片或者报文没有被分片。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>13位片偏移：片偏移指出：较长的分组在分片后，某片在原分组中的相对付置，也就是说，相对于用户数据字段的起点，该片从何处开始。片偏移以8个字节为偏移单位。这就是说，除最后一个数据报片外，&lt;strong>其他每个分片的长度一定是8字节 (64 位）的整数倍。&lt;/strong>&lt;/p>
&lt;p>分片过程：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240616220046061.png"
width="1481"
height="541"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240616220046061_hu_86bd344c23ee72de.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240616220046061_hu_4a0bb128d212d1ee.png 1024w"
loading="lazy"
alt="image-20240616220046061"
class="gallery-image"
data-flex-grow="273"
data-flex-basis="657px"
>&lt;/p>
&lt;p>（1）广播地址是网络地址中主机号全l的地址（主机号全0的地址代表网络本身）。销售部和技术部均分配了192.168.1.0/24的IP地址空间，IP地址的前24位为子网的网络号。于是在后8位中划分部门的子网，选择前1位作为部门子网的网络号。令销售部子网的网络号为0，技术部子网的网络号为1，则技术部子网的完整地址为192.168.1.128；令销售部子网的主机号全1，可以得到该部门的广播地址为192.168.1.127。每个主机仅分配一个IP地址，计算目前还可以分配的主机数，用技术部可以分配的主机数减去已分配的主机数，技术部总共可以分配给计算机的主机数为27-2=126(减去全0和全l的主机号）。已经分配了208-129+1=80个，此外还有1个IP地址分配给了路由器的端口(192.168.1.254)，因此还可以分配126-80-1=45台。&lt;/p>
&lt;p>（2）判断分片的大小，需要考虑各个网段的MTU，而且注意分片的数据长度必须是8B的整数倍。由题可知，在技术部子网内，MTU=800B，IP分组头部长20B，最大1P分片封装数据的字节数为L[(800-20)/8]*8=776。至少需要的分片数[(1500-20)/776=2。第1个分片的偏移量为0；第2个分片的偏移量为776/8=97。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/wps2-17167747939121.jpg"
width="630"
height="258"
srcset="https://sfw003.github.io/p/network-layer/image/wps2-17167747939121_hu_8ad42010d9dc39fa.jpg 480w, https://sfw003.github.io/p/network-layer/image/wps2-17167747939121_hu_8712c04d1f7ee54f.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="244"
data-flex-basis="586px"
>&lt;/p>
&lt;p>丢片问题：&lt;/p>
&lt;ol>
&lt;li>第一个丢了：找不到片偏移=0 ==&amp;gt; 第一个丢了&lt;/li>
&lt;li>中间丢了：根据片偏移和报文大小进行计算，可以得出。比如上面收到1和3，但3片偏移=2000，而1只有1000字节，因此少了1000字节 ==&amp;gt; 2丢了&lt;/li>
&lt;li>最后一个丢了：找不到MF=0的报文 ==&amp;gt; 最后一个丢了&lt;/li>
&lt;/ol>
&lt;p>推荐分片吗？ &lt;strong>不推荐&lt;/strong>。增加了丢包概率，少一个分片都要重发。&lt;/p>
&lt;h2 id="icmp协议">ICMP协议
&lt;/h2>&lt;p>为了更有效地转发 IP 数据报和提高交付成功的机会，在网际层使用了网际控制报文协ICMP (Internet Control Message Protocol) 。&lt;/p>
&lt;p>ICMP协议是一个 &lt;strong>网络层协议&lt;/strong>，它的位置在IP协议上方，简单来说，ICMP的数据是包装在IP报文里。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240616192603849.png"
width="682"
height="444"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240616192603849_hu_8ad840f5947285d4.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240616192603849_hu_4051fe6e99eda0eb.png 1024w"
loading="lazy"
alt="image-20240616192603849"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>”为了更有效地转发 IP 数据报和提高交付成功的机会“， 那ICMP如何提高效率？&lt;/p>
&lt;p>首先，在发送数据之前，先探探路。&lt;/p>
&lt;p>因此ICMP报文分为了2种：&lt;strong>ICMP 差错报告报文和 ICMP 询间报文。&lt;/strong>&lt;/p>
&lt;h3 id="icmp报文的种类">ICMP报文的种类
&lt;/h3>&lt;h4 id="差错报文的种类">差错报文的种类
&lt;/h4>&lt;p>(I) 终点不可达&lt;/p>
&lt;p>当路由器或主机不能交付数据报时就向源点发送终点不可达报文。&lt;/p>
&lt;p>(2) 时间超过&lt;/p>
&lt;p>当路由器收到生存时间为零的数据报时，除丢弃该数据报外，还要向&lt;/p>
&lt;p>源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，&lt;/p>
&lt;p>就把已收到的数据报片都丢弃，并向源点发送时间超过报文。&lt;/p>
&lt;p>(3) 参数问题&lt;/p>
&lt;p>当路由器或目的主机收到的数据报的首部中有的字段的伯不正确时，&lt;/p>
&lt;p>就丢弃该数据报，并向源点发送参数问题报文。&lt;/p>
&lt;p>(4) 改变路由（重定向）&lt;/p>
&lt;p>路由器把改变路由报文发送给主机，让主机知道下次应将&lt;/p>
&lt;p>数据报发送给另外的路由器（也就是说，找到了更好的路由）。&lt;/p>
&lt;h4 id="询问报文的种类">询问报文的种类
&lt;/h4>&lt;p>在应用层有个工具：Ping，它是之间跨过&lt;/p>
&lt;h3 id="icmp的应用">ICMP的应用
&lt;/h3>&lt;h4 id="ping">PING
&lt;/h4>&lt;hr>
&lt;p>前文描述了一个数据报通过NAT技术不断转发的过程，那么具体的某一次转发过程是什么样子的呢？&lt;/p>
&lt;p>路由的过程, 就是这样一跳一跳(Hop by Hop) &amp;ldquo;问路&amp;rdquo; 的过程.&lt;/p>
&lt;p>所谓 &amp;ldquo;一跳&amp;rdquo; 就是数据链路层中的一个区间. 具体在以太网中指从源MAC地址到目的MAC地址之间的帧传输区间.&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240526150101121.png"
width="1225"
height="507"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240526150101121_hu_a6381fc663b2af75.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240526150101121_hu_9807eb87f767df6a.png 1024w"
loading="lazy"
alt="image-20240526150101121"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="579px"
>&lt;/p>
&lt;p>IP数据包的传输过程也和问路一样.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当IP数据包, 到达路由器时, 路由器会先查看目的IP;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>路由器决定这个数据包是能直接发送给目标主机, 还是需要发送给下一个路由器;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依次反复, 一直到达目标IP地址;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>那么如何判定当前这个数据包该发送到哪里呢?&lt;/p>
&lt;p>不同网络中的两个主机之间的通信，要经过若干个路由器转发分组来完成，分组查找路由器中的转发表，从指明的按口转发到下个路由器。但转发表是怎样得出的呢？是从路由表导出的。而路山表又是由互联网中许多的路由器，按照共同选定的路由选择协议，通过许多次的相互交换路由信息而产生的。&lt;/p>
&lt;h2 id="路由">路由
&lt;/h2>&lt;p>因此路由器传输的信息可以分为两类：&lt;/p>
&lt;ol>
&lt;li>数据&lt;/li>
&lt;li>路由信息&lt;/li>
&lt;/ol>
&lt;p>在计算机网络种，将2这抽象为数据平面和控制平面。&lt;/p>
&lt;p>数据&amp;ndash;数据平面 &amp;ndash;根据转发表进行转发，时间短，直接用硬件解决&lt;/p>
&lt;p>路由信息&amp;ndash;控制平面 &amp;ndash;根据路由算法得出，时间长，用软件解决&lt;/p>
&lt;p>控制平面有2种方式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>传统方法：每个路由器都有控制平面和数据平面，路由器自己计算路由选择算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SDN（software-Defined Networking) 方法：控制平面在远程控制器，然后远程控制器分发给各路由器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="路由算法">路由算法
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240613222103201.png"
width="1471"
height="332"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240613222103201_hu_82114f1e6d0ac83a.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240613222103201_hu_b8227ac35006d68e.png 1024w"
loading="lazy"
alt="image-20240613222103201"
class="gallery-image"
data-flex-grow="443"
data-flex-basis="1063px"
>&lt;/p>
&lt;h3 id="路由选择协议--动态路由">路由选择协议 &amp;ndash; 动态路由
&lt;/h3>&lt;p>路由选择分层:&lt;/p>
&lt;ul>
&lt;li>互联网太大：如果让所们的路由器知道所付的网络应怎样到达，则这种路由器将非常大，处理起来也太花时间&lt;/li>
&lt;li>许多单位也不愿意暴露自己单位网络的细节给外界。&lt;/li>
&lt;/ul>
&lt;p>为此，可以把整个互联网划分为许多较小的&lt;strong>自治系统&lt;/strong>(autonomous system), 一般都记为&lt;strong>AS&lt;/strong> 。&lt;/p>
&lt;img src="image/image-20240616194211665.png" alt="image-20240616194211665" style="zoom: 80%;" />
&lt;h3 id="rip协议">RIP协议
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>RIP(Routing Information Protocol)&lt;/strong> 是一种分布式的基于&lt;strong>距离向量&lt;/strong>的路由选择协议，是因特网的协议标准，&lt;strong>最大优点是简单。&lt;/strong>
RIP协议要求网络中每一个路由器都&lt;strong>维护&lt;/strong>从它自己到其他每一个目的网络的唯一最佳距离记录(即一组距离)。&lt;/p>
&lt;p>&lt;strong>距离:通常为“跳数”，即从源端口到目的端口所经过的路由器个数，经过一个路由器跳数+1。&lt;/strong>&lt;/p>
&lt;p>特别的，从一路由器到直接连接的网络距离为1。&lt;/p>
&lt;p>RIP允许一条路由最多只能包含15个路由器，因此距离为16表示网络不可达。这就表明RIP协议只适用于小互联网。&lt;/p>&lt;/blockquote>
&lt;p>路由器如何维护这个最佳距离？路由器刚开始就知道这个最佳距离吗？不知道，它需要去“询问”，准确来说“交换”，与其他路由器交换各自的路由信息。&lt;/p>
&lt;p>问题：和谁交换？何时交换？如何根据交换的路由信息更新自己的路由信息？&lt;/p>
&lt;ul>
&lt;li>和谁交换信息：仅和相邻路由器交换信息&lt;/li>
&lt;li>交换什么信息：自己的路由表&lt;/li>
&lt;li>何时交换信息：&lt;strong>周期性交换&lt;/strong>(例如每30秒)&lt;/li>
&lt;/ul>
&lt;p>路由器刚开始工作时，只知道自己到直连网络的距离为1，经过若干次交换和更新后，每个路由器都知道到达本AS内各网络的最短距离和下一跳地址，这一过程称为&lt;strong>收敛&lt;/strong>。&lt;/p>
&lt;p>具体的更新方式：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240614220632507.png"
width="1090"
height="412"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240614220632507_hu_6961e5c232df22fa.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240614220632507_hu_3d909d9b9b822edf.png 1024w"
loading="lazy"
alt="image-20240614220632507"
class="gallery-image"
data-flex-grow="264"
data-flex-basis="634px"
>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/note_typora/%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c/%e7%bd%91%e7%bb%9c%e5%b1%82.assets/image-20240614220502629.png"
loading="lazy"
alt="image-20240614220502629"
>&lt;/p>
&lt;h4 id="rip协议的格式">RIP协议的格式
&lt;/h4>&lt;p>现在较新的 RIP 版本是 1998 11 月公布的 RlP2 [RFC 2453, STD57], 新版本协议本身并无多大变化，但性能上有些改进。 RIP2 可以支持九分类域间路由选择 CIDR 。此外，RIP2 还提供简单的鉴别过程支持多插。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240616203227620.png"
width="687"
height="290"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240616203227620_hu_d0e075d1ebe150f9.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240616203227620_hu_e0cdd12e344e1214.png 1024w"
loading="lazy"
alt="image-20240616203227620"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/p>
&lt;p>RIP 报义由首部和路由部分组成。在路由部分要填入自治系统号 ASN (Autonomous System Number)，这是考虑使 RIP 有可能收到本自治系统以外的路由选择信息。还要指出目的网络地址（包括网络的子网掩码）、下一跳路由器地址以及到此网络的距离。一个 RIP报文最多可包括 25 个路由。如超过，必须再用一个 RIP报文来传送。&lt;/p>
&lt;h4 id="rip的缺点">RIP的缺点
&lt;/h4>&lt;p>RTP 存在的一个问题是当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器。我们可以用图 4-41 的简单例子来说明。设三个网络通过两个路由器互连起来，并且都已建寸了各自的路由表。图中路由器交换的信息只给出了我们感兴趣的一行内容。路&lt;/p>
&lt;p>路由器 R, 中的 “Net 1,1, 直接”表示”到网 Net1的距离是 I, 直接交付&lt;/p>
&lt;p>路由器 R2 中的&amp;quot;Net 1,2, R1&amp;quot; 表示”到网 Net1的距离是 2, 下一跳经过 R1&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240616203801681.png"
width="1057"
height="570"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240616203801681_hu_fc5d1b3131c800a1.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240616203801681_hu_fa7d312017eaf641.png 1024w"
loading="lazy"
alt="image-20240616203801681"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>现在假定路由器R1到Net1的线路出问题了，因R1更新自己的路由信息并发送：Net1的距离改为 16, 表示不可达。因而传输的路由表中的相应项目变为 “Net1, 16, 直接“ 。但是，很可能要经过 30 秒钟后才把更新信息发送给 R2 。然而 R2 可能已经先把自己的路由表发送给了 R1，其中有 “Net1, 2, R1&amp;quot; 这一项。&lt;/p>
&lt;p>R1收到 R2 的更新报文后，便将“Net1, 2, R1&amp;quot; &amp;ndash;&amp;gt; “Net1, 3, R2”，误认为可以通过R2到达Net1，于是又更新自己的路由表。&lt;/p>
&lt;p>而此时，R2收到了R1不可达Net1的信息,更新了自己路由表。但是R1却认为R2可达Net1。之后二者便互相交换信息，都以为对方可以到达Net1, 由于每次交换都会使路由表中的Net1的距离增加。这样的更新一直继续下去，直到 R1 R2 到Net1 的距离都增大到 16 时，R1和R2才知道原来网 Ne 是不可达的。&lt;/p>
&lt;p>协议 RIP 的这一特点叫作：&lt;strong>好消息传播得快，而坏消息传播得慢&lt;/strong>。网络出故障的传播时间往往较长（例如数分钟）。这是 RIP 的一个主要缺点。&lt;/p>
&lt;p>但如果一个路由器发现了更短的路由，那么这种更新信息就传播得很快。&lt;/p>
&lt;h3 id="路由表">路由表
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240526204952824.png"
width="1059"
height="345"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240526204952824_hu_a81d42b59aab7a05.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240526204952824_hu_8eb918997dd58641.png 1024w"
loading="lazy"
alt="image-20240526204952824"
class="gallery-image"
data-flex-grow="306"
data-flex-basis="736px"
>&lt;/p>
&lt;h4 id="路由表的转发">路由表的转发
&lt;/h4>&lt;p>路由器转发分组的算法:
1.提取目的IP地址
2.是否直接交付
3.特定主机路由
4.检测路由表中有无路径
5.默认路由 0.0.0.0
6.丢弃，报告转发分组出错&lt;/p>
&lt;h2 id="网络层设备">网络层设备
&lt;/h2>&lt;h4 id="路由器">路由器
&lt;/h4>&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240616204643269.png"
width="1511"
height="645"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240616204643269_hu_aab17738d70038b5.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240616204643269_hu_a51429ca0d4f3ab.png 1024w"
loading="lazy"
alt="image-20240616204643269"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="562px"
>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/network-layer/image/image-20240616204738186.png"
width="1032"
height="516"
srcset="https://sfw003.github.io/p/network-layer/image/image-20240616204738186_hu_a3214c74157918e.png 480w, https://sfw003.github.io/p/network-layer/image/image-20240616204738186_hu_e51415100704f74f.png 1024w"
loading="lazy"
alt="image-20240616204738186"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/.assets/image-20240616204801265.png"
loading="lazy"
alt="image-20240616204801265"
>&lt;/p></description></item><item><title>现代上网流程</title><link>https://sfw003.github.io/p/modern-internet-access-process/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/modern-internet-access-process/</guid><description>&lt;h2 id="家庭网络环境光猫路由器架构">家庭网络环境（光猫+路由器架构）
&lt;/h2>&lt;h3 id="光猫拨号模式路由模式">光猫拨号模式（路由模式）
&lt;/h3>&lt;p>流程：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>光猫拨号&lt;/strong>：光猫通过PPPoE协议向运营商认证，获取公网IP（如 &lt;code>218.207.128.66&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>内网分配&lt;/strong>：光猫内置DHCP服务器，为下级设备（如路由器）分配内网IP（如 &lt;code>192.168.1.2&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>路由器二次分配&lt;/strong>：路由器开启NAT功能，为终端设备（手机、电脑）分配二级内网IP（如 &lt;code>192.168.0.100&lt;/code>）。&lt;br>
• &lt;strong>特点&lt;/strong>：&lt;br>
• 设备通过两次NAT访问公网，可能影响P2P连接和端口映射。&lt;br>
• 光猫需支持路由功能，常见于家庭宽带场景。&lt;/li>
&lt;/ol>
&lt;h3 id="光猫桥接模式路由器拨号">光猫桥接模式（路由器拨号）
&lt;/h3>&lt;p>流程：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>光猫透传&lt;/strong>：光猫仅作为信号转换设备，不参与拨号（模式由运营商或用户修改）。&lt;/li>
&lt;li>&lt;strong>路由器拨号&lt;/strong>：路由器通过PPPoE拨号获取公网IP，并直接分配内网IP（如 &lt;code>192.168.0.0/24&lt;/code> 网段）。&lt;br>
• &lt;strong>特点&lt;/strong>：&lt;br>
• 减少网络层级，提升性能（如游戏延迟降低）。&lt;br>
• 需路由器支持PPPoE拨号功能。&lt;/li>
&lt;/ol>
&lt;h2 id="校园网环境集中式dhcp架构">校园网环境（集中式DHCP架构）
&lt;/h2>&lt;h3 id="有线接入流程">有线接入流程
&lt;/h3>&lt;p>&lt;strong>步骤&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>物理连接&lt;/strong>：设备通过网线直连宿舍/教室的网络接口。&lt;/li>
&lt;li>&lt;strong>自动获取IP&lt;/strong>：校园网DHCP服务器分配内网IP（如 &lt;code>10.30.199.235&lt;/code>，子网掩码 &lt;code>255.255.0.0&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>认证跳转&lt;/strong>：浏览器自动弹出认证页面（如 &lt;code>https://network.nbu.edu.cn&lt;/code>），输入学号/密码完成登录。&lt;br>
• &lt;strong>特点&lt;/strong>：&lt;br>
• 禁止使用私人路由器，防止网络环路。&lt;br>
• IP地址动态分配，租约时间通常为8天。&lt;/li>
&lt;/ol>
&lt;h4 id="无线接入流程">无线接入流程
&lt;/h4>&lt;p>• &lt;strong>步骤&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>连接无线信号（如 &lt;code>nbu-wireless&lt;/code>）。&lt;/li>
&lt;li>自动获取IP后，通过统一身份认证访问外网。&lt;br>
• &lt;strong>特点&lt;/strong>：&lt;br>
• 多终端支持（通常允许3台设备同时在线）。&lt;br>
• 校内资源（如图书馆数据库）无需认证即可访问。&lt;/li>
&lt;/ol></description></item><item><title>应用层</title><link>https://sfw003.github.io/p/application-layer/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/p/application-layer/</guid><description>&lt;h2 id="应用层">应用层
&lt;/h2>&lt;img src="image/image-20240527151104647-17192977497754.png" alt="image-20240527151104647" style="zoom:67%;" />
&lt;h2 id="dns">DNS
&lt;/h2>&lt;h3 id="dns的由来">DNS的由来
&lt;/h3>&lt;p>TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序. 但是IP地址不方便记忆.&lt;/p>
&lt;p>于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系. 。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240530141941436.png"
width="1897"
height="498"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240530141941436_hu_32aacd5f75cfab4c.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240530141941436_hu_7a42af5b86425d1a.png 1024w"
loading="lazy"
alt="image-20240530141941436"
class="gallery-image"
data-flex-grow="380"
data-flex-basis="914px"
>&lt;/p>
&lt;p>最初, 通过互连网信息中心(SRI-NIC)来管理这个hosts文件的.&lt;/p>
&lt;ul>
&lt;li>如果一个新计算机要接入网络, 或者某个计算机IP变更, 都需要到信息中心申请变更hosts文件.&lt;/li>
&lt;li>其他计算机也需要定期下载更新新版本的hosts文件才能正确上网&lt;/li>
&lt;/ul>
&lt;p>这样就太麻烦了, 于是产生了DNS系统.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系. 如果新计算机接入网络, 将这个信息注册到数据库中;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="域名的组成">域名的组成
&lt;/h3>&lt;p>通常我们称形如&amp;quot;www.sina.com.cn&amp;quot;是一个域名，但从严格意义上讲，&amp;ldquo;sina.com.cn&amp;quot;才被称为域名(全球唯一)，而&amp;quot;www&amp;quot;是主机名。&amp;ldquo;主机名.域名&amp;quot;称为完全限定域名(FQDN)。一个域名下可以有多个主机，域名全球唯一，那么&amp;quot;主机名.域名&amp;quot;肯定也是全球唯一的。&lt;/p>
&lt;ol>
&lt;li>顶级域名（TLD）&lt;/li>
&lt;/ol>
&lt;p>这是域名的最高级部分，位于最右边。顶级域名有几种类型：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>通用顶级域名（gTLD）&lt;/strong>：如&lt;code>.com&lt;/code>、&lt;code>.org&lt;/code>、&lt;code>.net&lt;/code>、&lt;code>.info&lt;/code>、&lt;code>.biz&lt;/code>等。&lt;/li>
&lt;li>&lt;strong>国家和地区顶级域名（ccTLD）&lt;/strong>：如&lt;code>.cn&lt;/code>（中国）、&lt;code>.us&lt;/code>（美国）、&lt;code>.uk&lt;/code>（英国）等。&lt;/li>
&lt;li>&lt;strong>行业和专业领域的（gTLD）&lt;/strong>：如&lt;code>.edu&lt;/code>（教育机构）、&lt;code>.gov&lt;/code>（政府机构）、&lt;code>.mil&lt;/code>（军事机构）、&lt;code>.int&lt;/code>（国际组织）。&lt;/li>
&lt;li>&lt;strong>新通用顶级域名（new gTLD）&lt;/strong>：如&lt;code>.app&lt;/code>、&lt;code>.tech&lt;/code>、&lt;code>.xyz&lt;/code>、&lt;code>.shop&lt;/code>等。&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>二级域名（SLD）&lt;/li>
&lt;/ol>
&lt;p>位于顶级域名的左边，是域名的一部分，通常代表组织或公司的名称。例如，在&lt;code>example.com&lt;/code>中，&lt;code>example&lt;/code>是二级域名。&lt;/p>
&lt;ol start="3">
&lt;li>子域名&lt;/li>
&lt;/ol>
&lt;p>这是在二级域名的左边，可以有多个层级，用于更具体的组织和管理。例如，在&lt;code>blog.example.com&lt;/code>中，&lt;code>blog&lt;/code>是子域名。子域名可以进一步分层，如&lt;code>support.blog.example.com&lt;/code>。&lt;/p>
&lt;ol start="4">
&lt;li>主机名&lt;/li>
&lt;/ol>
&lt;p>主机名指向特定的设备或服务器，通常是子域名中的最左边部分。例如，在&lt;code>mail.example.com&lt;/code>中，&lt;code>mail&lt;/code>是主机名，指向邮件服务器。&lt;/p>
&lt;h3 id="dns查询">DNS查询
&lt;/h3>&lt;p>DNS服务器采用分层的结构，整体看上去像一颗&lt;strong>树&lt;/strong>。为什么采用分层的结构？在启用域名功能之前，单凭主机名还无法完全管理IP地址，因为在不同的组织机构中不允许有同名的主机。然而，当出现了带有层次结构的域名之后，每一个组织机构就可以自由地为主机命名了。&lt;/p>
&lt;p>当在浏览器输入一个域名，查询顺序如下：&lt;/p>
&lt;p>&lt;strong>（1）查看浏览器缓存&lt;/strong>&lt;/p>
&lt;p>当用户通过浏览器访问某域名时，本地DNS解析器首先会在浏览器的缓存中查找是否有该域名对应的 IP 地址（若曾经访问过该域名且没有清空缓存便存在）。&lt;/p>
&lt;p>&lt;strong>（2）查看hosts文件&lt;/strong>&lt;/p>
&lt;p>由于&lt;code>hosts&lt;/code> 文件是一个静态配置文件，系统会首先查找这个文件中的条目。任何匹配的域名都会直接使用&lt;code>hosts&lt;/code> 文件中的IP地址，而不会进行后续查询。&lt;/p>
&lt;p>windows: &lt;code>C:\Windows\System32\drivers\etc\hosts&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240602154449621.png"
width="746"
height="187"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240602154449621_hu_18d2304176ba4768.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240602154449621_hu_f072ded1b123d68f.png 1024w"
loading="lazy"
alt="image-20240602154449621"
class="gallery-image"
data-flex-grow="398"
data-flex-basis="957px"
>&lt;/p>
&lt;p>&lt;strong>（3）查看系统DNS缓存&lt;/strong>&lt;/p>
&lt;p>如果hosts文件里没有，检测系统DNS缓存。windows主机查询DNS缓存的命令：&lt;code>ipconfig /displaydns&lt;/code> , &lt;code>ipconfig /flushdns&lt;/code>命令用于清除系统的DNS缓存&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240530145414067.png"
width="677"
height="244"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240530145414067_hu_4332cceabe1ae463.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240530145414067_hu_264cad1d0f0cc9eb.png 1024w"
loading="lazy"
alt="image-20240530145414067"
class="gallery-image"
data-flex-grow="277"
data-flex-basis="665px"
>&lt;/p>
&lt;p>&lt;strong>（4）查看路由器缓存&lt;/strong>&lt;/p>
&lt;p>路由器通常配置为DNS中继器，转发DNS查询请求，某些路由器可能有DNS缓存功能，如果有，则会检测路由器缓存&lt;/p>
&lt;p>&lt;strong>（5）查看ISP DNS 缓存&lt;/strong>&lt;/p>
&lt;p>当在用户客服端查找不到域名对应 IP 地址，则将进入 ISP DNS 缓存中进行查询。比如你用的是电信的网络，则会进入电信的 DNS 缓存服务器中进行查找。&lt;/p>
&lt;p>&lt;strong>（6）递归\迭代查询&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>询问根域名服务器&lt;/li>
&lt;/ol>
&lt;p>当以上均未完成，则进入根服务器进行查询。全球仅有 13 台根域名服务器，1 个主根域名服务器，其余 12 为辅根域名服务器。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（如.com、.cn等）服务器 IP 告诉本地 DNS 服务器。&lt;/p>
&lt;ol start="2">
&lt;li>询问顶级域名服务器&lt;/li>
&lt;/ol>
&lt;p>顶级域名服务器收到请求后查看区域文件记录，若无记录则将其管辖范围内权威域名服务器的 IP 地址告诉本地 DNS 服务器。&lt;/p>
&lt;ol start="3">
&lt;li>询问权威域名（主域名）服务器&lt;/li>
&lt;/ol>
&lt;p>权威域名服务器接收到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确记录。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240602104743988.png"
width="1596"
height="767"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240602104743988_hu_4e92e61eb5d08df1.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240602104743988_hu_844714c86a607c44.png 1024w"
loading="lazy"
alt="image-20240602104743988"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="499px"
>&lt;/p>
&lt;p>递归查询一般不常用，而是将递归和迭代相结合的形式：&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240602105327086.png"
width="1807"
height="729"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240602105327086_hu_777a9876c613c5c4.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240602105327086_hu_f6d2a1e21ec5521f.png 1024w"
loading="lazy"
alt="image-20240602105327086"
class="gallery-image"
data-flex-grow="247"
data-flex-basis="594px"
>&lt;/p>
&lt;p>实验：修改hosts文件，修改www.baidu.com 对应的ip，导致浏览器无法访问百度&lt;/p>
&lt;p>以谷歌浏览器为例：&lt;/p>
&lt;ol>
&lt;li>首先清除谷歌的DNS缓存&lt;/li>
&lt;/ol>
&lt;p>谷歌浏览器输入：chrome://net-internals/#sockets 在出现的页面中分别点击&lt;/p>
&lt;ul>
&lt;li>「DNS」-&amp;gt;「Clear host cache」&lt;/li>
&lt;li>「Socket」-&amp;gt;「Flush socket pools」&lt;/li>
&lt;/ul>
&lt;img src="image/image-20240530151709220.png" alt="image-20240530151709220" style="zoom: 80%;" />
&lt;ol start="2">
&lt;li>以管理员身份运行记事本，修改hosts, windows系统下hosts文件路径 &lt;code>C:\Windows\System32\drivers\etc\hosts&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>添加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">192.0.2.1 baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.0.2.1 www.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#为注释
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>刷新本地缓存：&lt;code>ipconfig /flushdns&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>此时在谷歌浏览器输入www.baidu.com则进不去。&lt;/p>
&lt;h2 id="url">URL
&lt;/h2>&lt;p>URL: （Uniform Resource Locator，统一资源定位符）是互联网上用于指定资源位置的标准格式。
&lt;img src="https://sfw003.github.io/p/application-layer/image/8a5a3af309d5afb265482b0b8b6924a7.png"
width="1355"
height="321"
srcset="https://sfw003.github.io/p/application-layer/image/8a5a3af309d5afb265482b0b8b6924a7_hu_6ade9270ae54005d.png 480w, https://sfw003.github.io/p/application-layer/image/8a5a3af309d5afb265482b0b8b6924a7_hu_c64fe9c030ed2c7f.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="422"
data-flex-basis="1013px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>协议&lt;/strong>&lt;/li>
&lt;li>&lt;strong>登录信息&lt;/strong>：现在一般很少见到，多数的登录信息会通过登录界面来解决。&lt;/li>
&lt;li>&lt;strong>服务器地址&lt;/strong>：可以直接使用IP地址，也可以使用域名。一般情况我们看到的是域名。&lt;/li>
&lt;li>&lt;strong>端口号&lt;/strong>：一般情况下我们看不到。多数协议是有固定的端口号的。比如：http &amp;ndash; 80端口， ftp &amp;ndash; 21。因此浏览器会自动&lt;strong>根据协议确定端口号&lt;/strong>。当然也可以手动添加。&lt;/li>
&lt;li>&lt;strong>文件路径&lt;/strong>：指定了资源在服务器上的位置。路径由斜杠（/）分隔成多个部分，每个部分表示资源在服务器文件系统中的一个目录或文件。这个路径可以是&lt;strong>绝对路径&lt;/strong>，也可以是&lt;strong>相对路径&lt;/strong>。具体的实现方式在后文讲解。&lt;/li>
&lt;li>&lt;strong>查询字符串&lt;/strong>：可选的部分，用于向服务器传递参数。查询字符串以问号（?）开头，参数的形式为key=value，即形式为参数=参数值，不同参数之间用和号（&amp;amp;）连接。&lt;/li>
&lt;li>&lt;strong>片段标识符&lt;/strong>：可选的部分，指定了资源中的特定片段或位置。片段标识符以井号（#）开头。&lt;/li>
&lt;/ul>
&lt;p>一个典型的URL如下：
&lt;code>https://www.example.com/path/to/resource?param1=value1&amp;amp;param2=value2#section1 &lt;/code>&lt;/p>
&lt;p>特殊字符：在标准的URL是有一些特殊字符的，如&lt;code>: . / ? #&lt;/code>等。
这些字符是有特殊含义的，如果用户输入的信息也包含特殊字符呢？
&lt;img src="https://sfw003.github.io/p/application-layer/image/d0d22e77ce718cdb1a6c7cb59f4d0d51.png"
width="1654"
height="211"
srcset="https://sfw003.github.io/p/application-layer/image/d0d22e77ce718cdb1a6c7cb59f4d0d51_hu_43242300dbd79cef.png 480w, https://sfw003.github.io/p/application-layer/image/d0d22e77ce718cdb1a6c7cb59f4d0d51_hu_5723b73eb755a1d9.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="783"
data-flex-basis="1881px"
>
&lt;code>https://www.baidu.com/s?ie=utf-8&amp;amp;f=8&amp;amp;rsv_bp=1&amp;amp;tn=44004473_8_oem_dg&amp;amp;wd=%2F%2F%2F%2F%3F%3F%3F%3F&amp;amp;oq=%25E5%25BE%25AE%25E4%25BF%25A1&amp;amp;rsv_pq=9096029e0051298e&amp;amp;rsv_t=9c9fTtRQZn57sCTrXfNf5Nd12s3mvBMGfVc9IDGDaHxz%2FHsJqX5ofYHt5v9i5psyTgxUV%2BXp6wU&amp;amp;rqlang=cn&amp;amp;rsv_enter=1&amp;amp;rsv_dl=tb&amp;amp;rsv_sug3=16&amp;amp;rsv_sug1=6&amp;amp;rsv_sug7=100&amp;amp;bs=%E5%BE%AE%E4%BF%A1&lt;/code>&lt;/p>
&lt;p>显然不能直接将带有&lt;strong>特殊字符的内容&lt;/strong>传参到URL里面，因此要进行编码（encode）。&lt;/p>
&lt;ul>
&lt;li>urlencode：编码&lt;/li>
&lt;li>urldecode：解码&lt;/li>
&lt;/ul>
&lt;p>浏览器会将用户的搜索信息进行编码，发给服务器，服务器再进行解码。&lt;/p>
&lt;p>转义的规则如下:
将需要转码的字符转为16进制，然后从右到左，取4位(不足4位直接处理)，每2位做一位，前面加上%，编码成%XY&lt;/p>
&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+ %2B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/ %2F
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">? %3F
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">% %25
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># %23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;amp; %26
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="http协议">HTTP协议
&lt;/h2>&lt;p>Web的应用层协议是超文本传输协议（HyperText TransferProtocol，HTTP），它是Web的核心，在[RFC1945］和[RFC2616］中进行了定义。HTTP由两个程序实现：一个客户程序和一个服务器程序。客户程序和服务器程序运行在不同的端系统中，通过交换HTTP报文进行会话。HTTP定义了这些报文的结构以及客户和服务器进行报文交换的方式。&lt;/p>
&lt;h3 id="http请求-request">HTTP请求 request
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240522193056733.png"
width="1107"
height="424"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240522193056733_hu_bf2a077cd1c7c239.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240522193056733_hu_e1c030c9292d3a0c.png 1024w"
loading="lazy"
alt="image-20240522193056733"
class="gallery-image"
data-flex-grow="261"
data-flex-basis="626px"
>&lt;/p>
&lt;h4 id="method">Method
&lt;/h4>&lt;img src="image/image-20240522193958081.png" alt="image-20240522193958081" style="zoom: 67%;" />
&lt;p>GET和POST是安全和幂等的吗？&lt;/p>
&lt;p>先说明下安全和幂等的概念：&lt;/p>
&lt;ul>
&lt;li>在HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。&lt;/li>
&lt;li>所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。&lt;/li>
&lt;/ul>
&lt;p>如果从 RFC 规范定义的语义来看:&lt;/p>
&lt;ul>
&lt;li>GET方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，
且每次的结果都是相同的。所以，可以对GET请求的数据做缓存，这个缓存可以做到浏览器本身上
（彻底避免浏览器发请求），也可以做到代理上（如nginx），而且在浏览器中GET请求可以保存为书
签。&lt;/li>
&lt;li>POST因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。所以，浏览器一般不会缓存POST请求，也不能把POST请求保存为书签。&lt;/li>
&lt;/ul>
&lt;p>做个简要的小结。
GET的语义是请求获取指定的资源。GET方法是安全、幂等、可被缓存的。
POST的语义是根据请求负荷（报文主体）对指定的资源做出处理，具体的处理方式视资源类型而不同。
POST不安全，不幂等，（大部分实现）不可缓存。
注意，上面是从 RFC 规范定义的语义来分析的。
但是实际过程中，开发者不一定会按照 RFC 规范定义的语义来实现 GET 和 POST方法。比如：
·可以用GET方法实现新增或删除数据的请求，这样实现的GET方法自然就不是安全和幂等。
·可以用POST方法实现查询数据的请求，这样实现的POST方法自然就是安全和幂等。&lt;/p>
&lt;p>GET请求主要用于从服务器获取实体资源，资源可被缓存，可以记录历史记录&lt;/p>
&lt;p>POST请求主要用于向服务器提交表单数据，因此POST请求不会被缓存，POST请求不会保留在浏览器历史记录当中，POST请求不能被保存为书签，POST请求对数据长度没有要求&lt;/p>
&lt;p>PUT方法请求服务器去把请求里的实体存储在请求URI（Request-URI）标识下。&lt;/p>
&lt;ul>
&lt;li>如果请求URI（Request-URI）指定的的资源已经在源服务器上存在，那么此请求里的实体应该被当作是源服务器关于此URI所指定资源实体的最新修改版本。&lt;/li>
&lt;li>如果请求URI（Request-URI）指定的资源不存在，并且此URI被用户代理定义为一个新资源，那么源服务器就应该根据请求里的实体创建一个此URI所标识下的资源。如果一个新的资源被创建了，源服务器必须能向用户代理（user agent） 发送201（已创建）响应。如果已存在的资源被改变了，那么源服务器应该发送200（Ok）或者204（无内容）响应&lt;/li>
&lt;/ul>
&lt;h4 id="请求头选项">请求头选项
&lt;/h4>&lt;p>格式：&lt;code>key: value&lt;/code>&lt;/p>
&lt;p>&lt;strong>Connection&lt;/strong>：指明长短连接&lt;/p>
&lt;ul>
&lt;li>close 表示短连接&lt;/li>
&lt;li>keep-alive表示长连接&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Content-Type&lt;/strong>：用于告诉客户实际返回的内容的内容类型或者说编码类型&lt;/p>
&lt;p>比如 Content-Type: text/html; charset=utf-8 用于表示正文是 text/html文档类型，字符集为utf-8&lt;/p>
&lt;p>&lt;strong>Content-Language&lt;/strong>：用于表示用户希望采用的语言或语言组合&lt;/p>
&lt;p>比如 Content-Language: de-DE 表示该文件为说德语的人提供，但是要注意者不代表文件内容就是德语的。&lt;/p>
&lt;p>这里理解 Content-Type 和 Content-Language 区别： Content-Language更多表示上层语言的表示， 而Content-Type用于底层数据编码的表示。因此在响应报文头部设置字符编码是在Content-Type中设置charset属性，大小写不敏感&lt;/p>
&lt;p>&lt;strong>cookie&lt;/strong>：cookie的中文翻译是曲奇，小甜饼的意思。cookie其实就是一些数据信息，类型为“&lt;strong>小型文本文件&lt;/strong>”，存储于电脑上的文本文件中。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240522201824467.png"
width="2441"
height="1198"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240522201824467_hu_5c20ca5c4ac44d42.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240522201824467_hu_5959d309dc256ff5.png 1024w"
loading="lazy"
alt="image-20240522201824467"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="489px"
>&lt;/p>
&lt;p>为什么有cookie?&lt;/p>
&lt;p>HTTP里的Cookie是一种用于在客户端（如浏览器）和服务器之间存储和交换信息的小数据片段。Cookie的主要作用是保持状态信息，因为HTTP协议本身是无状态的，其无状态性主要体现在每个请求都是独立的，服务器不会自动保存任何关于客户端的上下文信息。这种设计简化了协议，但也带来了一些挑战，需要其他机制来管理会话和状态。Cookie可以用于各种用途，如用户身份验证、会话管理、用户偏好保存等。&lt;/p>
&lt;p>下面为cookie用作会话管理的示意图：&lt;/p>
&lt;p>cookie不能直接存放用户的邮箱和密码，这会有安全问题，因此会用sessionID来替代用户的邮箱和密码。&lt;/p>
&lt;p>sessionID通常实验token，一串字符串。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240522202132932.png"
width="1269"
height="549"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240522202132932_hu_73197442004e55de.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240522202132932_hu_9f948e90119d693d.png 1024w"
loading="lazy"
alt="image-20240522202132932"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="554px"
>&lt;/p>
&lt;h3 id="http响应-response">HTTP响应 response
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240522193113564.png"
width="1106"
height="549"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240522193113564_hu_1c2ec54d2fea7b9b.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240522193113564_hu_3a34756643fde06d.png 1024w"
loading="lazy"
alt="image-20240522193113564"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>&lt;/p>
&lt;h4 id="状态码">状态码
&lt;/h4>&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240522195301476.png"
width="1209"
height="428"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240522195301476_hu_b9ef102a424c9ebc.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240522195301476_hu_daa72efb4d3f2b1b.png 1024w"
loading="lazy"
alt="image-20240522195301476"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>&lt;/p>
&lt;h5 id="1xx-接受的请求正在处理">&lt;strong>1xx-接受的请求正在处理&lt;/strong>
&lt;/h5>&lt;h5 id="2xx---请求正常处理完毕">&lt;strong>2xx - 请求正常处理完毕&lt;/strong>
&lt;/h5>&lt;p>200: ok&lt;/p>
&lt;h5 id="3xx---需要进行附加操作以完成请求">&lt;strong>3xx - 需要进行附加操作以完成请求&lt;/strong>
&lt;/h5>&lt;p>301：&lt;/p>
&lt;ul>
&lt;li>301 状态码表明目标资源被永久的移动到了一个新的 URI，任何未来对这个资源的引用都应该使用新的 URI。&lt;/li>
&lt;/ul>
&lt;p>302：&lt;/p>
&lt;ul>
&lt;li>302 状态码表示目标资源临时移动到了另一个 URI 上。由于重定向是临时发生的，所以客户端在之后的请求中还应该使用原本的 URI。&lt;/li>
&lt;li>由于历史原因，用户代理可能会在重定向后的请求中把 POST 方法改为 GET方法。如果不想这样，应该使用 307（Temporary Redirect） 状态码&lt;/li>
&lt;/ul>
&lt;p>303：&lt;/p>
&lt;ul>
&lt;li>303 状态码表示服务器要将浏览器重定向到另一个资源。从语义上讲，重定向到的资源并不是你所请求的资源，而是对你所请求资源的一些描述。&lt;/li>
&lt;li>比如303 常用于将 POST 请求重定向到 GET 请求，比如你上传了一份个人信息，服务器发回一个 303 响应，将你导向一个“上传成功”页面。&lt;/li>
&lt;/ul>
&lt;p>307：&lt;/p>
&lt;ul>
&lt;li>307 的定义实际上和 302 是一致的，唯一的区别在于，307 状态码不允许浏览器将原本为 POST 的请求重定向到 GET 请求上。&lt;/li>
&lt;/ul>
&lt;p>308：&lt;/p>
&lt;ul>
&lt;li>308 的定义实际上和 301 是一致的，唯一的区别在于，308 状态码不允许浏览器将原本为 POST 的请求重定向到 GET 请求上。&lt;/li>
&lt;/ul>
&lt;h5 id="4xx-服务器无法处理请求-客户端的问题">&lt;strong>4xx-服务器无法处理请求-客户端的问题&lt;/strong>
&lt;/h5>&lt;p>403：&lt;/p>
&lt;p>禁止访问，服务器理解请求客户端的请求，但是拒绝执行此请求（比如权限不足，ip被拉黑。。。等一系列原因）&lt;/p>
&lt;p>404：NOT FOUND&lt;/p>
&lt;p>表示客户端请求的资源不存在&lt;/p>
&lt;h5 id="5xx-服务器处理出错-服务器的问题">&lt;strong>5xx-服务器处理出错-服务器的问题&lt;/strong>
&lt;/h5>&lt;p>503 由于临时的服务器维护或者过载，服务器当前无法处理请求。. 这个状况是临时的，并且将在一段时间以后恢复。&lt;/p>
&lt;h3 id="http-header">HTTP Header
&lt;/h3>&lt;p>http的请求报头和响应报头的内容是一些key:value的参数。
常见有以下几个：&lt;/p>
&lt;ul>
&lt;li>Content-Type: 数据类型(text/html等)&lt;/li>
&lt;li>Content-Length: Body的长度&lt;/li>
&lt;li>Host: 客户端告知服务器, 所请求的资源是在哪个主机的哪个端口上;&lt;/li>
&lt;li>User-Agent: 声明用户的操作系统和浏览器版本信息;&lt;/li>
&lt;li>referer: 当前页面是从哪个页面跳转过来的;&lt;/li>
&lt;li>location: 搭配3xx状态码使用, 告诉客户端接下来要去哪里访问;&lt;/li>
&lt;li>Cookie: 用于在客户端存储少量信息. 通常用于实现会话(session)的功能;&lt;/li>
&lt;/ul>
&lt;p>下面介绍一下cookie:
我们平时访问某些网站，会观察到以下现象：第一次访问，它会要求你进行登录，但在之后的几天内进行访问，它会自动登录，又过了几天后，它又会要求你重新输入账号密码进行登录。
这是为什么呢？
首先我要明确一个概念：http协议默认是无状态的。它并不会关心你以前访问哪些资源，比如我们刷新一次网页，浏览器便会再次提交http请求。（当然，现在的浏览器可能会进行在本地缓存，但对http协议本身来说，是需要再次提交请求）
这就导致当我们登录网站后，刷新一下页面或者访问网站的资源，又会要求我们输入账号和密码，这显然对用户很不友好。而cookie便可以解决这个问题。&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/b6222a831a732e1ce3dfa1770aaf2597.png"
width="3004"
height="1292"
srcset="https://sfw003.github.io/p/application-layer/image/b6222a831a732e1ce3dfa1770aaf2597_hu_2e248c279a885137.png 480w, https://sfw003.github.io/p/application-layer/image/b6222a831a732e1ce3dfa1770aaf2597_hu_8873d073416efd6b.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>
第一次登录后，网站会响应一个Set Cookie给浏览器，浏览器会将Set Cookie的信息保存到一个文件里，这个文件我们叫作Cookie文件。之后再次进行访问时，浏览器会自动将Cookie文件的信息发给网站，自动完成登录。
如何验证？以edge浏览器为例。
&lt;img src="https://sfw003.github.io/p/application-layer/image/11285886352ca3e44a23d613d572e997.png"
width="1354"
height="874"
srcset="https://sfw003.github.io/p/application-layer/image/11285886352ca3e44a23d613d572e997_hu_a8ce45457b665d89.png 480w, https://sfw003.github.io/p/application-layer/image/11285886352ca3e44a23d613d572e997_hu_8155dd7294cb2a02.png 1024w"
loading="lazy"
alt="在这里插入图片描述"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>Location：重定向&lt;/p>
&lt;p>目的资源改变了路径，但是保持原链接依然可用，或者用于将客户端资源请求导向新的URL，通过3xx状态码表示重定向，通过头部字段中设定新的请求URL&lt;/p>
&lt;ul>
&lt;li>301：表示永久重定向&lt;/li>
&lt;li>302：表示临时重定向&lt;/li>
&lt;/ul>
&lt;h2 id="https">HTTPS
&lt;/h2>&lt;p>HTTPS 也是⼀个应⽤层协议. 是在 HTTP 协议的基础上引⼊了⼀个加密层&lt;/p>
&lt;h3 id="对称加密和非对称加密">对称加密和非对称加密
&lt;/h3>&lt;p>&lt;strong>对称加密&lt;/strong>其实就是通过同一个&amp;quot;密钥”，把明文加密成密文，并且也能把密文解密成明文.
一个简单的对称加密，按位异或
假设明文a=1234，密钥key=8888
则加密a^key得到的密文b为9834.
然后针对密文9834再次进行运算b^key，得到的就是原来的明文1234.
（对于字符串的对称加密也是同理，每一个字符都可以表示成一个数字)
当然，按位异或只是最简单的对称加密.HTTPS中并不是使用按位异或.&lt;/p>
&lt;p>但事情没这么简单.服务器同一时刻其实是给很多客户端提供服务的.这么多客户端，每个人用的秘钥都必须是不同的（如果是相同那密钥就太容易扩散了，黑客就也能拿到了）.因此服务器就需要维护每个客户端和每个密钥之间的关联关系，这也是个很麻烦的事情～&lt;/p>
&lt;img src="image/image-20241126164557409.png" alt="image-20241126164557409" style="zoom:67%;" />
&lt;p>比较理想的做法，就是能在客户端和服务器建立连接的时候，双方协商确定这次的密钥是啥～&lt;/p>
&lt;p>但是如果直接把密钥明文传输，那么黑客也就能获得密钥了~～此时后续的加密操作就形同虚设了，
&lt;strong>因此密钥的传输也必须加密传输！&lt;/strong>
但是要想对密钥进行对称加密，就仍然需要先协商确定一个“密钥的密钥&amp;quot;这就成了&amp;quot;先有鸡还是先有
蛋”的问题了.此时密钥的传输再用对称加密就行不通了，&lt;/p>
&lt;img src="image/image-20241126165624456.png" alt="image-20241126165624456" style="zoom:67%;" />
&lt;p>再引入非对称密钥&lt;/p>
&lt;p>&lt;strong>非对称加密&lt;/strong>要用到两个密钥，一个叫做“公钥&amp;rdquo;，一个叫做&amp;quot;私钥&amp;rdquo;
公钥和私钥是配对的.最大的缺点就是运算速度非常慢，比对称加密要慢很多，&lt;/p>
&lt;ul>
&lt;li>通过公钥对明文加密，变成密文&lt;/li>
&lt;li>通过私钥对密文解密，变成明文&lt;/li>
&lt;/ul>
&lt;p>也可以反着用&lt;/p>
&lt;ul>
&lt;li>通过私钥对明文加密，变成密文&lt;/li>
&lt;li>通过公钥对密文解密，变成明文&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20241126164824351.png"
width="1416"
height="605"
srcset="https://sfw003.github.io/p/application-layer/image/image-20241126164824351_hu_b82629669aa97d8f.png 480w, https://sfw003.github.io/p/application-layer/image/image-20241126164824351_hu_e0578ee10cef2b9f.png 1024w"
loading="lazy"
alt="image-20241126164824351"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="561px"
>&lt;/p>
&lt;p>客户端在本地生成对称密钥，通过公钥加密，发送给服务器，
由于中间的网络设备没有私钥，即使截获了数据，也无法还原出内部的原文，也就无法获取到对称密钥
服务器通过私钥解密，还原出客户端发送的对称密钥.并且使用这个对称密钥加密给客户端返回的响应数据.
后续客户端和服务器的通信都只用对称加密即可.由于该密钥只有客户端和服务器两个主机知道，其他主机/设备不知道密钥即使截获数据也没有意义，&lt;/p>
&lt;p>由于对称加密的效率比非对称加密高很多，因此只是在开始阶段协商密钥的时候使用非对称加密，后续的传输仍然使用对称加密，&lt;/p>
&lt;p>但问题来了：服务器生成公钥和私钥&lt;/p>
&lt;ul>
&lt;li>客户端如何获取到公钥？&lt;/li>
&lt;li>客户端如何确定这个公钥不是黑客伪造的？&lt;/li>
&lt;/ul>
&lt;p>正是存在这个问题，可以使用中间人攻击。&lt;/p>
&lt;h3 id="中间人攻击">中间人攻击
&lt;/h3>&lt;ol>
&lt;li>服务器具有非对称加密算法的公钥S，私钥S'&lt;/li>
&lt;li>中间人具有非对称加密算法的公钥M，私钥M'&lt;/li>
&lt;li>客户端向服务器发起请求，服务器明文传送公钥S给客户端&lt;/li>
&lt;li>&lt;strong>中间人劫持数据报文，提取公钥S并保存好，然后将被劫持报文中的公钥S替换成为自己的公钥M，并将伪造报文发给客户端&lt;/strong>&lt;/li>
&lt;li>客户端收到报文，提取公钥M(自己当然不知道公钥被更换过了)，自己形成对称秘钥X，用公钥M加密X，形成报文发送给服务器&lt;/li>
&lt;li>&lt;strong>中间人劫持后，直接用自己的私钥M&amp;rsquo;进行解密，得到通信秘钥X，再用曾经保存的服务端公钥S加密后，将报文推送给服务器&lt;/strong>&lt;/li>
&lt;li>服务器拿到报文，用自己的私钥S&amp;rsquo;解密，得到通信秘钥X&lt;/li>
&lt;li>双方开始采用X进行对称加密，进行通信。但是一切都在中间人的掌握中，劫持数据，进行窃听甚
至修改，都是可以的&lt;/li>
&lt;/ol>
&lt;p>这个问题的关键在于：&lt;strong>客户端无法分辨服务器发送公钥是否被调包&lt;/strong>。&lt;/p>
&lt;p>因此可以引入一个第三方结构，通过第三方结构来作证&lt;strong>客户端收到的公钥&lt;/strong>是正确的。&lt;/p>
&lt;h3 id="引入证书">引入证书
&lt;/h3>&lt;p>服务端在使用HTTPS前，需要向CA机构申领一份数字证书，数字证书里含有证书申请者信息、公钥信息等。服务器把证书传输给浏览器，浏览器从证书里获取公钥就行了，证书就如身份证，证明服务端公钥的权威性&lt;/p>
&lt;img src="image/image-20241126170950421.png" alt="image-20241126170950421" style="zoom:67%;" />
&lt;p>这个证书可以理解成是一个结构化的字符串，里面包含了以下信息：&lt;/p>
&lt;ul>
&lt;li>证书发布机构&lt;/li>
&lt;li>证书有效期&lt;/li>
&lt;li>公钥&lt;/li>
&lt;li>证书所有者&lt;/li>
&lt;li>签名&lt;/li>
&lt;/ul>
&lt;p>需要注意的是：申请证书的时候，需要在特定平台生成查，会同时生成一对儿密钥对儿，即公钥和私钥。这对密钥对儿就是用来在网络通信中进行明文加密以及数字签名的。&lt;/p>
&lt;h3 id="数字签名">数字签名
&lt;/h3>&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20241126171036464.png"
width="880"
height="684"
srcset="https://sfw003.github.io/p/application-layer/image/image-20241126171036464_hu_7bc553eb98f70039.png 480w, https://sfw003.github.io/p/application-layer/image/image-20241126171036464_hu_5b6abc0bff7720c0.png 1024w"
loading="lazy"
alt="image-20241126171036464"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;h3 id="解决中间人攻击">解决中间人攻击
&lt;/h3>&lt;ul>
&lt;li>在客户端和服务器刚一建立连接的时候，服务器给客户端返回一个响应（包含证书、服务器信息）.&lt;/li>
&lt;li>这个证书包含了刚才的公钥，也包含了网站的身份信息&lt;/li>
&lt;li>当客户端获取到这个证书之后，会对证书进行校验(防止证书是伪造的).
&lt;ul>
&lt;li>判定证书的有效期是否过期&lt;/li>
&lt;li>判定证书的发布机构是否受信任(&lt;strong>操作系统中已内置的受信任的证书发布机构&lt;/strong>).&lt;/li>
&lt;li>验证证书是否被篡改：从操作系统中拿到该证书发布机构的公钥，对签名解密，得到一个hash值（称为数据摘要)，设为hash1.然后计算整个证书的hash值，设为hash2.对比hash1和hash2是否相等.如果相等，则说明证书是没有被篡改过的，&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>由此可以判断证书没有被更改，没有被更改，可以保证收到的是服务器发送的消息，从中获取公钥。&lt;/p>
&lt;p>问题：中间人不能伪造证书吗？&lt;/p>
&lt;p>中间人有没有可能篡改该证书？&lt;/p>
&lt;ul>
&lt;li>中间人篡改了证书的明文&lt;/li>
&lt;li>由于他没有CA机构的私钥，所以无法hash之后用私钥加密形成签名，那么也就没法办法对篡改后
的证书形成匹配的签名&lt;/li>
&lt;li>如果强行篡改，客户端收到该证书后会发现明文和签名解密后的值不一致，则说明证书已被篡改，
证书不可信，从而终止向服务器传输信息，防止信息泄露给中间人&lt;/li>
&lt;/ul>
&lt;p>中间人整个掉包证书？&lt;/p>
&lt;ul>
&lt;li>因为中间人没有CA私钥，所以无法制作假的证书(为什么？）&lt;/li>
&lt;li>所以中间人只能向CA申请真证书，然后用自己申请的证书进行掉包&lt;/li>
&lt;li>这个确实能做到证书的整体掉包，但是别忘记，证书明文中包含了域名等服务端认证信息，如果整
体掉包，客户端依旧能够识别出来。&lt;/li>
&lt;li>永远记住：中间人没有CA私钥，所以对任何证书都无法进行合法修改，包括自己的&lt;/li>
&lt;/ul>
&lt;p>但还是有漏洞，&lt;strong>受信任的证书发布机构&lt;/strong>是内置在操作系统中，如果黑客伪装为一个证书发布机构，将自己的证书公钥下载到客户端的操作系统中，还是会出问题。&lt;/p>
&lt;h2 id="ftp协议和tftp">FTP协议和TFTP
&lt;/h2>&lt;p>基于TCP的FTP和基于UDP的TFTP,它们都是文件共享协议的一大类，即复制整个文件。&lt;/p>
&lt;blockquote>
&lt;p>特点：&lt;strong>若要存取一个文件，就必须先获得一个本地的文件副本。如果要修改文件，只能对文件的副本进行修改，然后再将修改后的文件副本传回到原节点。&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>FTP 使用客户-服务器方式。&lt;/p>
&lt;p>FTP的服务器进程由2大部分组成：&lt;/p>
&lt;ul>
&lt;li>1个主进程，负责接受新的请求&lt;/li>
&lt;li>n个从属进程，负责处理单个请求&lt;/li>
&lt;/ul>
&lt;p>工作流程：client向server发起建立连接的请求，通过FTP熟知的端口号21，找到server进程，同时告诉server自己的IP:PORT. 服务器用FTP进行数据传输的端口号20与client告知的IP:PORT找到client，建立数据传送连接。&lt;/p>
&lt;p>总结：&lt;/p>
&lt;ul>
&lt;li>FTP会建立2个TCP连接：控制连接 + 数据传送连接&lt;/li>
&lt;li>控制连接在整个会话期间保持打开，数据传送连接在传送完毕后关闭&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240618160723968.png"
width="947"
height="317"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240618160723968_hu_a82109bd47f527ca.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240618160723968_hu_86fb59e857bae442.png 1024w"
loading="lazy"
alt="image-20240618160723968"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="716px"
>&lt;/p>
&lt;p>TFTP 的主要优点有两个。第一， TFTP 可用于 UDP 环境。例如，当需要将程序或文件同&lt;/p>
&lt;p>时向许多机器下载时就往往衙要使用 TFTP 。第二， TFTP 代码所占的内存较小。这对较小的&lt;/p>
&lt;p>计算机或某些特殊用途的设备是很重要的&lt;/p>
&lt;p>TFTP 的工作很像停止等待协议。发送完一个文件块后就等待对方&lt;/p>
&lt;p>的确认，确认时应指明所确认的块编号。发完数据后在规定时间内收不到确认就要重发数据&lt;/p>
&lt;p>PDU 。发送确认 PDU 的一方若在规定时间内收不到下一个文件块，也要重发确认 PDU 。这&lt;/p>
&lt;p>样就可保证文件的传送不致因某一个数据报的丢失而告失败。&lt;/p>
&lt;h2 id="电子邮件格式">电子邮件格式
&lt;/h2>&lt;img src="image/image-20240602110000921.png" alt="image-20240602110000921" style="zoom:50%;" />
&lt;h2 id="电子邮件相关协议">电子邮件相关协议
&lt;/h2>&lt;img src="image/image-20240602110121557.png" alt="image-20240602110121557" style="zoom:67%;" />
&lt;h3 id="smtp--发送邮件">SMTP &amp;ndash; 发送邮件
&lt;/h3>&lt;h3 id="pop3imap--接受邮件">POP3/IMAP &amp;ndash; 接受邮件
&lt;/h3>&lt;h3 id="mime--扩充邮件内容">MIME &amp;ndash; 扩充邮件内容
&lt;/h3>&lt;p>前面所述的电子邮件协议 SMTP 有以下缺点：&lt;/p>
&lt;ol>
&lt;li>SMTP 不能传送可执行文件或其他的二进制对象。人们曾试图将二进制文件转换为SMTP 使用的 ASCII 文本，例如流行的 UNIX UUencode/UUdecode 方案，但这些均未形成正式标准或事实上的标准。&lt;/li>
&lt;li>SMTP 限于传送 位的 ASCII 码。许多其他非英语国家的文字（如中文、俄文，甚至带呕音符号的法文或德文）就无法传送。即使在 SMTP 网关将 EBCDIC 码（即扩充的二／十进制交换码）转换为 ASCII 码，也会遇到一些麻烦.&lt;/li>
&lt;li>SMTP 服务器会拒绝超过一定长度的邮件。&lt;/li>
&lt;li>某些 SMTP 的实现并没有完全按照 SMTP 的互联网标准。常见的问题如下：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>回车、换行的删除和增加；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>超过 76 个字符时的处理；截断或自动换行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>后面多余空格的删除；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将制表符tab 转换为若干个空格。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>MIME（多用途互联网邮件扩展）&lt;/p>
&lt;p>&lt;img src="https://sfw003.github.io/p/application-layer/image/image-20240602141110275.png"
width="674"
height="316"
srcset="https://sfw003.github.io/p/application-layer/image/image-20240602141110275_hu_6e1e8ef7a9a7e538.png 480w, https://sfw003.github.io/p/application-layer/image/image-20240602141110275_hu_d036f14cb305d821.png 1024w"
loading="lazy"
alt="image-20240602141110275"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="511px"
>&lt;/p>
&lt;p>TCP/IP 体系的电子邮件系统规定电子&lt;/p>
&lt;h4 id="基于万维网的电子邮件">基于万维网的电子邮件
&lt;/h4>&lt;p>基于万维网的电子邮件系统是指通过网页浏览器来访问和管理电子邮件的系统。邮件传输：SMTP协议，用户访问邮件服务器：HTTP协议&lt;/p></description></item><item><title>关于</title><link>https://sfw003.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/about/</guid><description>&lt;h2 id="关于我">关于我
&lt;/h2>&lt;p>一个软件工程的学生，主要技术栈c++后端开发，Qt客户端开发。&lt;/p></description></item><item><title>搜索</title><link>https://sfw003.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/search/</guid><description/></item><item><title>友情链接</title><link>https://sfw003.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sfw003.github.io/links/</guid><description/></item></channel></rss>